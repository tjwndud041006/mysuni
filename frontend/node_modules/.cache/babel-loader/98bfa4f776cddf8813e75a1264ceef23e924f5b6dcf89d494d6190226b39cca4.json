{"ast":null,"code":"import colors from './_colors.js';\nconst getColor = function (node) {\n  if (colors.hasOwnProperty(node.id)) {\n    return colors[node.id];\n  }\n  if (colors.hasOwnProperty(node.is)) {\n    return colors[node.is];\n  }\n  let found = node._cache.parents.find(c => colors[c]);\n  return colors[found];\n};\n\n// convert tags to our final format\nconst fmt = function (nodes) {\n  const res = {};\n  nodes.forEach(node => {\n    let {\n      not,\n      also,\n      is,\n      novel\n    } = node.props;\n    let parents = node._cache.parents;\n    if (also) {\n      parents = parents.concat(also);\n    }\n    res[node.id] = {\n      is,\n      not,\n      novel,\n      also,\n      parents,\n      children: node._cache.children,\n      color: getColor(node)\n    };\n  });\n  // lastly, add all children of all nots\n  Object.keys(res).forEach(k => {\n    let nots = new Set(res[k].not);\n    res[k].not.forEach(not => {\n      if (res[not]) {\n        res[not].children.forEach(tag => nots.add(tag));\n      }\n    });\n    res[k].not = Array.from(nots);\n  });\n  return res;\n};\nexport default fmt;","map":{"version":3,"names":["colors","getColor","node","hasOwnProperty","id","is","found","_cache","parents","find","c","fmt","nodes","res","forEach","not","also","novel","props","concat","children","color","Object","keys","k","nots","Set","tag","add","Array","from"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tag/methods/addTags/02-fmt.js"],"sourcesContent":["import colors from './_colors.js'\n\nconst getColor = function (node) {\n  if (colors.hasOwnProperty(node.id)) {\n    return colors[node.id]\n  }\n  if (colors.hasOwnProperty(node.is)) {\n    return colors[node.is]\n  }\n  let found = node._cache.parents.find(c => colors[c])\n  return colors[found]\n}\n\n// convert tags to our final format\nconst fmt = function (nodes) {\n  const res = {}\n  nodes.forEach(node => {\n    let { not, also, is, novel } = node.props\n    let parents = node._cache.parents\n    if (also) {\n      parents = parents.concat(also)\n    }\n    res[node.id] = {\n      is,\n      not,\n      novel,\n      also,\n      parents,\n      children: node._cache.children,\n      color: getColor(node)\n    }\n  })\n  // lastly, add all children of all nots\n  Object.keys(res).forEach(k => {\n    let nots = new Set(res[k].not)\n    res[k].not.forEach(not => {\n      if (res[not]) {\n        res[not].children.forEach(tag => nots.add(tag))\n      }\n    })\n    res[k].not = Array.from(nots)\n  })\n  return res\n}\n\nexport default fmt"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AAEjC,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC/B,IAAIF,MAAM,CAACG,cAAc,CAACD,IAAI,CAACE,EAAE,CAAC,EAAE;IAClC,OAAOJ,MAAM,CAACE,IAAI,CAACE,EAAE,CAAC;EACxB;EACA,IAAIJ,MAAM,CAACG,cAAc,CAACD,IAAI,CAACG,EAAE,CAAC,EAAE;IAClC,OAAOL,MAAM,CAACE,IAAI,CAACG,EAAE,CAAC;EACxB;EACA,IAAIC,KAAK,GAAGJ,IAAI,CAACK,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,CAAC,IAAIV,MAAM,CAACU,CAAC,CAAC,CAAC;EACpD,OAAOV,MAAM,CAACM,KAAK,CAAC;AACtB,CAAC;;AAED;AACA,MAAMK,GAAG,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC3B,MAAMC,GAAG,GAAG,CAAC,CAAC;EACdD,KAAK,CAACE,OAAO,CAACZ,IAAI,IAAI;IACpB,IAAI;MAAEa,GAAG;MAAEC,IAAI;MAAEX,EAAE;MAAEY;IAAM,CAAC,GAAGf,IAAI,CAACgB,KAAK;IACzC,IAAIV,OAAO,GAAGN,IAAI,CAACK,MAAM,CAACC,OAAO;IACjC,IAAIQ,IAAI,EAAE;MACRR,OAAO,GAAGA,OAAO,CAACW,MAAM,CAACH,IAAI,CAAC;IAChC;IACAH,GAAG,CAACX,IAAI,CAACE,EAAE,CAAC,GAAG;MACbC,EAAE;MACFU,GAAG;MACHE,KAAK;MACLD,IAAI;MACJR,OAAO;MACPY,QAAQ,EAAElB,IAAI,CAACK,MAAM,CAACa,QAAQ;MAC9BC,KAAK,EAAEpB,QAAQ,CAACC,IAAI;IACtB,CAAC;EACH,CAAC,CAAC;EACF;EACAoB,MAAM,CAACC,IAAI,CAACV,GAAG,CAAC,CAACC,OAAO,CAACU,CAAC,IAAI;IAC5B,IAAIC,IAAI,GAAG,IAAIC,GAAG,CAACb,GAAG,CAACW,CAAC,CAAC,CAACT,GAAG,CAAC;IAC9BF,GAAG,CAACW,CAAC,CAAC,CAACT,GAAG,CAACD,OAAO,CAACC,GAAG,IAAI;MACxB,IAAIF,GAAG,CAACE,GAAG,CAAC,EAAE;QACZF,GAAG,CAACE,GAAG,CAAC,CAACK,QAAQ,CAACN,OAAO,CAACa,GAAG,IAAIF,IAAI,CAACG,GAAG,CAACD,GAAG,CAAC,CAAC;MACjD;IACF,CAAC,CAAC;IACFd,GAAG,CAACW,CAAC,CAAC,CAACT,GAAG,GAAGc,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC;EAC/B,CAAC,CAAC;EACF,OAAOZ,GAAG;AACZ,CAAC;AAED,eAAeF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}