{"ast":null,"code":"const isAcronym = /[ .][A-Z]\\.? *$/i; //asci - 'n.s.a.'\nconst hasEllipse = /(?:\\u2026|\\.{2,}) *$/; // '...'\nconst hasLetter = /\\p{L}/u;\nconst hasPeriod = /\\. *$/;\nconst leadInit = /^[A-Z]\\. $/; // \"W. Kensington\"\n\n/** does this look like a sentence? */\nconst isSentence = function (str, abbrevs) {\n  // must have a letter\n  if (hasLetter.test(str) === false) {\n    return false;\n  }\n  // check for 'F.B.I.'\n  if (isAcronym.test(str) === true) {\n    return false;\n  }\n  // check for leading initial - \"W. Kensington\"\n  if (str.length === 3 && leadInit.test(str)) {\n    return false;\n  }\n  //check for '...'\n  if (hasEllipse.test(str) === true) {\n    return false;\n  }\n  let txt = str.replace(/[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049] *$/, '');\n  let words = txt.split(' ');\n  let lastWord = words[words.length - 1].toLowerCase();\n  // check for 'Mr.' (and not mr?)\n  if (abbrevs.hasOwnProperty(lastWord) === true && hasPeriod.test(str) === true) {\n    return false;\n  }\n  // //check for jeopardy!\n  // if (blacklist.hasOwnProperty(lastWord)) {\n  //   return false\n  // }\n  return true;\n};\nexport default isSentence;","map":{"version":3,"names":["isAcronym","hasEllipse","hasLetter","hasPeriod","leadInit","isSentence","str","abbrevs","test","length","txt","replace","words","split","lastWord","toLowerCase","hasOwnProperty"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/methods/01-sentences/is-sentence.js"],"sourcesContent":["const isAcronym = /[ .][A-Z]\\.? *$/i //asci - 'n.s.a.'\nconst hasEllipse = /(?:\\u2026|\\.{2,}) *$/ // '...'\nconst hasLetter = /\\p{L}/u\nconst hasPeriod = /\\. *$/\nconst leadInit = /^[A-Z]\\. $/ // \"W. Kensington\"\n\n/** does this look like a sentence? */\nconst isSentence = function (str, abbrevs) {\n  // must have a letter\n  if (hasLetter.test(str) === false) {\n    return false\n  }\n  // check for 'F.B.I.'\n  if (isAcronym.test(str) === true) {\n    return false\n  }\n  // check for leading initial - \"W. Kensington\"\n  if (str.length === 3 && leadInit.test(str)) {\n    return false\n  }\n  //check for '...'\n  if (hasEllipse.test(str) === true) {\n    return false\n  }\n  let txt = str.replace(/[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049] *$/, '')\n  let words = txt.split(' ')\n  let lastWord = words[words.length - 1].toLowerCase()\n  // check for 'Mr.' (and not mr?)\n  if (abbrevs.hasOwnProperty(lastWord) === true && hasPeriod.test(str) === true) {\n    return false\n  }\n  // //check for jeopardy!\n  // if (blacklist.hasOwnProperty(lastWord)) {\n  //   return false\n  // }\n  return true\n}\nexport default isSentence\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,kBAAkB,EAAC;AACrC,MAAMC,UAAU,GAAG,sBAAsB,EAAC;AAC1C,MAAMC,SAAS,GAAG,QAAQ;AAC1B,MAAMC,SAAS,GAAG,OAAO;AACzB,MAAMC,QAAQ,GAAG,YAAY,EAAC;;AAE9B;AACA,MAAMC,UAAU,GAAG,SAAAA,CAAUC,GAAG,EAAEC,OAAO,EAAE;EACzC;EACA,IAAIL,SAAS,CAACM,IAAI,CAACF,GAAG,CAAC,KAAK,KAAK,EAAE;IACjC,OAAO,KAAK;EACd;EACA;EACA,IAAIN,SAAS,CAACQ,IAAI,CAACF,GAAG,CAAC,KAAK,IAAI,EAAE;IAChC,OAAO,KAAK;EACd;EACA;EACA,IAAIA,GAAG,CAACG,MAAM,KAAK,CAAC,IAAIL,QAAQ,CAACI,IAAI,CAACF,GAAG,CAAC,EAAE;IAC1C,OAAO,KAAK;EACd;EACA;EACA,IAAIL,UAAU,CAACO,IAAI,CAACF,GAAG,CAAC,KAAK,IAAI,EAAE;IACjC,OAAO,KAAK;EACd;EACA,IAAII,GAAG,GAAGJ,GAAG,CAACK,OAAO,CAAC,yCAAyC,EAAE,EAAE,CAAC;EACpE,IAAIC,KAAK,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;EAC1B,IAAIC,QAAQ,GAAGF,KAAK,CAACA,KAAK,CAACH,MAAM,GAAG,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;EACpD;EACA,IAAIR,OAAO,CAACS,cAAc,CAACF,QAAQ,CAAC,KAAK,IAAI,IAAIX,SAAS,CAACK,IAAI,CAACF,GAAG,CAAC,KAAK,IAAI,EAAE;IAC7E,OAAO,KAAK;EACd;EACA;EACA;EACA;EACA;EACA,OAAO,IAAI;AACb,CAAC;AACD,eAAeD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}