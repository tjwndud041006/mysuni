{"ast":null,"code":"// put n new words where 1 word was\nconst insertContraction = function (document, point, words) {\n  let [n, w] = point;\n  if (!words || words.length === 0) {\n    return;\n  }\n  words = words.map((word, i) => {\n    word.implicit = word.text;\n    word.machine = word.text;\n    word.pre = '';\n    word.post = '';\n    word.text = '';\n    word.normal = '';\n    word.index = [n, w + i];\n    return word;\n  });\n  if (words[0]) {\n    // move whitespace over\n    words[0].pre = document[n][w].pre;\n    words[words.length - 1].post = document[n][w].post;\n    // add the text/normal to the first term\n    words[0].text = document[n][w].text;\n    words[0].normal = document[n][w].normal; // move tags too?\n  }\n  // do the splice\n  document[n].splice(w, 1, ...words);\n};\nexport default insertContraction;","map":{"version":3,"names":["insertContraction","document","point","words","n","w","length","map","word","i","implicit","text","machine","pre","post","normal","index","splice"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/contraction-one/compute/contractions/_splice.js"],"sourcesContent":["// put n new words where 1 word was\nconst insertContraction = function (document, point, words) {\n  let [n, w] = point\n  if (!words || words.length === 0) {\n    return\n  }\n  words = words.map((word, i) => {\n    word.implicit = word.text\n    word.machine = word.text\n    word.pre = ''\n    word.post = ''\n    word.text = ''\n    word.normal = ''\n    word.index = [n, w + i]\n    return word\n  })\n  if (words[0]) {\n    // move whitespace over\n    words[0].pre = document[n][w].pre\n    words[words.length - 1].post = document[n][w].post\n    // add the text/normal to the first term\n    words[0].text = document[n][w].text\n    words[0].normal = document[n][w].normal // move tags too?\n  }\n  // do the splice\n  document[n].splice(w, 1, ...words)\n}\nexport default insertContraction\n"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAC1D,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK;EAClB,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IAChC;EACF;EACAH,KAAK,GAAGA,KAAK,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;IAC7BD,IAAI,CAACE,QAAQ,GAAGF,IAAI,CAACG,IAAI;IACzBH,IAAI,CAACI,OAAO,GAAGJ,IAAI,CAACG,IAAI;IACxBH,IAAI,CAACK,GAAG,GAAG,EAAE;IACbL,IAAI,CAACM,IAAI,GAAG,EAAE;IACdN,IAAI,CAACG,IAAI,GAAG,EAAE;IACdH,IAAI,CAACO,MAAM,GAAG,EAAE;IAChBP,IAAI,CAACQ,KAAK,GAAG,CAACZ,CAAC,EAAEC,CAAC,GAAGI,CAAC,CAAC;IACvB,OAAOD,IAAI;EACb,CAAC,CAAC;EACF,IAAIL,KAAK,CAAC,CAAC,CAAC,EAAE;IACZ;IACAA,KAAK,CAAC,CAAC,CAAC,CAACU,GAAG,GAAGZ,QAAQ,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACQ,GAAG;IACjCV,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,CAACQ,IAAI,GAAGb,QAAQ,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACS,IAAI;IAClD;IACAX,KAAK,CAAC,CAAC,CAAC,CAACQ,IAAI,GAAGV,QAAQ,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACM,IAAI;IACnCR,KAAK,CAAC,CAAC,CAAC,CAACY,MAAM,GAAGd,QAAQ,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACU,MAAM,EAAC;EAC1C;EACA;EACAd,QAAQ,CAACG,CAAC,CAAC,CAACa,MAAM,CAACZ,CAAC,EAAE,CAAC,EAAE,GAAGF,KAAK,CAAC;AACpC,CAAC;AACD,eAAeH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}