{"ast":null,"code":"// match  'foo /yes/' and not 'foo/no/bar'\nconst bySlashes = /(?:^|\\s)([![^]*(?:<[^<]*>)?\\/.*?[^\\\\/]\\/[?\\]+*$~]*)(?:\\s|$)/;\n// match '(yes) but not foo(no)bar'\nconst byParentheses = /([!~[^]*(?:<[^<]*>)?\\([^)]+[^\\\\)]\\)[?\\]+*$~]*)(?:\\s|$)/;\n// okay\nconst byWord = / /g;\nconst isBlock = str => {\n  return /^[![^]*(<[^<]*>)?\\(/.test(str) && /\\)[?\\]+*$~]*$/.test(str);\n};\nconst isReg = str => {\n  return /^[![^]*(<[^<]*>)?\\//.test(str) && /\\/[?\\]+*$~]*$/.test(str);\n};\nconst cleanUp = function (arr) {\n  arr = arr.map(str => str.trim());\n  arr = arr.filter(str => str);\n  return arr;\n};\nconst parseBlocks = function (txt) {\n  // parse by /regex/ first\n  let arr = txt.split(bySlashes);\n  let res = [];\n  // parse by (blocks), next\n  arr.forEach(str => {\n    if (isReg(str)) {\n      res.push(str);\n      return;\n    }\n    res = res.concat(str.split(byParentheses));\n  });\n  res = cleanUp(res);\n  // split by spaces, now\n  let final = [];\n  res.forEach(str => {\n    if (isBlock(str)) {\n      final.push(str);\n    } else if (isReg(str)) {\n      final.push(str);\n    } else {\n      final = final.concat(str.split(byWord));\n    }\n  });\n  final = cleanUp(final);\n  return final;\n};\nexport default parseBlocks;","map":{"version":3,"names":["bySlashes","byParentheses","byWord","isBlock","str","test","isReg","cleanUp","arr","map","trim","filter","parseBlocks","txt","split","res","forEach","push","concat","final"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/match/methods/parseMatch/01-parseBlocks.js"],"sourcesContent":["// match  'foo /yes/' and not 'foo/no/bar'\nconst bySlashes = /(?:^|\\s)([![^]*(?:<[^<]*>)?\\/.*?[^\\\\/]\\/[?\\]+*$~]*)(?:\\s|$)/\n// match '(yes) but not foo(no)bar'\nconst byParentheses = /([!~[^]*(?:<[^<]*>)?\\([^)]+[^\\\\)]\\)[?\\]+*$~]*)(?:\\s|$)/\n// okay\nconst byWord = / /g\n\nconst isBlock = str => {\n  return /^[![^]*(<[^<]*>)?\\(/.test(str) && /\\)[?\\]+*$~]*$/.test(str)\n}\nconst isReg = str => {\n  return /^[![^]*(<[^<]*>)?\\//.test(str) && /\\/[?\\]+*$~]*$/.test(str)\n}\n\nconst cleanUp = function (arr) {\n  arr = arr.map(str => str.trim())\n  arr = arr.filter(str => str)\n  return arr\n}\n\nconst parseBlocks = function (txt) {\n  // parse by /regex/ first\n  let arr = txt.split(bySlashes)\n  let res = []\n  // parse by (blocks), next\n  arr.forEach(str => {\n    if (isReg(str)) {\n      res.push(str)\n      return\n    }\n    res = res.concat(str.split(byParentheses))\n  })\n  res = cleanUp(res)\n  // split by spaces, now\n  let final = []\n  res.forEach(str => {\n    if (isBlock(str)) {\n      final.push(str)\n    } else if (isReg(str)) {\n      final.push(str)\n    } else {\n      final = final.concat(str.split(byWord))\n    }\n  })\n  final = cleanUp(final)\n  return final\n}\nexport default parseBlocks\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,6DAA6D;AAC/E;AACA,MAAMC,aAAa,GAAG,wDAAwD;AAC9E;AACA,MAAMC,MAAM,GAAG,IAAI;AAEnB,MAAMC,OAAO,GAAGC,GAAG,IAAI;EACrB,OAAO,qBAAqB,CAACC,IAAI,CAACD,GAAG,CAAC,IAAI,eAAe,CAACC,IAAI,CAACD,GAAG,CAAC;AACrE,CAAC;AACD,MAAME,KAAK,GAAGF,GAAG,IAAI;EACnB,OAAO,qBAAqB,CAACC,IAAI,CAACD,GAAG,CAAC,IAAI,eAAe,CAACC,IAAI,CAACD,GAAG,CAAC;AACrE,CAAC;AAED,MAAMG,OAAO,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC7BA,GAAG,GAAGA,GAAG,CAACC,GAAG,CAACL,GAAG,IAAIA,GAAG,CAACM,IAAI,CAAC,CAAC,CAAC;EAChCF,GAAG,GAAGA,GAAG,CAACG,MAAM,CAACP,GAAG,IAAIA,GAAG,CAAC;EAC5B,OAAOI,GAAG;AACZ,CAAC;AAED,MAAMI,WAAW,GAAG,SAAAA,CAAUC,GAAG,EAAE;EACjC;EACA,IAAIL,GAAG,GAAGK,GAAG,CAACC,KAAK,CAACd,SAAS,CAAC;EAC9B,IAAIe,GAAG,GAAG,EAAE;EACZ;EACAP,GAAG,CAACQ,OAAO,CAACZ,GAAG,IAAI;IACjB,IAAIE,KAAK,CAACF,GAAG,CAAC,EAAE;MACdW,GAAG,CAACE,IAAI,CAACb,GAAG,CAAC;MACb;IACF;IACAW,GAAG,GAAGA,GAAG,CAACG,MAAM,CAACd,GAAG,CAACU,KAAK,CAACb,aAAa,CAAC,CAAC;EAC5C,CAAC,CAAC;EACFc,GAAG,GAAGR,OAAO,CAACQ,GAAG,CAAC;EAClB;EACA,IAAII,KAAK,GAAG,EAAE;EACdJ,GAAG,CAACC,OAAO,CAACZ,GAAG,IAAI;IACjB,IAAID,OAAO,CAACC,GAAG,CAAC,EAAE;MAChBe,KAAK,CAACF,IAAI,CAACb,GAAG,CAAC;IACjB,CAAC,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC,EAAE;MACrBe,KAAK,CAACF,IAAI,CAACb,GAAG,CAAC;IACjB,CAAC,MAAM;MACLe,KAAK,GAAGA,KAAK,CAACD,MAAM,CAACd,GAAG,CAACU,KAAK,CAACZ,MAAM,CAAC,CAAC;IACzC;EACF,CAAC,CAAC;EACFiB,KAAK,GAAGZ,OAAO,CAACY,KAAK,CAAC;EACtB,OAAOA,KAAK;AACd,CAAC;AACD,eAAeP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}