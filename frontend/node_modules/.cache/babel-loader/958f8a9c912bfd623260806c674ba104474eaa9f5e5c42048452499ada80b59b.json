{"ast":null,"code":"import parseVerb from './parse/index.js';\nimport getGrammar from './parse/grammar/index.js';\nimport { getTense } from './lib.js';\nconst toArray = function (m) {\n  if (!m || !m.isView) {\n    return [];\n  }\n  const opts = {\n    normal: true,\n    terms: false,\n    text: false\n  };\n  return m.json(opts).map(s => s.normal);\n};\nconst toText = function (m) {\n  if (!m || !m.isView) {\n    return '';\n  }\n  return m.text('normal');\n};\nconst toInf = function (root) {\n  const {\n    toInfinitive\n  } = root.methods.two.transform.verb;\n  let str = root.text('normal');\n  return toInfinitive(str, root.model, getTense(root));\n};\nconst toJSON = function (vb) {\n  let parsed = parseVerb(vb);\n  vb = vb.clone().toView();\n  const info = getGrammar(vb, parsed);\n  return {\n    root: parsed.root.text(),\n    preAdverbs: toArray(parsed.adverbs.pre),\n    postAdverbs: toArray(parsed.adverbs.post),\n    auxiliary: toText(parsed.auxiliary),\n    negative: parsed.negative.found,\n    prefix: toText(parsed.prefix),\n    infinitive: toInf(parsed.root),\n    grammar: info\n  };\n};\nexport default toJSON;","map":{"version":3,"names":["parseVerb","getGrammar","getTense","toArray","m","isView","opts","normal","terms","text","json","map","s","toText","toInf","root","toInfinitive","methods","two","transform","verb","str","model","toJSON","vb","parsed","clone","toView","info","preAdverbs","adverbs","pre","postAdverbs","post","auxiliary","negative","found","prefix","infinitive","grammar"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/verbs/api/toJSON.js"],"sourcesContent":["import parseVerb from './parse/index.js'\nimport getGrammar from './parse/grammar/index.js'\nimport { getTense } from './lib.js'\n\nconst toArray = function (m) {\n  if (!m || !m.isView) {\n    return []\n  }\n  const opts = { normal: true, terms: false, text: false }\n  return m.json(opts).map(s => s.normal)\n}\n\nconst toText = function (m) {\n  if (!m || !m.isView) {\n    return ''\n  }\n  return m.text('normal')\n}\n\nconst toInf = function (root) {\n  const { toInfinitive } = root.methods.two.transform.verb\n  let str = root.text('normal')\n  return toInfinitive(str, root.model, getTense(root))\n}\n\nconst toJSON = function (vb) {\n  let parsed = parseVerb(vb)\n  vb = vb.clone().toView()\n  const info = getGrammar(vb, parsed)\n  return {\n    root: parsed.root.text(),\n    preAdverbs: toArray(parsed.adverbs.pre),\n    postAdverbs: toArray(parsed.adverbs.post),\n    auxiliary: toText(parsed.auxiliary),\n    negative: parsed.negative.found,\n    prefix: toText(parsed.prefix),\n    infinitive: toInf(parsed.root),\n    grammar: info,\n  }\n}\nexport default toJSON\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,kBAAkB;AACxC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,UAAU;AAEnC,MAAMC,OAAO,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAC3B,IAAI,CAACA,CAAC,IAAI,CAACA,CAAC,CAACC,MAAM,EAAE;IACnB,OAAO,EAAE;EACX;EACA,MAAMC,IAAI,GAAG;IAAEC,MAAM,EAAE,IAAI;IAAEC,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC;EACxD,OAAOL,CAAC,CAACM,IAAI,CAACJ,IAAI,CAAC,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACL,MAAM,CAAC;AACxC,CAAC;AAED,MAAMM,MAAM,GAAG,SAAAA,CAAUT,CAAC,EAAE;EAC1B,IAAI,CAACA,CAAC,IAAI,CAACA,CAAC,CAACC,MAAM,EAAE;IACnB,OAAO,EAAE;EACX;EACA,OAAOD,CAAC,CAACK,IAAI,CAAC,QAAQ,CAAC;AACzB,CAAC;AAED,MAAMK,KAAK,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC5B,MAAM;IAAEC;EAAa,CAAC,GAAGD,IAAI,CAACE,OAAO,CAACC,GAAG,CAACC,SAAS,CAACC,IAAI;EACxD,IAAIC,GAAG,GAAGN,IAAI,CAACN,IAAI,CAAC,QAAQ,CAAC;EAC7B,OAAOO,YAAY,CAACK,GAAG,EAAEN,IAAI,CAACO,KAAK,EAAEpB,QAAQ,CAACa,IAAI,CAAC,CAAC;AACtD,CAAC;AAED,MAAMQ,MAAM,GAAG,SAAAA,CAAUC,EAAE,EAAE;EAC3B,IAAIC,MAAM,GAAGzB,SAAS,CAACwB,EAAE,CAAC;EAC1BA,EAAE,GAAGA,EAAE,CAACE,KAAK,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EACxB,MAAMC,IAAI,GAAG3B,UAAU,CAACuB,EAAE,EAAEC,MAAM,CAAC;EACnC,OAAO;IACLV,IAAI,EAAEU,MAAM,CAACV,IAAI,CAACN,IAAI,CAAC,CAAC;IACxBoB,UAAU,EAAE1B,OAAO,CAACsB,MAAM,CAACK,OAAO,CAACC,GAAG,CAAC;IACvCC,WAAW,EAAE7B,OAAO,CAACsB,MAAM,CAACK,OAAO,CAACG,IAAI,CAAC;IACzCC,SAAS,EAAErB,MAAM,CAACY,MAAM,CAACS,SAAS,CAAC;IACnCC,QAAQ,EAAEV,MAAM,CAACU,QAAQ,CAACC,KAAK;IAC/BC,MAAM,EAAExB,MAAM,CAACY,MAAM,CAACY,MAAM,CAAC;IAC7BC,UAAU,EAAExB,KAAK,CAACW,MAAM,CAACV,IAAI,CAAC;IAC9BwB,OAAO,EAAEX;EACX,CAAC;AACH,CAAC;AACD,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}