{"ast":null,"code":"import parseBlocks from './01-parseBlocks.js';\nimport parseToken from './02-parseToken.js';\nimport splitHyphens from './03-splitHyphens.js';\nimport inflectRoot from './04-inflect-root.js';\nimport postProcess from './05-postProcess.js';\n\n/** parse a match-syntax string into json */\nconst syntax = function (input, opts, world) {\n  // fail-fast\n  if (input === null || input === undefined || input === '') {\n    return [];\n  }\n  opts = opts || {};\n  if (typeof input === 'number') {\n    input = String(input); //go for it?\n  }\n  let tokens = parseBlocks(input);\n  //turn them into objects\n  tokens = tokens.map(str => parseToken(str, opts));\n  // '~re-do~'\n  tokens = splitHyphens(tokens, world);\n  // '{walk}'\n  tokens = inflectRoot(tokens, world);\n  //clean up anything weird\n  tokens = postProcess(tokens, opts);\n  // console.log(tokens)\n  return tokens;\n};\nexport default syntax;","map":{"version":3,"names":["parseBlocks","parseToken","splitHyphens","inflectRoot","postProcess","syntax","input","opts","world","undefined","String","tokens","map","str"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/match/methods/parseMatch/index.js"],"sourcesContent":["import parseBlocks from './01-parseBlocks.js'\nimport parseToken from './02-parseToken.js'\nimport splitHyphens from './03-splitHyphens.js'\nimport inflectRoot from './04-inflect-root.js'\nimport postProcess from './05-postProcess.js'\n\n/** parse a match-syntax string into json */\nconst syntax = function (input, opts, world) {\n  // fail-fast\n  if (input === null || input === undefined || input === '') {\n    return []\n  }\n  opts = opts || {}\n  if (typeof input === 'number') {\n    input = String(input) //go for it?\n  }\n  let tokens = parseBlocks(input)\n  //turn them into objects\n  tokens = tokens.map(str => parseToken(str, opts))\n  // '~re-do~'\n  tokens = splitHyphens(tokens, world)\n  // '{walk}'\n  tokens = inflectRoot(tokens, world)\n  //clean up anything weird\n  tokens = postProcess(tokens, opts)\n  // console.log(tokens)\n  return tokens\n}\nexport default syntax\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,WAAW,MAAM,qBAAqB;;AAE7C;AACA,MAAMC,MAAM,GAAG,SAAAA,CAAUC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC3C;EACA,IAAIF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKG,SAAS,IAAIH,KAAK,KAAK,EAAE,EAAE;IACzD,OAAO,EAAE;EACX;EACAC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7BA,KAAK,GAAGI,MAAM,CAACJ,KAAK,CAAC,EAAC;EACxB;EACA,IAAIK,MAAM,GAAGX,WAAW,CAACM,KAAK,CAAC;EAC/B;EACAK,MAAM,GAAGA,MAAM,CAACC,GAAG,CAACC,GAAG,IAAIZ,UAAU,CAACY,GAAG,EAAEN,IAAI,CAAC,CAAC;EACjD;EACAI,MAAM,GAAGT,YAAY,CAACS,MAAM,EAAEH,KAAK,CAAC;EACpC;EACAG,MAAM,GAAGR,WAAW,CAACQ,MAAM,EAAEH,KAAK,CAAC;EACnC;EACAG,MAAM,GAAGP,WAAW,CAACO,MAAM,EAAEJ,IAAI,CAAC;EAClC;EACA,OAAOI,MAAM;AACf,CAAC;AACD,eAAeN,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}