{"ast":null,"code":"// const personAdj = '(misty|rusty|dusty|rich|randy|sandy|young|earnest|frank|brown)'\n\nexport default [\n// ebenezer scrooge\n{\n  match: '#FirstName #Noun$',\n  tag: '. #LastName',\n  notIf: '(#Possessive|#Organization|#Place|#Pronoun|@hasTitleCase)',\n  reason: 'firstname-noun'\n},\n// ===person-date===\n{\n  match: '%Person|Date% #Acronym? #ProperNoun',\n  tag: 'Person',\n  reason: 'jan-thierson'\n},\n// ===person-noun===\n//Cliff Clavin\n{\n  match: '%Person|Noun% #Acronym? #ProperNoun',\n  tag: 'Person',\n  reason: 'switch-person',\n  safe: true\n},\n// olive garden\n{\n  match: '%Person|Noun% #Organization',\n  tag: 'Organization',\n  reason: 'olive-garden'\n},\n// ===person-verb===\n// ollie faroo\n{\n  match: '%Person|Verb% #Acronym? #ProperNoun',\n  tag: 'Person',\n  reason: 'verb-propernoun',\n  ifNo: '#Actor'\n},\n// chuck will ...\n{\n  match: `[%Person|Verb%] (will|had|has|said|says|told|did|learned|wants|wanted)`,\n  group: 0,\n  tag: 'Person',\n  reason: 'person-said'\n},\n// ===person-place===\n//sydney harbour\n{\n  match: `[%Person|Place%] (harbor|harbour|pier|town|city|place|dump|landfill)`,\n  group: 0,\n  tag: 'Place',\n  reason: 'sydney-harbour'\n},\n// east sydney\n{\n  match: `(west|east|north|south) [%Person|Place%]`,\n  group: 0,\n  tag: 'Place',\n  reason: 'east-sydney'\n},\n// ===person-adjective===\n// rusty smith\n// { match: `${personAdj} #Person`, tag: 'Person', reason: 'randy-smith' },\n// rusty a. smith\n// { match: `${personAdj} #Acronym? #ProperNoun`, tag: 'Person', reason: 'rusty-smith' },\n// very rusty\n// { match: `#Adverb [${personAdj}]`, group: 0, tag: 'Adjective', reason: 'really-rich' },\n\n// ===person-verb===\n// would wade\n{\n  match: `#Modal [%Person|Verb%]`,\n  group: 0,\n  tag: 'Verb',\n  reason: 'would-mark'\n},\n// really wade\n{\n  match: `#Adverb [%Person|Verb%]`,\n  group: 0,\n  tag: 'Verb',\n  reason: 'really-mark'\n},\n// drew closer\n{\n  match: `[%Person|Verb%] (#Adverb|#Comparative)`,\n  group: 0,\n  tag: 'Verb',\n  reason: 'drew-closer'\n},\n// wade smith\n{\n  match: `%Person|Verb% #Person`,\n  tag: 'Person',\n  reason: 'rob-smith'\n},\n// wade m. Cooper\n{\n  match: `%Person|Verb% #Acronym #ProperNoun`,\n  tag: 'Person',\n  reason: 'rob-a-smith'\n},\n// will go\n{\n  match: '[will] #Verb',\n  group: 0,\n  tag: 'Modal',\n  reason: 'will-verb'\n},\n// will Pharell\n{\n  match: '(will && @isTitleCase) #ProperNoun',\n  tag: 'Person',\n  reason: 'will-name'\n},\n// jack layton won\n{\n  match: '(#FirstName && !#Possessive) [#Singular] #Verb',\n  group: 0,\n  safe: true,\n  tag: 'LastName',\n  reason: 'jack-layton'\n},\n// sherwood anderson told\n{\n  match: '^[#Singular] #Person #Verb',\n  group: 0,\n  safe: true,\n  tag: 'Person',\n  reason: 'sherwood-anderson'\n},\n// bought a warhol\n{\n  match: '(a|an) [#Person]$',\n  group: 0,\n  unTag: 'Person',\n  reason: 'a-warhol'\n}];","map":{"version":3,"names":["match","tag","notIf","reason","safe","ifNo","group","unTag"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/postTagger/model/person/ambig-name.js"],"sourcesContent":["// const personAdj = '(misty|rusty|dusty|rich|randy|sandy|young|earnest|frank|brown)'\n\nexport default [\n  // ebenezer scrooge\n  {\n    match: '#FirstName #Noun$',\n    tag: '. #LastName',\n    notIf: '(#Possessive|#Organization|#Place|#Pronoun|@hasTitleCase)',\n    reason: 'firstname-noun',\n  },\n\n  // ===person-date===\n  { match: '%Person|Date% #Acronym? #ProperNoun', tag: 'Person', reason: 'jan-thierson' },\n  // ===person-noun===\n  //Cliff Clavin\n  { match: '%Person|Noun% #Acronym? #ProperNoun', tag: 'Person', reason: 'switch-person', safe: true },\n  // olive garden\n  { match: '%Person|Noun% #Organization', tag: 'Organization', reason: 'olive-garden' },\n  // ===person-verb===\n  // ollie faroo\n  { match: '%Person|Verb% #Acronym? #ProperNoun', tag: 'Person', reason: 'verb-propernoun', ifNo: '#Actor' },\n  // chuck will ...\n  {\n    match: `[%Person|Verb%] (will|had|has|said|says|told|did|learned|wants|wanted)`,\n    group: 0,\n    tag: 'Person',\n    reason: 'person-said',\n  },\n\n  // ===person-place===\n  //sydney harbour\n  {\n    match: `[%Person|Place%] (harbor|harbour|pier|town|city|place|dump|landfill)`,\n    group: 0,\n    tag: 'Place',\n    reason: 'sydney-harbour',\n  },\n  // east sydney\n  { match: `(west|east|north|south) [%Person|Place%]`, group: 0, tag: 'Place', reason: 'east-sydney' },\n\n  // ===person-adjective===\n  // rusty smith\n  // { match: `${personAdj} #Person`, tag: 'Person', reason: 'randy-smith' },\n  // rusty a. smith\n  // { match: `${personAdj} #Acronym? #ProperNoun`, tag: 'Person', reason: 'rusty-smith' },\n  // very rusty\n  // { match: `#Adverb [${personAdj}]`, group: 0, tag: 'Adjective', reason: 'really-rich' },\n\n  // ===person-verb===\n  // would wade\n  { match: `#Modal [%Person|Verb%]`, group: 0, tag: 'Verb', reason: 'would-mark' },\n  // really wade\n  { match: `#Adverb [%Person|Verb%]`, group: 0, tag: 'Verb', reason: 'really-mark' },\n  // drew closer\n  { match: `[%Person|Verb%] (#Adverb|#Comparative)`, group: 0, tag: 'Verb', reason: 'drew-closer' },\n  // wade smith\n  { match: `%Person|Verb% #Person`, tag: 'Person', reason: 'rob-smith' },\n  // wade m. Cooper\n  { match: `%Person|Verb% #Acronym #ProperNoun`, tag: 'Person', reason: 'rob-a-smith' },\n  // will go\n  { match: '[will] #Verb', group: 0, tag: 'Modal', reason: 'will-verb' },\n  // will Pharell\n  { match: '(will && @isTitleCase) #ProperNoun', tag: 'Person', reason: 'will-name' },\n  // jack layton won\n  {\n    match: '(#FirstName && !#Possessive) [#Singular] #Verb',\n    group: 0,\n    safe: true,\n    tag: 'LastName',\n    reason: 'jack-layton',\n  },\n  // sherwood anderson told\n  { match: '^[#Singular] #Person #Verb', group: 0, safe: true, tag: 'Person', reason: 'sherwood-anderson' },\n  // bought a warhol\n  { match: '(a|an) [#Person]$', group: 0, unTag: 'Person', reason: 'a-warhol' },\n]\n"],"mappings":"AAAA;;AAEA,eAAe;AACb;AACA;EACEA,KAAK,EAAE,mBAAmB;EAC1BC,GAAG,EAAE,aAAa;EAClBC,KAAK,EAAE,2DAA2D;EAClEC,MAAM,EAAE;AACV,CAAC;AAED;AACA;EAAEH,KAAK,EAAE,qCAAqC;EAAEC,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE;AAAe,CAAC;AACvF;AACA;AACA;EAAEH,KAAK,EAAE,qCAAqC;EAAEC,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAK,CAAC;AACpG;AACA;EAAEJ,KAAK,EAAE,6BAA6B;EAAEC,GAAG,EAAE,cAAc;EAAEE,MAAM,EAAE;AAAe,CAAC;AACrF;AACA;AACA;EAAEH,KAAK,EAAE,qCAAqC;EAAEC,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE,iBAAiB;EAAEE,IAAI,EAAE;AAAS,CAAC;AAC1G;AACA;EACEL,KAAK,EAAE,wEAAwE;EAC/EM,KAAK,EAAE,CAAC;EACRL,GAAG,EAAE,QAAQ;EACbE,MAAM,EAAE;AACV,CAAC;AAED;AACA;AACA;EACEH,KAAK,EAAE,sEAAsE;EAC7EM,KAAK,EAAE,CAAC;EACRL,GAAG,EAAE,OAAO;EACZE,MAAM,EAAE;AACV,CAAC;AACD;AACA;EAAEH,KAAK,EAAE,0CAA0C;EAAEM,KAAK,EAAE,CAAC;EAAEL,GAAG,EAAE,OAAO;EAAEE,MAAM,EAAE;AAAc,CAAC;AAEpG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;EAAEH,KAAK,EAAE,wBAAwB;EAAEM,KAAK,EAAE,CAAC;EAAEL,GAAG,EAAE,MAAM;EAAEE,MAAM,EAAE;AAAa,CAAC;AAChF;AACA;EAAEH,KAAK,EAAE,yBAAyB;EAAEM,KAAK,EAAE,CAAC;EAAEL,GAAG,EAAE,MAAM;EAAEE,MAAM,EAAE;AAAc,CAAC;AAClF;AACA;EAAEH,KAAK,EAAE,wCAAwC;EAAEM,KAAK,EAAE,CAAC;EAAEL,GAAG,EAAE,MAAM;EAAEE,MAAM,EAAE;AAAc,CAAC;AACjG;AACA;EAAEH,KAAK,EAAE,uBAAuB;EAAEC,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE;AAAY,CAAC;AACtE;AACA;EAAEH,KAAK,EAAE,oCAAoC;EAAEC,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE;AAAc,CAAC;AACrF;AACA;EAAEH,KAAK,EAAE,cAAc;EAAEM,KAAK,EAAE,CAAC;EAAEL,GAAG,EAAE,OAAO;EAAEE,MAAM,EAAE;AAAY,CAAC;AACtE;AACA;EAAEH,KAAK,EAAE,oCAAoC;EAAEC,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE;AAAY,CAAC;AACnF;AACA;EACEH,KAAK,EAAE,gDAAgD;EACvDM,KAAK,EAAE,CAAC;EACRF,IAAI,EAAE,IAAI;EACVH,GAAG,EAAE,UAAU;EACfE,MAAM,EAAE;AACV,CAAC;AACD;AACA;EAAEH,KAAK,EAAE,4BAA4B;EAAEM,KAAK,EAAE,CAAC;EAAEF,IAAI,EAAE,IAAI;EAAEH,GAAG,EAAE,QAAQ;EAAEE,MAAM,EAAE;AAAoB,CAAC;AACzG;AACA;EAAEH,KAAK,EAAE,mBAAmB;EAAEM,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE,QAAQ;EAAEJ,MAAM,EAAE;AAAW,CAAC,CAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}