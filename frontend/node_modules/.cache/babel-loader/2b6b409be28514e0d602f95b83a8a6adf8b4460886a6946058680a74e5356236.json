{"ast":null,"code":"// scan-ahead to match multiple-word terms - 'jack rabbit'\nconst multiWord = function (terms, start_i, world) {\n  const {\n    model,\n    methods\n  } = world;\n  const setTag = methods.one.setTag;\n  const multi = model.one._multiCache || {};\n  const {\n    lexicon\n  } = model.one || {};\n  let t = terms[start_i];\n  let word = t.machine || t.normal;\n\n  // found a word to scan-ahead on\n  if (multi[word] !== undefined && terms[start_i + 1]) {\n    let end = start_i + multi[word] - 1;\n    for (let i = end; i > start_i; i -= 1) {\n      let words = terms.slice(start_i, i + 1);\n      if (words.length <= 1) {\n        return false;\n      }\n      let str = words.map(term => term.machine || term.normal).join(' ');\n      // lookup regular lexicon\n      if (lexicon.hasOwnProperty(str) === true) {\n        let tag = lexicon[str];\n        setTag(words, tag, world, false, '1-multi-lexicon');\n        // special case for phrasal-verbs - 2nd word is a #Particle\n        if (tag && tag.length === 2 && (tag[0] === 'PhrasalVerb' || tag[1] === 'PhrasalVerb')) {\n          setTag([words[1]], 'Particle', world, false, '1-phrasal-particle');\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n  return null;\n};\nexport default multiWord;","map":{"version":3,"names":["multiWord","terms","start_i","world","model","methods","setTag","one","multi","_multiCache","lexicon","t","word","machine","normal","undefined","end","i","words","slice","length","str","map","term","join","hasOwnProperty","tag"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/lexicon/compute/multi-word.js"],"sourcesContent":["// scan-ahead to match multiple-word terms - 'jack rabbit'\nconst multiWord = function (terms, start_i, world) {\n  const { model, methods } = world\n  const setTag = methods.one.setTag\n  const multi = model.one._multiCache || {}\n  const { lexicon } = model.one || {}\n  let t = terms[start_i]\n  let word = t.machine || t.normal\n\n  // found a word to scan-ahead on\n  if (multi[word] !== undefined && terms[start_i + 1]) {\n    let end = start_i + multi[word] - 1\n    for (let i = end; i > start_i; i -= 1) {\n      let words = terms.slice(start_i, i + 1)\n      if (words.length <= 1) {\n        return false\n      }\n      let str = words.map(term => term.machine || term.normal).join(' ')\n      // lookup regular lexicon\n      if (lexicon.hasOwnProperty(str) === true) {\n        let tag = lexicon[str]\n        setTag(words, tag, world, false, '1-multi-lexicon')\n        // special case for phrasal-verbs - 2nd word is a #Particle\n        if (tag && tag.length === 2 && (tag[0] === 'PhrasalVerb' || tag[1] === 'PhrasalVerb')) {\n          setTag([words[1]], 'Particle', world, false, '1-phrasal-particle')\n        }\n        return true\n      }\n    }\n    return false\n  }\n  return null\n}\nexport default multiWord\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,SAAAA,CAAUC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAE;EACjD,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGF,KAAK;EAChC,MAAMG,MAAM,GAAGD,OAAO,CAACE,GAAG,CAACD,MAAM;EACjC,MAAME,KAAK,GAAGJ,KAAK,CAACG,GAAG,CAACE,WAAW,IAAI,CAAC,CAAC;EACzC,MAAM;IAAEC;EAAQ,CAAC,GAAGN,KAAK,CAACG,GAAG,IAAI,CAAC,CAAC;EACnC,IAAII,CAAC,GAAGV,KAAK,CAACC,OAAO,CAAC;EACtB,IAAIU,IAAI,GAAGD,CAAC,CAACE,OAAO,IAAIF,CAAC,CAACG,MAAM;;EAEhC;EACA,IAAIN,KAAK,CAACI,IAAI,CAAC,KAAKG,SAAS,IAAId,KAAK,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACnD,IAAIc,GAAG,GAAGd,OAAO,GAAGM,KAAK,CAACI,IAAI,CAAC,GAAG,CAAC;IACnC,KAAK,IAAIK,CAAC,GAAGD,GAAG,EAAEC,CAAC,GAAGf,OAAO,EAAEe,CAAC,IAAI,CAAC,EAAE;MACrC,IAAIC,KAAK,GAAGjB,KAAK,CAACkB,KAAK,CAACjB,OAAO,EAAEe,CAAC,GAAG,CAAC,CAAC;MACvC,IAAIC,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;QACrB,OAAO,KAAK;MACd;MACA,IAAIC,GAAG,GAAGH,KAAK,CAACI,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACV,OAAO,IAAIU,IAAI,CAACT,MAAM,CAAC,CAACU,IAAI,CAAC,GAAG,CAAC;MAClE;MACA,IAAId,OAAO,CAACe,cAAc,CAACJ,GAAG,CAAC,KAAK,IAAI,EAAE;QACxC,IAAIK,GAAG,GAAGhB,OAAO,CAACW,GAAG,CAAC;QACtBf,MAAM,CAACY,KAAK,EAAEQ,GAAG,EAAEvB,KAAK,EAAE,KAAK,EAAE,iBAAiB,CAAC;QACnD;QACA,IAAIuB,GAAG,IAAIA,GAAG,CAACN,MAAM,KAAK,CAAC,KAAKM,GAAG,CAAC,CAAC,CAAC,KAAK,aAAa,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,aAAa,CAAC,EAAE;UACrFpB,MAAM,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAEf,KAAK,EAAE,KAAK,EAAE,oBAAoB,CAAC;QACpE;QACA,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb,CAAC;AACD,eAAeH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}