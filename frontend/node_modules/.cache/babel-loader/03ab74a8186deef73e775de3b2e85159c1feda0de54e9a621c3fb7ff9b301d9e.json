{"ast":null,"code":"const ones = 'one|two|three|four|five|six|seven|eight|nine';\nconst tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty';\nconst teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen';\n\n// this is a bit of a mess\n// segment consecutive number-words into sensible chunks\nconst findNumbers = function (doc) {\n  let m = doc.match('#Value+');\n\n  //\"50 83\"\n  if (m.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (m.has('#Value @hasComma #Value')) {\n      m.splitAfter('@hasComma');\n    } else if (m.has('#NumericValue #Fraction')) {\n      m.splitAfter('#NumericValue #Fraction');\n    } else {\n      m = m.splitAfter('#NumericValue');\n    }\n  }\n\n  //three-length\n  if (m.has('#Value #Value #Value') && !m.has('#Multiple')) {\n    //twenty-five-twenty\n    if (m.has('(' + tens + ') #Cardinal #Cardinal')) {\n      m = m.splitAfter('(' + tens + ') #Cardinal');\n    }\n  }\n\n  //two-length ones\n  if (m.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (m.has('#NumericValue #NumericValue')) {\n      m = m.splitOn('#Year');\n    }\n    //sixty fifteen\n    if (m.has('(' + tens + ') (' + teens + ')')) {\n      m = m.splitAfter('(' + tens + ')');\n    }\n\n    //\"72 82\"\n    let double = m.match('#Cardinal #Cardinal');\n    if (double.found && !m.has('(point|decimal|#Fraction)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        // two fifty five\n        let noMultiple = m.has(`(${ones}) (${tens})`);\n        // twenty one\n        let tensVal = double.has('(' + tens + ') #Cardinal');\n        // hundredOne\n        let multVal = double.has('#Multiple #Value');\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!noMultiple && !tensVal && !multVal) {\n          // double = double.firstTerm()\n          double.terms().forEach(d => {\n            m = m.splitOn(d);\n          });\n        }\n      }\n    }\n\n    //seventh fifth\n    if (m.match('#Ordinal #Ordinal').match('#TextValue').found && !m.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!m.has('(' + tens + ') #Ordinal')) {\n        m = m.splitAfter('#Ordinal');\n      }\n    }\n    //fifth five\n    m = m.splitBefore('#Ordinal [#Cardinal]', 0);\n    //five 2017 (support '5 hundred', and 'twenty 5'\n    if (m.has('#TextValue #NumericValue') && !m.has('(' + tens + '|#Multiple)')) {\n      m = m.splitBefore('#TextValue #NumericValue');\n    }\n  }\n\n  //5-8\n  m = m.splitAfter('#NumberRange');\n  // june 5th 1999\n  m = m.splitBefore('#Year');\n  return m;\n};\nexport default findNumbers;","map":{"version":3,"names":["ones","tens","teens","findNumbers","doc","m","match","has","splitAfter","splitOn","double","found","noMultiple","tensVal","multVal","terms","forEach","d","splitBefore"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/numbers/numbers/find.js"],"sourcesContent":["const ones = 'one|two|three|four|five|six|seven|eight|nine'\nconst tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty'\nconst teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen'\n\n// this is a bit of a mess\n// segment consecutive number-words into sensible chunks\nconst findNumbers = function (doc) {\n  let m = doc.match('#Value+')\n\n  //\"50 83\"\n  if (m.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (m.has('#Value @hasComma #Value')) {\n      m.splitAfter('@hasComma')\n    } else if (m.has('#NumericValue #Fraction')) {\n      m.splitAfter('#NumericValue #Fraction')\n    } else {\n      m = m.splitAfter('#NumericValue')\n    }\n  }\n\n  //three-length\n  if (m.has('#Value #Value #Value') && !m.has('#Multiple')) {\n    //twenty-five-twenty\n    if (m.has('(' + tens + ') #Cardinal #Cardinal')) {\n      m = m.splitAfter('(' + tens + ') #Cardinal')\n    }\n  }\n\n  //two-length ones\n  if (m.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (m.has('#NumericValue #NumericValue')) {\n      m = m.splitOn('#Year')\n    }\n    //sixty fifteen\n    if (m.has('(' + tens + ') (' + teens + ')')) {\n      m = m.splitAfter('(' + tens + ')')\n    }\n\n    //\"72 82\"\n    let double = m.match('#Cardinal #Cardinal')\n    if (double.found && !m.has('(point|decimal|#Fraction)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        // two fifty five\n        let noMultiple = m.has(`(${ones}) (${tens})`)\n        // twenty one\n        let tensVal = double.has('(' + tens + ') #Cardinal')\n        // hundredOne\n        let multVal = double.has('#Multiple #Value')\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!noMultiple && !tensVal && !multVal) {\n          // double = double.firstTerm()\n          double.terms().forEach(d => {\n            m = m.splitOn(d)\n          })\n        }\n      }\n    }\n\n    //seventh fifth\n    if (m.match('#Ordinal #Ordinal').match('#TextValue').found && !m.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!m.has('(' + tens + ') #Ordinal')) {\n        m = m.splitAfter('#Ordinal')\n      }\n    }\n    //fifth five\n    m = m.splitBefore('#Ordinal [#Cardinal]', 0)\n    //five 2017 (support '5 hundred', and 'twenty 5'\n    if (m.has('#TextValue #NumericValue') && !m.has('(' + tens + '|#Multiple)')) {\n      m = m.splitBefore('#TextValue #NumericValue')\n    }\n  }\n\n  //5-8\n  m = m.splitAfter('#NumberRange')\n  // june 5th 1999\n  m = m.splitBefore('#Year')\n  return m\n}\n\nexport default findNumbers\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}