{"ast":null,"code":"import parseText from './toNumber/index.js';\nimport parseFraction from '../../fractions/parse.js';\nconst parseNumeric = function (str, m) {\n  str = str.replace(/,/g, '');\n  //parse a numeric-number\n  let arr = str.split(/([0-9.,]*)/);\n  let [prefix, num] = arr;\n  let suffix = arr.slice(2).join('');\n  if (num !== '' && m.length < 2) {\n    num = Number(num || str);\n    //ensure that num is an actual number\n    if (typeof num !== 'number') {\n      num = null;\n    }\n    // strip an ordinal off the suffix\n    suffix = suffix || '';\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = '';\n    }\n    // support M for million, k for thousand\n    // if (suffix === 'm' || suffix === 'M') {\n    //   num *= 1000000\n    //   suffix = ''\n    // }\n    // if (suffix === 'k' || suffix === 'k') {\n    //   num *= 1000\n    //   suffix = ''\n    // }\n    return {\n      prefix: prefix || '',\n      num: num,\n      suffix: suffix\n    };\n  }\n  return null;\n};\n\n// get a numeric value from this phrase\nconst parseNumber = function (m) {\n  if (typeof m === 'string') {\n    return {\n      num: parseText(m)\n    };\n  }\n  let str = m.text('reduced');\n  // reach for '12 litres'\n  let unit = m.growRight('#Unit').match('#Unit$').text('machine');\n  // is it in '3,123' format?\n  let hasComma = /[0-9],[0-9]/.test(m.text('text'));\n  // parse a numeric-number like '$4.00'\n  if (m.terms().length === 1 && !m.has('#Multiple')) {\n    let res = parseNumeric(str, m);\n    if (res !== null) {\n      res.hasComma = hasComma;\n      res.unit = unit;\n      return res;\n    }\n  }\n  // -- parse text-formats --\n  // Fractions: remove 'and a half' etc. from the end\n  let frPart = m.match('#Fraction{2,}$');\n  frPart = frPart.found === false ? m.match('^#Fraction$') : frPart;\n  let fraction = null;\n  if (frPart.found) {\n    if (frPart.has('#Value and #Value #Fraction')) {\n      frPart = frPart.match('and #Value #Fraction');\n    }\n    fraction = parseFraction(frPart);\n    // remove it from our string\n    m = m.not(frPart);\n    m = m.not('and$');\n    str = m.text('reduced');\n  }\n  let num = 0;\n  if (str) {\n    num = parseText(str) || 0;\n  }\n  // apply numeric fraction\n  if (fraction && fraction.decimal) {\n    num += fraction.decimal;\n  }\n  return {\n    hasComma,\n    prefix: '',\n    num,\n    suffix: '',\n    isOrdinal: m.has('#Ordinal'),\n    isText: m.has('#TextValue'),\n    isFraction: m.has('#Fraction'),\n    isMoney: m.has('#Money'),\n    unit\n  };\n};\nexport default parseNumber;","map":{"version":3,"names":["parseText","parseFraction","parseNumeric","str","m","replace","arr","split","prefix","num","suffix","slice","join","length","Number","parseNumber","text","unit","growRight","match","hasComma","test","terms","has","res","frPart","found","fraction","not","decimal","isOrdinal","isText","isFraction","isMoney"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/numbers/numbers/parse/index.js"],"sourcesContent":["import parseText from './toNumber/index.js'\nimport parseFraction from '../../fractions/parse.js'\n\nconst parseNumeric = function (str, m) {\n  str = str.replace(/,/g, '')\n  //parse a numeric-number\n  let arr = str.split(/([0-9.,]*)/)\n  let [prefix, num] = arr\n  let suffix = arr.slice(2).join('')\n  if (num !== '' && m.length < 2) {\n    num = Number(num || str)\n    //ensure that num is an actual number\n    if (typeof num !== 'number') {\n      num = null\n    }\n    // strip an ordinal off the suffix\n    suffix = suffix || ''\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = ''\n    }\n    // support M for million, k for thousand\n    // if (suffix === 'm' || suffix === 'M') {\n    //   num *= 1000000\n    //   suffix = ''\n    // }\n    // if (suffix === 'k' || suffix === 'k') {\n    //   num *= 1000\n    //   suffix = ''\n    // }\n    return {\n      prefix: prefix || '',\n      num: num,\n      suffix: suffix,\n    }\n  }\n  return null\n}\n\n// get a numeric value from this phrase\nconst parseNumber = function (m) {\n  if (typeof m === 'string') {\n    return { num: parseText(m) }\n  }\n  let str = m.text('reduced')\n  // reach for '12 litres'\n  let unit = m.growRight('#Unit').match('#Unit$').text('machine')\n  // is it in '3,123' format?\n  let hasComma = /[0-9],[0-9]/.test(m.text('text'))\n  // parse a numeric-number like '$4.00'\n  if (m.terms().length === 1 && !m.has('#Multiple')) {\n    let res = parseNumeric(str, m)\n    if (res !== null) {\n      res.hasComma = hasComma\n      res.unit = unit\n      return res\n    }\n  }\n  // -- parse text-formats --\n  // Fractions: remove 'and a half' etc. from the end\n  let frPart = m.match('#Fraction{2,}$')\n  frPart = frPart.found === false ? m.match('^#Fraction$') : frPart\n  let fraction = null\n  if (frPart.found) {\n    if (frPart.has('#Value and #Value #Fraction')) {\n      frPart = frPart.match('and #Value #Fraction')\n    }\n    fraction = parseFraction(frPart)\n    // remove it from our string\n    m = m.not(frPart)\n    m = m.not('and$')\n    str = m.text('reduced')\n  }\n  let num = 0\n  if (str) {\n    num = parseText(str) || 0\n  }\n  // apply numeric fraction\n  if (fraction && fraction.decimal) {\n    num += fraction.decimal\n  }\n\n\n  return {\n    hasComma,\n    prefix: '',\n    num,\n    suffix: '',\n    isOrdinal: m.has('#Ordinal'),\n    isText: m.has('#TextValue'),\n    isFraction: m.has('#Fraction'),\n    isMoney: m.has('#Money'),\n    unit\n  }\n}\nexport default parseNumber\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}