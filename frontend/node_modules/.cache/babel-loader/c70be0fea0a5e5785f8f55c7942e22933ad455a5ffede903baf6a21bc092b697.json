{"ast":null,"code":"import fastTag from '../_fastTag.js';\nconst oneLetterAcronym = /^[A-Z]('s|,)?$/;\nconst isUpperCase = /^[A-Z-]+$/;\nconst upperThenS = /^[A-Z]+s$/;\nconst periodAcronym = /([A-Z]\\.)+[A-Z]?,?$/;\nconst noPeriodAcronym = /[A-Z]{2,}('s|,)?$/;\nconst lowerCaseAcronym = /([a-z]\\.)+[a-z]\\.?$/;\nconst oneLetterWord = {\n  I: true,\n  A: true\n};\n\n// only assume these are places if they are uppercased\nconst places = {\n  la: true,\n  ny: true,\n  us: true,\n  dc: true,\n  gb: true\n};\n\n// just uppercase acronyms, no periods - 'UNOCHA'\nconst isNoPeriodAcronym = function (term, model) {\n  let str = term.text;\n  // ensure it's all upper-case\n  if (isUpperCase.test(str) === false) {\n    // allow lower-case plural - 'MMVAs'\n    if (str.length > 3 && upperThenS.test(str) === true) {\n      str = str.replace(/s$/, '');\n    } else {\n      return false;\n    }\n  }\n  // long capitalized words are not usually either\n  if (str.length > 5) {\n    return false;\n  }\n  // 'I' is not a acronym\n  if (oneLetterWord.hasOwnProperty(str)) {\n    return false;\n  }\n  // known-words, like 'PIZZA' is not an acronym.\n  if (model.one.lexicon.hasOwnProperty(term.normal)) {\n    return false;\n  }\n  //like N.D.A\n  if (periodAcronym.test(str) === true) {\n    return true;\n  }\n  //like c.e.o\n  if (lowerCaseAcronym.test(str) === true) {\n    return true;\n  }\n  //like 'F.'\n  if (oneLetterAcronym.test(str) === true) {\n    return true;\n  }\n  //like NDA\n  if (noPeriodAcronym.test(str) === true) {\n    return true;\n  }\n  return false;\n};\nconst isAcronym = function (terms, i, model) {\n  let term = terms[i];\n  //these are not acronyms\n  if (term.tags.has('RomanNumeral') || term.tags.has('Acronym') || term.frozen) {\n    return null;\n  }\n  //non-period ones are harder\n  if (isNoPeriodAcronym(term, model)) {\n    term.tags.clear();\n    fastTag(term, ['Acronym', 'Noun'], '3-no-period-acronym');\n    // ny, la\n    if (places[term.normal] === true) {\n      fastTag(term, 'Place', '3-place-acronym');\n    }\n    // UFOs\n    if (upperThenS.test(term.text) === true) {\n      fastTag(term, 'Plural', '3-plural-acronym');\n    }\n    // if(term.normal\n    return true;\n  }\n  // one-letter acronyms\n  if (!oneLetterWord.hasOwnProperty(term.text) && oneLetterAcronym.test(term.text)) {\n    term.tags.clear();\n    fastTag(term, ['Acronym', 'Noun'], '3-one-letter-acronym');\n    return true;\n  }\n  //if it's a very-short organization?\n  if (term.tags.has('Organization') && term.text.length <= 3) {\n    fastTag(term, 'Acronym', '3-org-acronym');\n    return true;\n  }\n  // upper-case org, like UNESCO\n  if (term.tags.has('Organization') && isUpperCase.test(term.text) && term.text.length <= 6) {\n    fastTag(term, 'Acronym', '3-titlecase-acronym');\n    return true;\n  }\n  return null;\n};\nexport default isAcronym;","map":{"version":3,"names":["fastTag","oneLetterAcronym","isUpperCase","upperThenS","periodAcronym","noPeriodAcronym","lowerCaseAcronym","oneLetterWord","I","A","places","la","ny","us","dc","gb","isNoPeriodAcronym","term","model","str","text","test","length","replace","hasOwnProperty","one","lexicon","normal","isAcronym","terms","i","tags","has","frozen","clear"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/01-acronym.js"],"sourcesContent":["import fastTag from '../_fastTag.js'\n\nconst oneLetterAcronym = /^[A-Z]('s|,)?$/\nconst isUpperCase = /^[A-Z-]+$/\nconst upperThenS = /^[A-Z]+s$/\nconst periodAcronym = /([A-Z]\\.)+[A-Z]?,?$/\nconst noPeriodAcronym = /[A-Z]{2,}('s|,)?$/\nconst lowerCaseAcronym = /([a-z]\\.)+[a-z]\\.?$/\n\nconst oneLetterWord = {\n  I: true,\n  A: true,\n}\n\n// only assume these are places if they are uppercased\nconst places = {\n  la: true,\n  ny: true,\n  us: true,\n  dc: true,\n  gb: true,\n}\n\n// just uppercase acronyms, no periods - 'UNOCHA'\nconst isNoPeriodAcronym = function (term, model) {\n  let str = term.text\n  // ensure it's all upper-case\n  if (isUpperCase.test(str) === false) {\n    // allow lower-case plural - 'MMVAs'\n    if (str.length > 3 && upperThenS.test(str) === true) {\n      str = str.replace(/s$/, '')\n    } else {\n      return false\n    }\n  }\n  // long capitalized words are not usually either\n  if (str.length > 5) {\n    return false\n  }\n  // 'I' is not a acronym\n  if (oneLetterWord.hasOwnProperty(str)) {\n    return false\n  }\n  // known-words, like 'PIZZA' is not an acronym.\n  if (model.one.lexicon.hasOwnProperty(term.normal)) {\n    return false\n  }\n  //like N.D.A\n  if (periodAcronym.test(str) === true) {\n    return true\n  }\n  //like c.e.o\n  if (lowerCaseAcronym.test(str) === true) {\n    return true\n  }\n  //like 'F.'\n  if (oneLetterAcronym.test(str) === true) {\n    return true\n  }\n  //like NDA\n  if (noPeriodAcronym.test(str) === true) {\n    return true\n  }\n  return false\n}\n\nconst isAcronym = function (terms, i, model) {\n  let term = terms[i]\n  //these are not acronyms\n  if (term.tags.has('RomanNumeral') || term.tags.has('Acronym') || term.frozen) {\n    return null\n  }\n  //non-period ones are harder\n  if (isNoPeriodAcronym(term, model)) {\n    term.tags.clear()\n    fastTag(term, ['Acronym', 'Noun'], '3-no-period-acronym')\n    // ny, la\n    if (places[term.normal] === true) {\n      fastTag(term, 'Place', '3-place-acronym')\n    }\n    // UFOs\n    if (upperThenS.test(term.text) === true) {\n      fastTag(term, 'Plural', '3-plural-acronym')\n    }\n    // if(term.normal\n    return true\n  }\n  // one-letter acronyms\n  if (!oneLetterWord.hasOwnProperty(term.text) && oneLetterAcronym.test(term.text)) {\n    term.tags.clear()\n    fastTag(term, ['Acronym', 'Noun'], '3-one-letter-acronym')\n    return true\n  }\n  //if it's a very-short organization?\n  if (term.tags.has('Organization') && term.text.length <= 3) {\n    fastTag(term, 'Acronym', '3-org-acronym')\n    return true\n  }\n  // upper-case org, like UNESCO\n  if (term.tags.has('Organization') && isUpperCase.test(term.text) && term.text.length <= 6) {\n    fastTag(term, 'Acronym', '3-titlecase-acronym')\n    return true\n  }\n  return null\n}\nexport default isAcronym\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}