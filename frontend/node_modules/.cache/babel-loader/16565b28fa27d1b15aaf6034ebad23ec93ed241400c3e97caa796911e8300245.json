{"ast":null,"code":"// make sure inputs are not impossible to square-up\nconst validate = function (pairs, opts = {}) {\n  let left = new Set();\n  let right = new Set();\n  pairs = pairs.filter(a => {\n    if (left.has(a[0])) {\n      // console.log('dupe', a)\n      return false;\n    }\n    if (right.has(a[1])) {\n      // console.log('dupe', a)\n      return false;\n    }\n    left.add(a[0]);\n    right.add(a[1]);\n\n    // ensure pairs are aligned by prefix\n    // if (a[0].substring(0, 1) !== a[1].substring(0, 1)) {\n    //   console.log('pair not aligned at prefix:', a)\n    //   return false\n    // }\n    return true;\n  });\n  return pairs;\n};\nexport default validate;","map":{"version":3,"names":["validate","pairs","opts","left","Set","right","filter","a","has","add"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/suffix-thumb/src/validate/index.js"],"sourcesContent":["// make sure inputs are not impossible to square-up\nconst validate = function (pairs, opts = {}) {\n  let left = new Set()\n  let right = new Set()\n  pairs = pairs.filter(a => {\n    if (left.has(a[0])) {\n      // console.log('dupe', a)\n      return false\n    }\n    if (right.has(a[1])) {\n      // console.log('dupe', a)\n      return false\n    }\n    left.add(a[0])\n    right.add(a[1])\n\n    // ensure pairs are aligned by prefix\n    // if (a[0].substring(0, 1) !== a[1].substring(0, 1)) {\n    //   console.log('pair not aligned at prefix:', a)\n    //   return false\n    // }\n    return true\n  })\n  return pairs\n}\n\nexport default validate"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,SAAAA,CAAUC,KAAK,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAC3C,IAAIC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EACpB,IAAIC,KAAK,GAAG,IAAID,GAAG,CAAC,CAAC;EACrBH,KAAK,GAAGA,KAAK,CAACK,MAAM,CAACC,CAAC,IAAI;IACxB,IAAIJ,IAAI,CAACK,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAClB;MACA,OAAO,KAAK;IACd;IACA,IAAIF,KAAK,CAACG,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACnB;MACA,OAAO,KAAK;IACd;IACAJ,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;IACdF,KAAK,CAACI,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEf;IACA;IACA;IACA;IACA;IACA,OAAO,IAAI;EACb,CAAC,CAAC;EACF,OAAON,KAAK;AACd,CAAC;AAED,eAAeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}