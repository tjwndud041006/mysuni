{"ast":null,"code":"import find from './find.js';\nimport parse from './parse/index.js';\nimport format from './format/index.js';\nimport isUnit from './isUnit.js';\nconst addMethod = function (View) {\n  /**   */\n  class Numbers extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Numbers';\n    }\n    parse(n) {\n      return this.getNth(n).map(parse);\n    }\n    get(n) {\n      return this.getNth(n).map(parse).map(o => o.num);\n    }\n    json(n) {\n      let opts = typeof n === 'object' ? n : {};\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(opts)[0];\n        let parsed = parse(p);\n        json.number = {\n          prefix: parsed.prefix,\n          num: parsed.num,\n          suffix: parsed.suffix,\n          hasComma: parsed.hasComma,\n          unit: parsed.unit\n        };\n        return json;\n      }, []);\n    }\n    /** any known measurement unit, for the number */\n    units() {\n      return this.growRight('#Unit').match('#Unit$');\n    }\n    /** return values that match a given unit */\n    isUnit(allowed) {\n      return isUnit(this, allowed);\n    }\n    /** return only ordinal numbers */\n    isOrdinal() {\n      return this.if('#Ordinal');\n    }\n    /** return only cardinal numbers*/\n    isCardinal() {\n      return this.if('#Cardinal');\n    }\n\n    /** convert to numeric form like '8' or '8th' */\n    toNumber() {\n      let res = this.map(val => {\n        if (!this.has('#TextValue')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        return val.tag('NumericValue');\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** add commas, or nicer formatting for numbers */\n    toLocaleString() {\n      let m = this;\n      m.forEach(val => {\n        let obj = parse(val);\n        if (obj.num === null) {\n          return;\n        }\n        let num = obj.num.toLocaleString();\n        // support ordinal ending, too\n        if (val.has('#Ordinal')) {\n          let str = format(obj, 'Ordinal');\n          let end = str.match(/[a-z]+$/);\n          if (end) {\n            num += end[0] || '';\n          }\n        }\n        val.replaceWith(num, {\n          tags: true\n        });\n      });\n      return this;\n    }\n    /** convert to numeric form like 'eight' or 'eighth' */\n    toText() {\n      let m = this;\n      let res = m.map(val => {\n        if (val.has('#TextValue')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('TextValue');\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** convert ordinal to cardinal form, like 'eight', or '8' */\n    toCardinal() {\n      let m = this;\n      let res = m.map(val => {\n        if (!val.has('#Ordinal')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('Cardinal');\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** convert cardinal to ordinal form, like 'eighth', or '8th' */\n    toOrdinal() {\n      let m = this;\n      let res = m.map(val => {\n        if (val.has('#Ordinal')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('Ordinal');\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n\n    /** return only numbers that are == n */\n    isEqual(n) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num === n;\n      });\n    }\n    /** return only numbers that are > n*/\n    greaterThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num > n;\n      });\n    }\n    /** return only numbers that are < n*/\n    lessThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num < n;\n      });\n    }\n    /** return only numbers > min and < max */\n    between(min, max) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num > min && num < max;\n      });\n    }\n    /** set these number to n */\n    set(n) {\n      if (n === undefined) {\n        return this; // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num;\n      }\n      let m = this;\n      let res = m.map(val => {\n        let obj = parse(val);\n        obj.num = n;\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n        if (val.has('#TextValue')) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n        }\n        let str = format(obj, fmt);\n        // add commas to number\n        if (obj.hasComma && fmt === 'Cardinal') {\n          str = Number(str).toLocaleString();\n        }\n        val = val.not('#Currency');\n        val.replaceWith(str, {\n          tags: true\n        });\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    add(n) {\n      if (!n) {\n        return this; // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num;\n      }\n      let m = this;\n      let res = m.map(val => {\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        obj.num += n;\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n        if (obj.isText) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n        }\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** decrease each number by n*/\n    subtract(n, agree) {\n      return this.add(n * -1, agree);\n    }\n    /** increase each number by 1 */\n    increment(agree) {\n      return this.add(1, agree);\n    }\n    /** decrease each number by 1 */\n    decrement(agree) {\n      return this.add(-1, agree);\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Numbers(this.document, pointer);\n      m._cache = this._cache; // share this full thing\n      return m;\n    }\n  }\n  // aliases\n  Numbers.prototype.toNice = Numbers.prototype.toLocaleString;\n  Numbers.prototype.isBetween = Numbers.prototype.between;\n  Numbers.prototype.minus = Numbers.prototype.subtract;\n  Numbers.prototype.plus = Numbers.prototype.add;\n  Numbers.prototype.equals = Numbers.prototype.isEqual;\n  View.prototype.numbers = function (n) {\n    let m = find(this);\n    m = m.getNth(n);\n    return new Numbers(this.document, m.pointer);\n  };\n  View.prototype.percentages = function (n) {\n    let m = find(this);\n    m = m.filter(v => v.has('#Percent') || v.after('^percent'));\n    m = m.getNth(n);\n    return new Numbers(this.document, m.pointer);\n  };\n  View.prototype.money = function (n) {\n    let m = find(this);\n    m = m.filter(v => v.has('#Money') || v.after('^#Currency'));\n    m = m.getNth(n);\n    return new Numbers(this.document, m.pointer);\n  };\n  // alias\n  View.prototype.values = View.prototype.numbers;\n};\nexport default addMethod;","map":{"version":3,"names":["find","parse","format","isUnit","addMethod","View","Numbers","constructor","document","pointer","groups","viewType","n","getNth","map","get","o","num","json","opts","p","toView","parsed","number","prefix","suffix","hasComma","unit","units","growRight","match","allowed","isOrdinal","if","isCardinal","toNumber","res","val","has","obj","fmt","str","replaceWith","tags","tag","toLocaleString","m","forEach","end","toText","toCardinal","toOrdinal","isEqual","filter","greaterThan","lessThan","between","min","max","set","undefined","Number","not","add","isText","subtract","agree","increment","decrement","update","_cache","prototype","toNice","isBetween","minus","plus","equals","numbers","percentages","v","after","money","values"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/numbers/numbers/api.js"],"sourcesContent":["import find from './find.js'\nimport parse from './parse/index.js'\nimport format from './format/index.js'\nimport isUnit from './isUnit.js'\n\nconst addMethod = function (View) {\n  /**   */\n  class Numbers extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Numbers'\n    }\n    parse(n) {\n      return this.getNth(n).map(parse)\n    }\n    get(n) {\n      return this.getNth(n)\n        .map(parse)\n        .map(o => o.num)\n    }\n    json(n) {\n      let opts = typeof n === 'object' ? n : {}\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(opts)[0]\n        let parsed = parse(p)\n        json.number = {\n          prefix: parsed.prefix,\n          num: parsed.num,\n          suffix: parsed.suffix,\n          hasComma: parsed.hasComma,\n          unit: parsed.unit,\n        }\n        return json\n      }, [])\n    }\n    /** any known measurement unit, for the number */\n    units() {\n      return this.growRight('#Unit').match('#Unit$')\n    }\n    /** return values that match a given unit */\n    isUnit(allowed) {\n      return isUnit(this, allowed)\n    }\n    /** return only ordinal numbers */\n    isOrdinal() {\n      return this.if('#Ordinal')\n    }\n    /** return only cardinal numbers*/\n    isCardinal() {\n      return this.if('#Cardinal')\n    }\n\n    /** convert to numeric form like '8' or '8th' */\n    toNumber() {\n      let res = this.map(val => {\n        if (!this.has('#TextValue')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        return val.tag('NumericValue')\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** add commas, or nicer formatting for numbers */\n    toLocaleString() {\n      let m = this\n      m.forEach(val => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return\n        }\n        let num = obj.num.toLocaleString()\n        // support ordinal ending, too\n        if (val.has('#Ordinal')) {\n          let str = format(obj, 'Ordinal')\n          let end = str.match(/[a-z]+$/)\n          if (end) {\n            num += end[0] || ''\n          }\n        }\n        val.replaceWith(num, { tags: true })\n      })\n      return this\n    }\n    /** convert to numeric form like 'eight' or 'eighth' */\n    toText() {\n      let m = this\n      let res = m.map(val => {\n        if (val.has('#TextValue')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('TextValue')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** convert ordinal to cardinal form, like 'eight', or '8' */\n    toCardinal() {\n      let m = this\n      let res = m.map(val => {\n        if (!val.has('#Ordinal')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('Cardinal')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** convert cardinal to ordinal form, like 'eighth', or '8th' */\n    toOrdinal() {\n      let m = this\n      let res = m.map(val => {\n        if (val.has('#Ordinal')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('Ordinal')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n\n    /** return only numbers that are == n */\n    isEqual(n) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num === n\n      })\n    }\n    /** return only numbers that are > n*/\n    greaterThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num > n\n      })\n    }\n    /** return only numbers that are < n*/\n    lessThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num < n\n      })\n    }\n    /** return only numbers > min and < max */\n    between(min, max) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num > min && num < max\n      })\n    }\n    /** set these number to n */\n    set(n) {\n      if (n === undefined) {\n        return this // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num\n      }\n      let m = this\n      let res = m.map(val => {\n        let obj = parse(val)\n        obj.num = n\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        if (val.has('#TextValue')) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        }\n        let str = format(obj, fmt)\n        // add commas to number\n        if (obj.hasComma && fmt === 'Cardinal') {\n          str = Number(str).toLocaleString()\n        }\n        val = val.not('#Currency')\n        val.replaceWith(str, { tags: true })\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    add(n) {\n      if (!n) {\n        return this // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num\n      }\n      let m = this\n      let res = m.map(val => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        obj.num += n\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        if (obj.isText) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        }\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** decrease each number by n*/\n    subtract(n, agree) {\n      return this.add(n * -1, agree)\n    }\n    /** increase each number by 1 */\n    increment(agree) {\n      return this.add(1, agree)\n    }\n    /** decrease each number by 1 */\n    decrement(agree) {\n      return this.add(-1, agree)\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Numbers(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  // aliases\n  Numbers.prototype.toNice = Numbers.prototype.toLocaleString\n  Numbers.prototype.isBetween = Numbers.prototype.between\n  Numbers.prototype.minus = Numbers.prototype.subtract\n  Numbers.prototype.plus = Numbers.prototype.add\n  Numbers.prototype.equals = Numbers.prototype.isEqual\n\n  View.prototype.numbers = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  View.prototype.percentages = function (n) {\n    let m = find(this)\n    m = m.filter(v => v.has('#Percent') || v.after('^percent'))\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  View.prototype.money = function (n) {\n    let m = find(this)\n    m = m.filter(v => v.has('#Money') || v.after('^#Currency'))\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  // alias\n  View.prototype.values = View.prototype.numbers\n}\nexport default addMethod\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}