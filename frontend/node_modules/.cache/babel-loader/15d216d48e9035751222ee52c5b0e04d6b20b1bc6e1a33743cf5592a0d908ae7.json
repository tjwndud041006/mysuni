{"ast":null,"code":"/* eslint-disable regexp/no-dupe-characters-character-class */\n\n// merge embedded quotes into 1 sentence\n// like - 'he said \"no!\" and left.'\nconst MAX_QUOTE = 280; // ¯\\_(ツ)_/¯\n\n// don't support single-quotes for multi-sentences\nconst pairs = {\n  '\\u0022': '\\u0022',\n  // 'StraightDoubleQuotes'\n  '\\uFF02': '\\uFF02',\n  // 'StraightDoubleQuotesWide'\n  // '\\u0027': '\\u0027', // 'StraightSingleQuotes'\n  '\\u201C': '\\u201D',\n  // 'CommaDoubleQuotes'\n  // '\\u2018': '\\u2019', // 'CommaSingleQuotes'\n  '\\u201F': '\\u201D',\n  // 'CurlyDoubleQuotesReversed'\n  // '\\u201B': '\\u2019', // 'CurlySingleQuotesReversed'\n  '\\u201E': '\\u201D',\n  // 'LowCurlyDoubleQuotes'\n  '\\u2E42': '\\u201D',\n  // 'LowCurlyDoubleQuotesReversed'\n  '\\u201A': '\\u2019',\n  // 'LowCurlySingleQuotes'\n  '\\u00AB': '\\u00BB',\n  // 'AngleDoubleQuotes'\n  '\\u2039': '\\u203A',\n  // 'AngleSingleQuotes'\n  '\\u2035': '\\u2032',\n  // 'PrimeSingleQuotes'\n  '\\u2036': '\\u2033',\n  // 'PrimeDoubleQuotes'\n  '\\u2037': '\\u2034',\n  // 'PrimeTripleQuotes'\n  '\\u301D': '\\u301E',\n  // 'PrimeDoubleQuotes'\n  // '\\u0060': '\\u00B4', // 'PrimeSingleQuotes'\n  '\\u301F': '\\u301E' // 'LowPrimeDoubleQuotesReversed'\n};\nconst openQuote = RegExp('[' + Object.keys(pairs).join('') + ']', 'g');\nconst closeQuote = RegExp('[' + Object.values(pairs).join('') + ']', 'g');\nconst closesQuote = function (str) {\n  if (!str) {\n    return false;\n  }\n  let m = str.match(closeQuote);\n  if (m !== null && m.length === 1) {\n    return true;\n  }\n  return false;\n};\n\n// allow micro-sentences when inside a quotation, like:\n// the doc said \"no sir. i will not beg\" and walked away.\nconst quoteMerge = function (splits) {\n  let arr = [];\n  for (let i = 0; i < splits.length; i += 1) {\n    let split = splits[i];\n    // do we have an open-quote and not a closed one?\n    let m = split.match(openQuote);\n    if (m !== null && m.length === 1) {\n      // look at the next sentence for a closing quote,\n      if (closesQuote(splits[i + 1]) && splits[i + 1].length < MAX_QUOTE) {\n        splits[i] += splits[i + 1]; // merge them\n        arr.push(splits[i]);\n        splits[i + 1] = '';\n        i += 1;\n        continue;\n      }\n      // look at n+2 for a closing quote,\n      if (closesQuote(splits[i + 2])) {\n        let toAdd = splits[i + 1] + splits[i + 2]; // merge them all\n        //make sure it's not too-long\n        if (toAdd.length < MAX_QUOTE) {\n          splits[i] += toAdd;\n          arr.push(splits[i]);\n          splits[i + 1] = '';\n          splits[i + 2] = '';\n          i += 2;\n          continue;\n        }\n      }\n    }\n    arr.push(splits[i]);\n  }\n  return arr;\n};\nexport default quoteMerge;","map":{"version":3,"names":["MAX_QUOTE","pairs","openQuote","RegExp","Object","keys","join","closeQuote","values","closesQuote","str","m","match","length","quoteMerge","splits","arr","i","split","push","toAdd"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/methods/01-sentences/04-quote-merge.js"],"sourcesContent":["/* eslint-disable regexp/no-dupe-characters-character-class */\n\n// merge embedded quotes into 1 sentence\n// like - 'he said \"no!\" and left.'\nconst MAX_QUOTE = 280// ¯\\_(ツ)_/¯\n\n// don't support single-quotes for multi-sentences\nconst pairs = {\n  '\\u0022': '\\u0022', // 'StraightDoubleQuotes'\n  '\\uFF02': '\\uFF02', // 'StraightDoubleQuotesWide'\n  // '\\u0027': '\\u0027', // 'StraightSingleQuotes'\n  '\\u201C': '\\u201D', // 'CommaDoubleQuotes'\n  // '\\u2018': '\\u2019', // 'CommaSingleQuotes'\n  '\\u201F': '\\u201D', // 'CurlyDoubleQuotesReversed'\n  // '\\u201B': '\\u2019', // 'CurlySingleQuotesReversed'\n  '\\u201E': '\\u201D', // 'LowCurlyDoubleQuotes'\n  '\\u2E42': '\\u201D', // 'LowCurlyDoubleQuotesReversed'\n  '\\u201A': '\\u2019', // 'LowCurlySingleQuotes'\n  '\\u00AB': '\\u00BB', // 'AngleDoubleQuotes'\n  '\\u2039': '\\u203A', // 'AngleSingleQuotes'\n  '\\u2035': '\\u2032', // 'PrimeSingleQuotes'\n  '\\u2036': '\\u2033', // 'PrimeDoubleQuotes'\n  '\\u2037': '\\u2034', // 'PrimeTripleQuotes'\n  '\\u301D': '\\u301E', // 'PrimeDoubleQuotes'\n  // '\\u0060': '\\u00B4', // 'PrimeSingleQuotes'\n  '\\u301F': '\\u301E', // 'LowPrimeDoubleQuotesReversed'\n}\nconst openQuote = RegExp('[' + Object.keys(pairs).join('') + ']', 'g')\nconst closeQuote = RegExp('[' + Object.values(pairs).join('') + ']', 'g')\n\nconst closesQuote = function (str) {\n  if (!str) {\n    return false\n  }\n  let m = str.match(closeQuote)\n  if (m !== null && m.length === 1) {\n    return true\n  }\n  return false\n}\n\n// allow micro-sentences when inside a quotation, like:\n// the doc said \"no sir. i will not beg\" and walked away.\nconst quoteMerge = function (splits) {\n  let arr = []\n  for (let i = 0; i < splits.length; i += 1) {\n    let split = splits[i]\n    // do we have an open-quote and not a closed one?\n    let m = split.match(openQuote)\n    if (m !== null && m.length === 1) {\n\n      // look at the next sentence for a closing quote,\n      if (closesQuote(splits[i + 1]) && splits[i + 1].length < MAX_QUOTE) {\n        splits[i] += splits[i + 1]// merge them\n        arr.push(splits[i])\n        splits[i + 1] = ''\n        i += 1\n        continue\n      }\n      // look at n+2 for a closing quote,\n      if (closesQuote(splits[i + 2])) {\n        let toAdd = splits[i + 1] + splits[i + 2]// merge them all\n        //make sure it's not too-long\n        if (toAdd.length < MAX_QUOTE) {\n          splits[i] += toAdd\n          arr.push(splits[i])\n          splits[i + 1] = ''\n          splits[i + 2] = ''\n          i += 2\n          continue\n        }\n      }\n    }\n    arr.push(splits[i])\n  }\n  return arr\n}\nexport default quoteMerge\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}