{"ast":null,"code":"/*\r\nCopyright (c) 2012, Guillaume Marty\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n */\n\n'use strict';\n\n/**\r\n * Generate a replacing function given a table of patterns. Inspired by:\r\n * http://code.google.com/p/jslibs/wiki/JavascriptTips#String_converter\r\n * The order of elements is significant. Longer elements should be listed first.\r\n * @see Speed test http://jsperf.com/build-a-regexp-table\r\n *\r\n * @param {Object.<string, string>} translationTable The translation table of key value.\r\n * @return {function(string): string} A translating function.\r\n */\nfunction replacer(translationTable) {\n  /**\r\n   * An array of translationTable keys.\r\n   * @type {Array.<string>}\r\n   */\n  const pattern = [];\n\n  /**\r\n   * Used to iterate over translationTable.\r\n   * @type {string}\r\n   */\n  let key;\n  for (key in translationTable) {\n    // Escaping regexp special chars.\n    // @see Speed test for type casting to string http://jsperf.com/string-type-casting/2\n    // @see http://closure-library.googlecode.com/svn/docs/closure_goog_string_string.js.source.html#line956\n    /* eslint-disable no-control-regex */\n    const key1 = ('' + key).replace(/([-()[\\]{}+?*.$^|,:#<!\\\\/])/g, '\\\\$1').replace(/\\x08/g, '\\\\x08');\n    pattern.push(key1);\n  }\n\n  /**\r\n   * The regular expression doing the replacement job.\r\n   * @type {RegExp}\r\n   */\n  const regExp = new RegExp(pattern.join('|'), 'g');\n\n  /**\r\n   * @param {string} str Input string.\r\n   * @return {string} The string replaced.\r\n   */\n  return function (str) {\n    return str.replace(regExp, function (str) {\n      return translationTable[str];\n    });\n  };\n}\n\n/**\r\n * Exchanges all keys with their associated values in an object.\r\n *\r\n * @param {Object.<string, string>} obj An object of strings.\r\n * @return {Object.<string, string>} An object of strings.\r\n */\nfunction flip(obj) {\n  const newObj = Object.create(null);\n  let key;\n  for (key in obj) {\n    newObj[obj[key]] = key;\n  }\n  return newObj;\n}\n\n/**\r\n * Merge several objects. Properties from earlier objects are overwritten by\r\n * laters's in case of conflict.\r\n *\r\n * @param {...Object.<string, string>} var_args One or more objects of strings.\r\n * @return {!Object.<string, string>} An object of strings.\r\n */\nfunction merge(varArgs) {\n  const args = [].slice.call(arguments);\n  const newObj = Object.create(null);\n  let id = 0;\n  let key;\n  while (args[id]) {\n    for (key in args[id]) {\n      newObj[key] = args[id][key];\n    }\n    id++;\n  }\n  return newObj;\n}\nexports.replacer = replacer;\nexports.flip = flip;\nexports.merge = merge;","map":{"version":3,"names":["replacer","translationTable","pattern","key","key1","replace","push","regExp","RegExp","join","str","flip","obj","newObj","Object","create","merge","varArgs","args","slice","call","arguments","id","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/util/utils.js"],"sourcesContent":["/*\r\nCopyright (c) 2012, Guillaume Marty\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Generate a replacing function given a table of patterns. Inspired by:\r\n * http://code.google.com/p/jslibs/wiki/JavascriptTips#String_converter\r\n * The order of elements is significant. Longer elements should be listed first.\r\n * @see Speed test http://jsperf.com/build-a-regexp-table\r\n *\r\n * @param {Object.<string, string>} translationTable The translation table of key value.\r\n * @return {function(string): string} A translating function.\r\n */\r\nfunction replacer (translationTable) {\r\n  /**\r\n   * An array of translationTable keys.\r\n   * @type {Array.<string>}\r\n   */\r\n  const pattern = []\r\n\r\n  /**\r\n   * Used to iterate over translationTable.\r\n   * @type {string}\r\n   */\r\n  let key\r\n\r\n  for (key in translationTable) {\r\n    // Escaping regexp special chars.\r\n    // @see Speed test for type casting to string http://jsperf.com/string-type-casting/2\r\n    // @see http://closure-library.googlecode.com/svn/docs/closure_goog_string_string.js.source.html#line956\r\n    /* eslint-disable no-control-regex */\r\n    const key1 = ('' + key).replace(/([-()[\\]{}+?*.$^|,:#<!\\\\/])/g, '\\\\$1')\r\n      .replace(/\\x08/g, '\\\\x08')\r\n\r\n    pattern.push(key1)\r\n  }\r\n\r\n  /**\r\n   * The regular expression doing the replacement job.\r\n   * @type {RegExp}\r\n   */\r\n  const regExp = new RegExp(pattern.join('|'), 'g')\r\n\r\n  /**\r\n   * @param {string} str Input string.\r\n   * @return {string} The string replaced.\r\n   */\r\n  return function (str) {\r\n    return str.replace(regExp, function (str) {\r\n      return translationTable[str]\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Exchanges all keys with their associated values in an object.\r\n *\r\n * @param {Object.<string, string>} obj An object of strings.\r\n * @return {Object.<string, string>} An object of strings.\r\n */\r\nfunction flip (obj) {\r\n  const newObj = Object.create(null)\r\n  let key\r\n\r\n  for (key in obj) {\r\n    newObj[obj[key]] = key\r\n  }\r\n\r\n  return newObj\r\n}\r\n\r\n/**\r\n * Merge several objects. Properties from earlier objects are overwritten by\r\n * laters's in case of conflict.\r\n *\r\n * @param {...Object.<string, string>} var_args One or more objects of strings.\r\n * @return {!Object.<string, string>} An object of strings.\r\n */\r\nfunction merge (varArgs) {\r\n  const args = [].slice.call(arguments)\r\n  const newObj = Object.create(null)\r\n  let id = 0; let key\r\n\r\n  while (args[id]) {\r\n    for (key in args[id]) {\r\n      newObj[key] = args[id][key]\r\n    }\r\n\r\n    id++\r\n  }\r\n\r\n  return newObj\r\n}\r\n\r\nexports.replacer = replacer\r\nexports.flip = flip\r\nexports.merge = merge\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAAEC,gBAAgB,EAAE;EACnC;AACF;AACA;AACA;EACE,MAAMC,OAAO,GAAG,EAAE;;EAElB;AACF;AACA;AACA;EACE,IAAIC,GAAG;EAEP,KAAKA,GAAG,IAAIF,gBAAgB,EAAE;IAC5B;IACA;IACA;IACA;IACA,MAAMG,IAAI,GAAG,CAAC,EAAE,GAAGD,GAAG,EAAEE,OAAO,CAAC,8BAA8B,EAAE,MAAM,CAAC,CACpEA,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;IAE5BH,OAAO,CAACI,IAAI,CAACF,IAAI,CAAC;EACpB;;EAEA;AACF;AACA;AACA;EACE,MAAMG,MAAM,GAAG,IAAIC,MAAM,CAACN,OAAO,CAACO,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;;EAEjD;AACF;AACA;AACA;EACE,OAAO,UAAUC,GAAG,EAAE;IACpB,OAAOA,GAAG,CAACL,OAAO,CAACE,MAAM,EAAE,UAAUG,GAAG,EAAE;MACxC,OAAOT,gBAAgB,CAACS,GAAG,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAAEC,GAAG,EAAE;EAClB,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAClC,IAAIZ,GAAG;EAEP,KAAKA,GAAG,IAAIS,GAAG,EAAE;IACfC,MAAM,CAACD,GAAG,CAACT,GAAG,CAAC,CAAC,GAAGA,GAAG;EACxB;EAEA,OAAOU,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,KAAKA,CAAEC,OAAO,EAAE;EACvB,MAAMC,IAAI,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;EACrC,MAAMR,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAClC,IAAIO,EAAE,GAAG,CAAC;EAAE,IAAInB,GAAG;EAEnB,OAAOe,IAAI,CAACI,EAAE,CAAC,EAAE;IACf,KAAKnB,GAAG,IAAIe,IAAI,CAACI,EAAE,CAAC,EAAE;MACpBT,MAAM,CAACV,GAAG,CAAC,GAAGe,IAAI,CAACI,EAAE,CAAC,CAACnB,GAAG,CAAC;IAC7B;IAEAmB,EAAE,EAAE;EACN;EAEA,OAAOT,MAAM;AACf;AAEAU,OAAO,CAACvB,QAAQ,GAAGA,QAAQ;AAC3BuB,OAAO,CAACZ,IAAI,GAAGA,IAAI;AACnBY,OAAO,CAACP,KAAK,GAAGA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}