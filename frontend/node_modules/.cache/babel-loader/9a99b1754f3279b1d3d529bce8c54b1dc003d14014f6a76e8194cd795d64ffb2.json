{"ast":null,"code":"const termLoop = function (view, cb) {\n  view.docs.forEach(terms => {\n    terms.forEach(cb);\n  });\n};\nexport default {\n  // remove titlecasing, uppercase\n  'case': doc => {\n    termLoop(doc, term => {\n      term.text = term.text.toLowerCase();\n    });\n  },\n  // visually romanize/anglicize 'Björk' into 'Bjork'.\n  'unicode': doc => {\n    const world = doc.world;\n    const killUnicode = world.methods.one.killUnicode;\n    termLoop(doc, term => term.text = killUnicode(term.text, world));\n  },\n  // remove hyphens, newlines, and force one space between words\n  'whitespace': doc => {\n    termLoop(doc, term => {\n      // one space between words\n      term.post = term.post.replace(/\\s+/g, ' ');\n      term.post = term.post.replace(/\\s([.,?!:;])/g, '$1'); //no whitespace before a period, etc\n      // no whitepace before a word\n      term.pre = term.pre.replace(/\\s+/g, '');\n    });\n  },\n  // remove commas, semicolons - but keep sentence-ending punctuation\n  'punctuation': doc => {\n    termLoop(doc, term => {\n      // turn dashes to spaces\n      term.post = term.post.replace(/[–—-]/g, ' ');\n      // remove comma, etc \n      term.post = term.post.replace(/[,:;]/g, '');\n      // remove elipses\n      term.post = term.post.replace(/\\.{2,}/g, '');\n      // remove repeats\n      term.post = term.post.replace(/\\?{2,}/g, '?');\n      term.post = term.post.replace(/!{2,}/g, '!');\n      // replace ?!\n      term.post = term.post.replace(/\\?!+/g, '?');\n    });\n    // trim end\n    let docs = doc.docs;\n    let terms = docs[docs.length - 1];\n    if (terms && terms.length > 0) {\n      let lastTerm = terms[terms.length - 1];\n      lastTerm.post = lastTerm.post.replace(/ /g, '');\n    }\n  },\n  // ====== subsets ===\n\n  // turn \"isn't\" to \"is not\"\n  'contractions': doc => {\n    doc.contractions().expand();\n  },\n  //remove periods from acronyms, like 'F.B.I.'\n  'acronyms': doc => {\n    doc.acronyms().strip();\n  },\n  //remove words inside brackets (like these)\n  'parentheses': doc => {\n    doc.parentheses().strip();\n  },\n  // turn \"Google's tax return\" to \"Google tax return\"\n  'possessives': doc => {\n    doc.possessives().strip();\n  },\n  // turn \"tax return\" to tax return\n  'quotations': doc => {\n    doc.quotations().strip();\n  },\n  // remove them\n  'emoji': doc => {\n    doc.emojis().remove();\n  },\n  //turn 'Vice Admiral John Smith' to 'John Smith'\n  'honorifics': doc => {\n    doc.match('#Honorific+ #Person').honorifics().remove();\n  },\n  // remove needless adverbs\n  'adverbs': doc => {\n    doc.adverbs().remove();\n  },\n  // turn \"batmobiles\" into \"batmobile\"\n  'nouns': doc => {\n    doc.nouns().toSingular();\n  },\n  // turn all verbs into Infinitive form - \"I walked\" → \"I walk\"\n  'verbs': doc => {\n    doc.verbs().toInfinitive();\n  },\n  // turn \"fifty\" into \"50\"\n  'numbers': doc => {\n    doc.numbers().toNumber();\n  },\n  /** remove bullets from beginning of phrase */\n  'debullet': doc => {\n    const hasBullet = /^\\s*([-–—*•])\\s*$/;\n    doc.docs.forEach(terms => {\n      //remove bullet symbols\n      if (hasBullet.test(terms[0].pre)) {\n        terms[0].pre = terms[0].pre.replace(hasBullet, '');\n      }\n    });\n    return doc;\n  }\n};","map":{"version":3,"names":["termLoop","view","cb","docs","forEach","terms","doc","term","text","toLowerCase","world","killUnicode","methods","one","post","replace","pre","length","lastTerm","contractions","expand","acronyms","strip","parentheses","possessives","quotations","emojis","remove","match","honorifics","adverbs","nouns","toSingular","verbs","toInfinitive","numbers","toNumber","hasBullet","test"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/normalize/methods.js"],"sourcesContent":["const termLoop = function (view, cb) {\n  view.docs.forEach(terms => {\n    terms.forEach(cb)\n  })\n}\n\nexport default {\n  // remove titlecasing, uppercase\n  'case': (doc) => {\n    termLoop(doc, (term) => {\n      term.text = term.text.toLowerCase()\n    })\n  },\n  // visually romanize/anglicize 'Björk' into 'Bjork'.\n  'unicode': (doc) => {\n    const world = doc.world\n    const killUnicode = world.methods.one.killUnicode\n    termLoop(doc, (term) => term.text = killUnicode(term.text, world))\n  },\n  // remove hyphens, newlines, and force one space between words\n  'whitespace': (doc) => {\n    termLoop(doc, (term) => {\n      // one space between words\n      term.post = term.post.replace(/\\s+/g, ' ')\n      term.post = term.post.replace(/\\s([.,?!:;])/g, '$1')//no whitespace before a period, etc\n      // no whitepace before a word\n      term.pre = term.pre.replace(/\\s+/g, '')\n    })\n  },\n  // remove commas, semicolons - but keep sentence-ending punctuation\n  'punctuation': (doc) => {\n    termLoop(doc, (term) => {\n      // turn dashes to spaces\n      term.post = term.post.replace(/[–—-]/g, ' ')\n      // remove comma, etc \n      term.post = term.post.replace(/[,:;]/g, '')\n      // remove elipses\n      term.post = term.post.replace(/\\.{2,}/g, '')\n      // remove repeats\n      term.post = term.post.replace(/\\?{2,}/g, '?')\n      term.post = term.post.replace(/!{2,}/g, '!')\n      // replace ?!\n      term.post = term.post.replace(/\\?!+/g, '?')\n    })\n    // trim end\n    let docs = doc.docs\n    let terms = docs[docs.length - 1]\n    if (terms && terms.length > 0) {\n      let lastTerm = terms[terms.length - 1]\n      lastTerm.post = lastTerm.post.replace(/ /g, '')\n    }\n  },\n\n  // ====== subsets ===\n\n  // turn \"isn't\" to \"is not\"\n  'contractions': (doc) => {\n    doc.contractions().expand()\n  },\n  //remove periods from acronyms, like 'F.B.I.'\n  'acronyms': (doc) => {\n    doc.acronyms().strip()\n  },\n  //remove words inside brackets (like these)\n  'parentheses': (doc) => {\n    doc.parentheses().strip()\n  },\n  // turn \"Google's tax return\" to \"Google tax return\"\n  'possessives': (doc) => {\n    doc.possessives().strip()\n  },\n  // turn \"tax return\" to tax return\n  'quotations': (doc) => {\n    doc.quotations().strip()\n  },\n\n  // remove them\n  'emoji': (doc) => {\n    doc.emojis().remove()\n  },\n  //turn 'Vice Admiral John Smith' to 'John Smith'\n  'honorifics': (doc) => {\n    doc.match('#Honorific+ #Person').honorifics().remove()\n  },\n  // remove needless adverbs\n  'adverbs': (doc) => {\n    doc.adverbs().remove()\n  },\n\n  // turn \"batmobiles\" into \"batmobile\"\n  'nouns': (doc) => {\n    doc.nouns().toSingular()\n  },\n  // turn all verbs into Infinitive form - \"I walked\" → \"I walk\"\n  'verbs': (doc) => {\n    doc.verbs().toInfinitive()\n  },\n  // turn \"fifty\" into \"50\"\n  'numbers': (doc) => {\n    doc.numbers().toNumber()\n  },\n\n  /** remove bullets from beginning of phrase */\n  'debullet': (doc) => {\n    const hasBullet = /^\\s*([-–—*•])\\s*$/\n    doc.docs.forEach(terms => {\n      //remove bullet symbols\n      if (hasBullet.test(terms[0].pre)) {\n        terms[0].pre = terms[0].pre.replace(hasBullet, '')\n      }\n    })\n    return doc\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}