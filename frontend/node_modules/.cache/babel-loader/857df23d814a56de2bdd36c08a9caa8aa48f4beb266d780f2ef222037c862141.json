{"ast":null,"code":"const keep = {\n  tags: true\n};\nconst nounToSingular = function (m, parsed) {\n  // already singular?\n  if (parsed.isPlural === false) {\n    return m;\n  }\n  const {\n    methods,\n    model\n  } = m.world;\n  const {\n    toSingular\n  } = methods.two.transform.noun;\n  // inflect the root noun\n  let str = parsed.root.text('normal');\n  let single = toSingular(str, model);\n  m.replace(parsed.root, single, keep).tag('Singular', 'toPlural');\n  // should we change the determiner/article?\n  // m.debug()\n  return m;\n};\nexport default nounToSingular;","map":{"version":3,"names":["keep","tags","nounToSingular","m","parsed","isPlural","methods","model","world","toSingular","two","transform","noun","str","root","text","single","replace","tag"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/nouns/api/toSingular.js"],"sourcesContent":["const keep = { tags: true }\n\nconst nounToSingular = function (m, parsed) {\n  // already singular?\n  if (parsed.isPlural === false) {\n    return m\n  }\n  const { methods, model } = m.world\n  const { toSingular } = methods.two.transform.noun\n  // inflect the root noun\n  let str = parsed.root.text('normal')\n  let single = toSingular(str, model)\n  m.replace(parsed.root, single, keep).tag('Singular', 'toPlural')\n  // should we change the determiner/article?\n  // m.debug()\n  return m\n}\nexport default nounToSingular\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG;EAAEC,IAAI,EAAE;AAAK,CAAC;AAE3B,MAAMC,cAAc,GAAG,SAAAA,CAAUC,CAAC,EAAEC,MAAM,EAAE;EAC1C;EACA,IAAIA,MAAM,CAACC,QAAQ,KAAK,KAAK,EAAE;IAC7B,OAAOF,CAAC;EACV;EACA,MAAM;IAAEG,OAAO;IAAEC;EAAM,CAAC,GAAGJ,CAAC,CAACK,KAAK;EAClC,MAAM;IAAEC;EAAW,CAAC,GAAGH,OAAO,CAACI,GAAG,CAACC,SAAS,CAACC,IAAI;EACjD;EACA,IAAIC,GAAG,GAAGT,MAAM,CAACU,IAAI,CAACC,IAAI,CAAC,QAAQ,CAAC;EACpC,IAAIC,MAAM,GAAGP,UAAU,CAACI,GAAG,EAAEN,KAAK,CAAC;EACnCJ,CAAC,CAACc,OAAO,CAACb,MAAM,CAACU,IAAI,EAAEE,MAAM,EAAEhB,IAAI,CAAC,CAACkB,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC;EAChE;EACA;EACA,OAAOf,CAAC;AACV,CAAC;AACD,eAAeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}