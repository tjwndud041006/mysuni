{"ast":null,"code":"const lastNoun = function (terms, i) {\n  for (let n = i - 1; n >= 0; n -= 1) {\n    if (terms[n].tags.has('Noun') || terms[n].tags.has('Pronoun') || terms[n].tags.has('Plural') || terms[n].tags.has('Singular')) {\n      return terms[n];\n    }\n  }\n  return null;\n};\n\n//ain't -> are/is not\nconst apostropheT = function (terms, i) {\n  if (terms[i].normal === \"ain't\" || terms[i].normal === 'aint') {\n    // \"ain't never\" -> have never (?)\n    if (terms[i + 1] && terms[i + 1].normal === 'never') {\n      return ['have'];\n    }\n    // we aint -> are not,   she aint -> is not\n    let noun = lastNoun(terms, i);\n    if (noun) {\n      // plural/singular pronouns\n      if (noun.normal === 'we' || noun.normal === 'they') {\n        return ['are', 'not'];\n      }\n      if (noun.normal === 'i') {\n        return ['am', 'not'];\n      }\n      // plural/singular tags\n      if (noun.tags && noun.tags.has('Plural')) {\n        return ['are', 'not'];\n      }\n    }\n    return ['is', 'not'];\n  }\n  let before = terms[i].normal.replace(/n't/, '');\n  return [before, 'not'];\n};\nexport default apostropheT;","map":{"version":3,"names":["lastNoun","terms","i","n","tags","has","apostropheT","normal","noun","before","replace"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-t.js"],"sourcesContent":["const lastNoun = function (terms, i) {\n  for (let n = i - 1; n >= 0; n -= 1) {\n    if (\n      terms[n].tags.has('Noun') ||\n      terms[n].tags.has('Pronoun') ||\n      terms[n].tags.has('Plural') ||\n      terms[n].tags.has('Singular')\n    ) {\n      return terms[n]\n    }\n  }\n  return null\n}\n\n//ain't -> are/is not\nconst apostropheT = function (terms, i) {\n  if (terms[i].normal === \"ain't\" || terms[i].normal === 'aint') {\n    // \"ain't never\" -> have never (?)\n    if (terms[i + 1] && terms[i + 1].normal === 'never') {\n      return ['have']\n    }\n    // we aint -> are not,   she aint -> is not\n    let noun = lastNoun(terms, i)\n    if (noun) {\n      // plural/singular pronouns\n      if (noun.normal === 'we' || noun.normal === 'they') {\n        return ['are', 'not']\n      }\n      if (noun.normal === 'i') {\n        return ['am', 'not']\n      }\n      // plural/singular tags\n      if (noun.tags && noun.tags.has('Plural')) {\n        return ['are', 'not']\n      }\n    }\n    return ['is', 'not']\n  }\n  let before = terms[i].normal.replace(/n't/, '')\n  return [before, 'not']\n}\n\nexport default apostropheT\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,SAAAA,CAAUC,KAAK,EAAEC,CAAC,EAAE;EACnC,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAClC,IACEF,KAAK,CAACE,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,IACzBJ,KAAK,CAACE,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,SAAS,CAAC,IAC5BJ,KAAK,CAACE,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC,IAC3BJ,KAAK,CAACE,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,UAAU,CAAC,EAC7B;MACA,OAAOJ,KAAK,CAACE,CAAC,CAAC;IACjB;EACF;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMG,WAAW,GAAG,SAAAA,CAAUL,KAAK,EAAEC,CAAC,EAAE;EACtC,IAAID,KAAK,CAACC,CAAC,CAAC,CAACK,MAAM,KAAK,OAAO,IAAIN,KAAK,CAACC,CAAC,CAAC,CAACK,MAAM,KAAK,MAAM,EAAE;IAC7D;IACA,IAAIN,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,IAAID,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,CAACK,MAAM,KAAK,OAAO,EAAE;MACnD,OAAO,CAAC,MAAM,CAAC;IACjB;IACA;IACA,IAAIC,IAAI,GAAGR,QAAQ,CAACC,KAAK,EAAEC,CAAC,CAAC;IAC7B,IAAIM,IAAI,EAAE;MACR;MACA,IAAIA,IAAI,CAACD,MAAM,KAAK,IAAI,IAAIC,IAAI,CAACD,MAAM,KAAK,MAAM,EAAE;QAClD,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;MACvB;MACA,IAAIC,IAAI,CAACD,MAAM,KAAK,GAAG,EAAE;QACvB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;MACtB;MACA;MACA,IAAIC,IAAI,CAACJ,IAAI,IAAII,IAAI,CAACJ,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;QACxC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;MACvB;IACF;IACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;EACtB;EACA,IAAII,MAAM,GAAGR,KAAK,CAACC,CAAC,CAAC,CAACK,MAAM,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC/C,OAAO,CAACD,MAAM,EAAE,KAAK,CAAC;AACxB,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}