{"ast":null,"code":"/*\nCopyright (c) 2024, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst Tokenizer = require('./tokenizer');\n\n// Strings that will be used to create placeholders\nconst NUM = 'NUMBER';\nconst DELIM = 'DELIM';\nconst URI = 'URI';\nconst ABBREV = 'ABBREV';\nconst DEBUG = false;\nfunction generateUniqueCode(base, index) {\n  // Surround the placeholder with {{}} to prevent shorter numbers to be recognized\n  // in larger numbers\n  return `{{${base}_${index}}}`;\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nclass SentenceTokenizer extends Tokenizer {\n  constructor(abbreviations, trimSentences) {\n    super();\n    if (abbreviations) {\n      this.abbreviations = abbreviations;\n    } else {\n      this.abbreviations = [];\n    }\n    if (trimSentences === undefined) {\n      this.trimSentences = true;\n    } else {\n      this.trimSentences = trimSentences;\n    }\n    this.replacementMap = null;\n    this.replacementCounter = 0;\n  }\n  replaceUrisWithPlaceholders(text) {\n    const urlPattern = /(https?:\\/\\/\\S+|www\\.\\S+|ftp:\\/\\/\\S+|(mailto:)?[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}|file:\\/\\/\\S+)/gi;\n    const modifiedText = text.replace(urlPattern, match => {\n      const placeholder = generateUniqueCode(URI, this.replacementCounter++);\n      this.replacementMap.set(placeholder, match);\n      return placeholder;\n    });\n    return modifiedText;\n  }\n  replaceAbbreviations(text) {\n    if (this.abbreviations.length === 0) {\n      return text;\n    }\n    const pattern = new RegExp(`(${this.abbreviations.map(abbrev => escapeRegExp(abbrev)).join('|')})`, 'gi');\n    const replacedText = text.replace(pattern, match => {\n      const code = generateUniqueCode(ABBREV, this.replacementCounter++);\n      this.replacementMap.set(code, match);\n      return code;\n    });\n    return replacedText;\n  }\n  replaceDelimitersWithPlaceholders(text) {\n    // Regular expression for sentence delimiters optionally followed by a bracket or quote\n    // Multiple delimiters with spaces in between are allowed\n    // The expression makes sure that the sentence delimiter group ends with a sentence delimiter\n    const delimiterPattern = /([.?!… ]*)([.?!…])([\"'”’)}\\]]?)/g;\n    const modifiedText = text.replace(delimiterPattern, (match, p1, p2, p3) => {\n      const placeholder = generateUniqueCode(DELIM, this.replacementCounter++);\n      this.delimiterMap.set(placeholder, p1 + p2 + p3);\n      return placeholder;\n    });\n    return modifiedText;\n  }\n  splitOnPlaceholders(text, placeholders) {\n    if (this.delimiterMap.size === 0) {\n      return [text];\n    }\n    const keys = Array.from(this.delimiterMap.keys());\n    const pattern = new RegExp(`(${keys.map(escapeRegExp).join('|')})`);\n    const parts = text.split(pattern);\n    const sentences = [];\n    for (let i = 0; i < parts.length; i += 2) {\n      const sentence = parts[i];\n      const placeholder = parts[i + 1] || '';\n      sentences.push(sentence + placeholder);\n    }\n    return sentences;\n  }\n  replaceNumbersWithCode(text) {\n    // Regular expression to match numbers, including decimal points and commas\n    const numberPattern = /\\b\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?\\b/g;\n    const replacedText = text.replace(numberPattern, match => {\n      const code = generateUniqueCode(NUM, this.replacementCounter++);\n      this.replacementMap.set(code, match);\n      return code;\n    });\n    return replacedText;\n  }\n  revertReplacements(text) {\n    let originalText = text;\n    for (const [placeholder, replacement] of this.replacementMap.entries()) {\n      const pattern = new RegExp(escapeRegExp(placeholder), 'g');\n      originalText = originalText.replace(pattern, replacement);\n    }\n    return originalText;\n  }\n  revertDelimiters(text) {\n    let originalText = text;\n    for (const [placeholder, replacement] of this.delimiterMap.entries()) {\n      const pattern = new RegExp(escapeRegExp(placeholder), 'g');\n      originalText = originalText.replace(pattern, replacement);\n    }\n    return originalText;\n  }\n  tokenize(text) {\n    this.replacementCounter = 0;\n    this.replacementMap = new Map();\n    this.delimiterMap = new Map();\n    DEBUG && console.log('---Start of sentence tokenization-----------------------');\n    DEBUG && console.log('Original input: >>>' + text + '<<<');\n    // Replace abbreviations\n    const result1 = this.replaceAbbreviations(text);\n    DEBUG && console.log('Phase 1: replacing abbreviations: ' + JSON.stringify(result1));\n\n    // Replace URIs\n    const result2 = this.replaceUrisWithPlaceholders(result1);\n    DEBUG && console.log('Phase 2: replacing URIs: ' + JSON.stringify(result2));\n\n    // Replace delimiters followed by optional quotes, brackets, and braces\n    const result3 = this.replaceNumbersWithCode(result2);\n    DEBUG && console.log('Phase 3: replacing numbers with placeholders: ' + JSON.stringify(result3));\n\n    // Replace delimiters followed by optional quotes, brackets, and braces\n    const result4 = this.replaceDelimitersWithPlaceholders(result3);\n    DEBUG && console.log('Phase 4: replacing delimiters with placeholders: ' + JSON.stringify(result4));\n\n    // Split on placeholders for sentence delimiters\n    const sentences = this.splitOnPlaceholders(result4);\n    DEBUG && console.log('Phase 5: splitting into sentences on placeholders: ' + JSON.stringify(sentences));\n\n    // Replace back all abbreviations, URIs, and delimiters\n    const newSentences = sentences.map(s => {\n      const s1 = this.revertReplacements(s);\n      return this.revertDelimiters(s1);\n    });\n    DEBUG && console.log('Phase 6: replacing back abbreviations, URIs, numbers and delimiters: ' + JSON.stringify(newSentences));\n    const trimmedSentences = this.trim(newSentences);\n    DEBUG && console.log('Phase 7: trimming array of empty sentences: ' + JSON.stringify(trimmedSentences));\n    const trimmedSentences2 = trimmedSentences.map(sent => this.trimSentences ? sent.trim() : sent);\n    DEBUG && console.log('Phase 8: trimming sentences from surrounding whitespace: ' + JSON.stringify(trimmedSentences2));\n    DEBUG && console.log('---End of sentence tokenization--------------------------');\n    DEBUG && console.log('---Replacement map---------------------------------------');\n    DEBUG && console.log([...this.replacementMap.entries()]);\n    DEBUG && console.log('---Delimiter map-----------------------------------------');\n    DEBUG && console.log([...this.delimiterMap.entries()]);\n    DEBUG && console.log('---------------------------------------------------------');\n    return trimmedSentences2;\n  }\n}\nmodule.exports = SentenceTokenizer;","map":{"version":3,"names":["Tokenizer","require","NUM","DELIM","URI","ABBREV","DEBUG","generateUniqueCode","base","index","escapeRegExp","string","replace","SentenceTokenizer","constructor","abbreviations","trimSentences","undefined","replacementMap","replacementCounter","replaceUrisWithPlaceholders","text","urlPattern","modifiedText","match","placeholder","set","replaceAbbreviations","length","pattern","RegExp","map","abbrev","join","replacedText","code","replaceDelimitersWithPlaceholders","delimiterPattern","p1","p2","p3","delimiterMap","splitOnPlaceholders","placeholders","size","keys","Array","from","parts","split","sentences","i","sentence","push","replaceNumbersWithCode","numberPattern","revertReplacements","originalText","replacement","entries","revertDelimiters","tokenize","Map","console","log","result1","JSON","stringify","result2","result3","result4","newSentences","s","s1","trimmedSentences","trim","trimmedSentences2","sent","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/tokenizers/sentence_tokenizer.js"],"sourcesContent":["/*\nCopyright (c) 2024, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst Tokenizer = require('./tokenizer')\n\n// Strings that will be used to create placeholders\nconst NUM = 'NUMBER'\nconst DELIM = 'DELIM'\nconst URI = 'URI'\nconst ABBREV = 'ABBREV'\n\nconst DEBUG = false\n\nfunction generateUniqueCode (base, index) {\n  // Surround the placeholder with {{}} to prevent shorter numbers to be recognized\n  // in larger numbers\n  return `{{${base}_${index}}}`\n}\n\nfunction escapeRegExp (string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nclass SentenceTokenizer extends Tokenizer {\n  constructor (abbreviations, trimSentences) {\n    super()\n    if (abbreviations) {\n      this.abbreviations = abbreviations\n    } else {\n      this.abbreviations = []\n    }\n    if (trimSentences === undefined) {\n      this.trimSentences = true\n    } else {\n      this.trimSentences = trimSentences\n    }\n    this.replacementMap = null\n    this.replacementCounter = 0\n  }\n\n  replaceUrisWithPlaceholders (text) {\n    const urlPattern = /(https?:\\/\\/\\S+|www\\.\\S+|ftp:\\/\\/\\S+|(mailto:)?[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}|file:\\/\\/\\S+)/gi\n\n    const modifiedText = text.replace(urlPattern, (match) => {\n      const placeholder = generateUniqueCode(URI, this.replacementCounter++)\n      this.replacementMap.set(placeholder, match)\n      return placeholder\n    })\n\n    return modifiedText\n  }\n\n  replaceAbbreviations (text) {\n    if (this.abbreviations.length === 0) {\n      return text\n    }\n    const pattern = new RegExp(`(${this.abbreviations.map(abbrev => escapeRegExp(abbrev)).join('|')})`, 'gi')\n    const replacedText = text.replace(pattern, match => {\n      const code = generateUniqueCode(ABBREV, this.replacementCounter++)\n      this.replacementMap.set(code, match)\n      return code\n    })\n\n    return replacedText\n  }\n\n  replaceDelimitersWithPlaceholders (text) {\n    // Regular expression for sentence delimiters optionally followed by a bracket or quote\n    // Multiple delimiters with spaces in between are allowed\n    // The expression makes sure that the sentence delimiter group ends with a sentence delimiter\n    const delimiterPattern = /([.?!… ]*)([.?!…])([\"'”’)}\\]]?)/g\n    const modifiedText = text.replace(delimiterPattern, (match, p1, p2, p3) => {\n      const placeholder = generateUniqueCode(DELIM, this.replacementCounter++)\n      this.delimiterMap.set(placeholder, p1 + p2 + p3)\n      return placeholder\n    })\n\n    return modifiedText\n  }\n\n  splitOnPlaceholders (text, placeholders) {\n    if (this.delimiterMap.size === 0) {\n      return [text]\n    }\n\n    const keys = Array.from(this.delimiterMap.keys())\n    const pattern = new RegExp(`(${keys.map(escapeRegExp).join('|')})`)\n    const parts = text.split(pattern)\n\n    const sentences = []\n    for (let i = 0; i < parts.length; i += 2) {\n      const sentence = parts[i]\n      const placeholder = parts[i + 1] || ''\n      sentences.push(sentence + placeholder)\n    }\n\n    return sentences\n  }\n\n  replaceNumbersWithCode (text) {\n    // Regular expression to match numbers, including decimal points and commas\n    const numberPattern = /\\b\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?\\b/g\n\n    const replacedText = text.replace(numberPattern, match => {\n      const code = generateUniqueCode(NUM, this.replacementCounter++)\n      this.replacementMap.set(code, match)\n      return code\n    })\n\n    return replacedText\n  }\n\n  revertReplacements (text) {\n    let originalText = text\n    for (const [placeholder, replacement] of this.replacementMap.entries()) {\n      const pattern = new RegExp(escapeRegExp(placeholder), 'g')\n      originalText = originalText.replace(pattern, replacement)\n    }\n\n    return originalText\n  }\n\n  revertDelimiters (text) {\n    let originalText = text\n    for (const [placeholder, replacement] of this.delimiterMap.entries()) {\n      const pattern = new RegExp(escapeRegExp(placeholder), 'g')\n      originalText = originalText.replace(pattern, replacement)\n    }\n\n    return originalText\n  }\n\n  tokenize (text) {\n    this.replacementCounter = 0\n    this.replacementMap = new Map()\n    this.delimiterMap = new Map()\n\n    DEBUG && console.log('---Start of sentence tokenization-----------------------')\n    DEBUG && console.log('Original input: >>>' + text + '<<<')\n    // Replace abbreviations\n    const result1 = this.replaceAbbreviations(text)\n    DEBUG && console.log('Phase 1: replacing abbreviations: ' + JSON.stringify(result1))\n\n    // Replace URIs\n    const result2 = this.replaceUrisWithPlaceholders(result1)\n    DEBUG && console.log('Phase 2: replacing URIs: ' + JSON.stringify(result2))\n\n    // Replace delimiters followed by optional quotes, brackets, and braces\n    const result3 = this.replaceNumbersWithCode(result2)\n    DEBUG && console.log('Phase 3: replacing numbers with placeholders: ' + JSON.stringify(result3))\n\n    // Replace delimiters followed by optional quotes, brackets, and braces\n    const result4 = this.replaceDelimitersWithPlaceholders(result3)\n    DEBUG && console.log('Phase 4: replacing delimiters with placeholders: ' + JSON.stringify(result4))\n\n    // Split on placeholders for sentence delimiters\n    const sentences = this.splitOnPlaceholders(result4)\n    DEBUG && console.log('Phase 5: splitting into sentences on placeholders: ' + JSON.stringify(sentences))\n\n    // Replace back all abbreviations, URIs, and delimiters\n    const newSentences = sentences.map(s => {\n      const s1 = this.revertReplacements(s)\n      return this.revertDelimiters(s1)\n    })\n    DEBUG && console.log('Phase 6: replacing back abbreviations, URIs, numbers and delimiters: ' + JSON.stringify(newSentences))\n\n    const trimmedSentences = this.trim(newSentences)\n    DEBUG && console.log('Phase 7: trimming array of empty sentences: ' + JSON.stringify(trimmedSentences))\n\n    const trimmedSentences2 = trimmedSentences.map(sent => this.trimSentences ? sent.trim() : sent)\n    DEBUG && console.log('Phase 8: trimming sentences from surrounding whitespace: ' + JSON.stringify(trimmedSentences2))\n    DEBUG && console.log('---End of sentence tokenization--------------------------')\n    DEBUG && console.log('---Replacement map---------------------------------------')\n    DEBUG && console.log([...this.replacementMap.entries()])\n    DEBUG && console.log('---Delimiter map-----------------------------------------')\n    DEBUG && console.log([...this.delimiterMap.entries()])\n    DEBUG && console.log('---------------------------------------------------------')\n\n    return trimmedSentences2\n  }\n}\n\nmodule.exports = SentenceTokenizer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}