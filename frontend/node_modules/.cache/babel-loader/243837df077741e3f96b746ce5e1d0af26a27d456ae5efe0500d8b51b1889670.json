{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Snowball = require(\"snowball\");\nconst string_counter_1 = require(\"../data_structures/string_counter\");\nconst string_dictionary_1 = require(\"../data_structures/string_dictionary\");\nclass Stemmer {\n  constructor(language = 'english') {\n    this.language = language;\n    this.wordStems = new string_dictionary_1.default();\n    this.stemCounts = new string_counter_1.default();\n    this.stemmer = new Snowball(language);\n  }\n  stem(word) {\n    let stem = this.wordStems.get(word);\n    if (!stem) {\n      this.stemmer.setCurrent(word);\n      this.stemmer.stem();\n      stem = this.stemmer.getCurrent();\n      this.wordStems.add(word, stem);\n    }\n    this.stemCounts.count(stem);\n    return stem;\n  }\n  getStems() {\n    return this.stemCounts.strings();\n  }\n}\nexports.default = Stemmer;","map":{"version":3,"names":["Snowball","require","string_counter_1","string_dictionary_1","Stemmer","constructor","language","wordStems","default","stemCounts","stemmer","stem","word","get","setCurrent","getCurrent","add","count","getStems","strings","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/rake-js/src/lib/tools/stemmer.ts"],"sourcesContent":["/**\n * This Stemmer is a class and not a function because it must be able to track\n * all processed words and stems for later usage. You can initialize one for\n * a given language and then use its `stem` method repeatedly. It keeps track\n * of both: words and their stems, simultanously.\n */\n\nimport * as Snowball from 'snowball'\nimport StringCounter from '../data_structures/string_counter'\nimport StringDictionary from '../data_structures/string_dictionary'\n\nexport default class Stemmer {\n  private wordStems = new StringDictionary()\n  private stemCounts = new StringCounter()\n  private stemmer: any\n\n  // for a list of available languages, see\n  // https://github.com/fortnightlabs/snowball-js/tree/master/stemmer/src/ext\n  constructor(private language: string = 'english') {\n    this.stemmer = new Snowball(language)\n  }\n\n  // process a given word, return the stem, and track metrics\n  public stem(word: string): string {\n    let stem = this.wordStems.get(word)\n    if (!stem) {\n      this.stemmer.setCurrent(word)\n      this.stemmer.stem()\n      stem = this.stemmer.getCurrent()\n      this.wordStems.add(word, stem)\n    }\n    this.stemCounts.count(stem)\n    return stem\n  }\n\n  public getStems(): string[] {\n    return this.stemCounts.strings()\n  }\n}\n"],"mappings":";;;;;AAOA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AACA,MAAAE,mBAAA,GAAAF,OAAA;AAEA,MAAAG,OAAA;EAOEC,YAAoBC,QAAA,GAAmB,SAAS;IAA5B,KAAAA,QAAQ,GAARA,QAAQ;IANpB,KAAAC,SAAS,GAAG,IAAIJ,mBAAA,CAAAK,OAAgB,EAAE;IAClC,KAAAC,UAAU,GAAG,IAAIP,gBAAA,CAAAM,OAAa,EAAE;IAMtC,IAAI,CAACE,OAAO,GAAG,IAAIV,QAAQ,CAACM,QAAQ,CAAC;EACvC;EAGOK,IAAIA,CAACC,IAAY;IACtB,IAAID,IAAI,GAAG,IAAI,CAACJ,SAAS,CAACM,GAAG,CAACD,IAAI,CAAC;IACnC,IAAI,CAACD,IAAI,EAAE;MACT,IAAI,CAACD,OAAO,CAACI,UAAU,CAACF,IAAI,CAAC;MAC7B,IAAI,CAACF,OAAO,CAACC,IAAI,EAAE;MACnBA,IAAI,GAAG,IAAI,CAACD,OAAO,CAACK,UAAU,EAAE;MAChC,IAAI,CAACR,SAAS,CAACS,GAAG,CAACJ,IAAI,EAAED,IAAI,CAAC;IAChC;IACA,IAAI,CAACF,UAAU,CAACQ,KAAK,CAACN,IAAI,CAAC;IAC3B,OAAOA,IAAI;EACb;EAEOO,QAAQA,CAAA;IACb,OAAO,IAAI,CAACT,UAAU,CAACU,OAAO,EAAE;EAClC;;AA1BFC,OAAA,CAAAZ,OAAA,GAAAJ,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}