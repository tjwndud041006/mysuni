{"ast":null,"code":"/** alphabetical order */\nconst alpha = (a, b) => {\n  if (a.normal < b.normal) {\n    return -1;\n  }\n  if (a.normal > b.normal) {\n    return 1;\n  }\n  return 0;\n};\n\n/** count the # of characters of each match */\nconst length = (a, b) => {\n  let left = a.normal.trim().length;\n  let right = b.normal.trim().length;\n  if (left < right) {\n    return 1;\n  }\n  if (left > right) {\n    return -1;\n  }\n  return 0;\n};\n\n/** count the # of terms in each match */\nconst wordCount = (a, b) => {\n  if (a.words < b.words) {\n    return 1;\n  }\n  if (a.words > b.words) {\n    return -1;\n  }\n  return 0;\n};\n\n/** count the # of terms in each match */\nconst sequential = (a, b) => {\n  if (a[0] < b[0]) {\n    return 1;\n  }\n  if (a[0] > b[0]) {\n    return -1;\n  }\n  return a[1] > b[1] ? 1 : -1;\n};\n\n/** sort by # of duplicates in the document*/\nconst byFreq = function (arr) {\n  let counts = {};\n  arr.forEach(o => {\n    counts[o.normal] = counts[o.normal] || 0;\n    counts[o.normal] += 1;\n  });\n  // sort by freq\n  arr.sort((a, b) => {\n    let left = counts[a.normal];\n    let right = counts[b.normal];\n    if (left < right) {\n      return 1;\n    }\n    if (left > right) {\n      return -1;\n    }\n    return 0;\n  });\n  return arr;\n};\nexport default {\n  alpha,\n  length,\n  wordCount,\n  sequential,\n  byFreq\n};","map":{"version":3,"names":["alpha","a","b","normal","length","left","trim","right","wordCount","words","sequential","byFreq","arr","counts","forEach","o","sort"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/change/api/lib/_sort.js"],"sourcesContent":["/** alphabetical order */\nconst alpha = (a, b) => {\n  if (a.normal < b.normal) {\n    return -1\n  }\n  if (a.normal > b.normal) {\n    return 1\n  }\n  return 0\n}\n\n/** count the # of characters of each match */\nconst length = (a, b) => {\n  let left = a.normal.trim().length\n  let right = b.normal.trim().length\n  if (left < right) {\n    return 1\n  }\n  if (left > right) {\n    return -1\n  }\n  return 0\n}\n\n/** count the # of terms in each match */\nconst wordCount = (a, b) => {\n  if (a.words < b.words) {\n    return 1\n  }\n  if (a.words > b.words) {\n    return -1\n  }\n  return 0\n}\n\n/** count the # of terms in each match */\nconst sequential = (a, b) => {\n  if (a[0] < b[0]) {\n    return 1\n  }\n  if (a[0] > b[0]) {\n    return -1\n  }\n  return a[1] > b[1] ? 1 : -1\n}\n\n/** sort by # of duplicates in the document*/\nconst byFreq = function (arr) {\n  let counts = {}\n  arr.forEach(o => {\n    counts[o.normal] = counts[o.normal] || 0\n    counts[o.normal] += 1\n  })\n  // sort by freq\n  arr.sort((a, b) => {\n    let left = counts[a.normal]\n    let right = counts[b.normal]\n    if (left < right) {\n      return 1\n    }\n    if (left > right) {\n      return -1\n    }\n    return 0\n  })\n  return arr\n}\n\nexport default { alpha, length, wordCount, sequential, byFreq }\n"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EACtB,IAAID,CAAC,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM,EAAE;IACvB,OAAO,CAAC,CAAC;EACX;EACA,IAAIF,CAAC,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM,EAAE;IACvB,OAAO,CAAC;EACV;EACA,OAAO,CAAC;AACV,CAAC;;AAED;AACA,MAAMC,MAAM,GAAGA,CAACH,CAAC,EAAEC,CAAC,KAAK;EACvB,IAAIG,IAAI,GAAGJ,CAAC,CAACE,MAAM,CAACG,IAAI,CAAC,CAAC,CAACF,MAAM;EACjC,IAAIG,KAAK,GAAGL,CAAC,CAACC,MAAM,CAACG,IAAI,CAAC,CAAC,CAACF,MAAM;EAClC,IAAIC,IAAI,GAAGE,KAAK,EAAE;IAChB,OAAO,CAAC;EACV;EACA,IAAIF,IAAI,GAAGE,KAAK,EAAE;IAChB,OAAO,CAAC,CAAC;EACX;EACA,OAAO,CAAC;AACV,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGA,CAACP,CAAC,EAAEC,CAAC,KAAK;EAC1B,IAAID,CAAC,CAACQ,KAAK,GAAGP,CAAC,CAACO,KAAK,EAAE;IACrB,OAAO,CAAC;EACV;EACA,IAAIR,CAAC,CAACQ,KAAK,GAAGP,CAAC,CAACO,KAAK,EAAE;IACrB,OAAO,CAAC,CAAC;EACX;EACA,OAAO,CAAC;AACV,CAAC;;AAED;AACA,MAAMC,UAAU,GAAGA,CAACT,CAAC,EAAEC,CAAC,KAAK;EAC3B,IAAID,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE;IACf,OAAO,CAAC;EACV;EACA,IAAID,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE;IACf,OAAO,CAAC,CAAC;EACX;EACA,OAAOD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC;;AAED;AACA,MAAMS,MAAM,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC5B,IAAIC,MAAM,GAAG,CAAC,CAAC;EACfD,GAAG,CAACE,OAAO,CAACC,CAAC,IAAI;IACfF,MAAM,CAACE,CAAC,CAACZ,MAAM,CAAC,GAAGU,MAAM,CAACE,CAAC,CAACZ,MAAM,CAAC,IAAI,CAAC;IACxCU,MAAM,CAACE,CAAC,CAACZ,MAAM,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC;EACF;EACAS,GAAG,CAACI,IAAI,CAAC,CAACf,CAAC,EAAEC,CAAC,KAAK;IACjB,IAAIG,IAAI,GAAGQ,MAAM,CAACZ,CAAC,CAACE,MAAM,CAAC;IAC3B,IAAII,KAAK,GAAGM,MAAM,CAACX,CAAC,CAACC,MAAM,CAAC;IAC5B,IAAIE,IAAI,GAAGE,KAAK,EAAE;MAChB,OAAO,CAAC;IACV;IACA,IAAIF,IAAI,GAAGE,KAAK,EAAE;MAChB,OAAO,CAAC,CAAC;IACX;IACA,OAAO,CAAC;EACV,CAAC,CAAC;EACF,OAAOK,GAAG;AACZ,CAAC;AAED,eAAe;EAAEZ,KAAK;EAAEI,MAAM;EAAEI,SAAS;EAAEE,UAAU;EAAEC;AAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}