{"ast":null,"code":"const find = function (doc) {\n  let m = doc.match('(#Place|#Address)+');\n\n  // split all commas except for 'paris, france'\n  let splits = m.match('@hasComma');\n  splits = splits.filter(c => {\n    // split 'europe, china'\n    if (c.has('(asia|africa|europe|america)$')) {\n      return true;\n    }\n    // don't split 'paris, france'\n    if (c.has('(#City|#Region|#ProperNoun)$') && c.after('^(#Country|#Region)').found) {\n      return false;\n    }\n    return true;\n  });\n  m = m.splitAfter(splits);\n  return m;\n};\nexport default find;","map":{"version":3,"names":["find","doc","m","match","splits","filter","c","has","after","found","splitAfter"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/topics/places/find.js"],"sourcesContent":["const find = function (doc) {\n  let m = doc.match('(#Place|#Address)+')\n\n  // split all commas except for 'paris, france'\n  let splits = m.match('@hasComma')\n  splits = splits.filter(c => {\n    // split 'europe, china'\n    if (c.has('(asia|africa|europe|america)$')) {\n      return true\n    }\n    // don't split 'paris, france'\n    if (c.has('(#City|#Region|#ProperNoun)$') && c.after('^(#Country|#Region)').found) {\n      return false\n    }\n    return true\n  })\n  m = m.splitAfter(splits)\n  return m\n}\nexport default find\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC1B,IAAIC,CAAC,GAAGD,GAAG,CAACE,KAAK,CAAC,oBAAoB,CAAC;;EAEvC;EACA,IAAIC,MAAM,GAAGF,CAAC,CAACC,KAAK,CAAC,WAAW,CAAC;EACjCC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACC,CAAC,IAAI;IAC1B;IACA,IAAIA,CAAC,CAACC,GAAG,CAAC,+BAA+B,CAAC,EAAE;MAC1C,OAAO,IAAI;IACb;IACA;IACA,IAAID,CAAC,CAACC,GAAG,CAAC,8BAA8B,CAAC,IAAID,CAAC,CAACE,KAAK,CAAC,qBAAqB,CAAC,CAACC,KAAK,EAAE;MACjF,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC;EACFP,CAAC,GAAGA,CAAC,CAACQ,UAAU,CAACN,MAAM,CAAC;EACxB,OAAOF,CAAC;AACV,CAAC;AACD,eAAeF,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}