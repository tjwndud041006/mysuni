{"ast":null,"code":"const {\n  getStream,\n  getSecureStream\n} = getStreamFuncs();\nmodule.exports = {\n  /**\n   * Get a socket stream compatible with the current runtime environment.\n   * @returns {Duplex}\n   */\n  getStream,\n  /**\n   * Get a TLS secured socket, compatible with the current environment,\n   * using the socket and other settings given in `options`.\n   * @returns {Duplex}\n   */\n  getSecureStream\n};\n\n/**\n * The stream functions that work in Node.js\n */\nfunction getNodejsStreamFuncs() {\n  function getStream(ssl) {\n    const net = require('net');\n    return new net.Socket();\n  }\n  function getSecureStream(options) {\n    const tls = require('tls');\n    return tls.connect(options);\n  }\n  return {\n    getStream,\n    getSecureStream\n  };\n}\n\n/**\n * The stream functions that work in Cloudflare Workers\n */\nfunction getCloudflareStreamFuncs() {\n  function getStream(ssl) {\n    const {\n      CloudflareSocket\n    } = require('pg-cloudflare');\n    return new CloudflareSocket(ssl);\n  }\n  function getSecureStream(options) {\n    options.socket.startTls(options);\n    return options.socket;\n  }\n  return {\n    getStream,\n    getSecureStream\n  };\n}\n\n/**\n * Are we running in a Cloudflare Worker?\n *\n * @returns true if the code is currently running inside a Cloudflare Worker.\n */\nfunction isCloudflareRuntime() {\n  // Since 2022-03-21 the `global_navigator` compatibility flag is on for Cloudflare Workers\n  // which means that `navigator.userAgent` will be defined.\n  // eslint-disable-next-line no-undef\n  if (typeof navigator === 'object' && navigator !== null && typeof navigator.userAgent === 'string') {\n    // eslint-disable-next-line no-undef\n    return navigator.userAgent === 'Cloudflare-Workers';\n  }\n  // In case `navigator` or `navigator.userAgent` is not defined then try a more sneaky approach\n  if (typeof Response === 'function') {\n    const resp = new Response(null, {\n      cf: {\n        thing: true\n      }\n    });\n    if (typeof resp.cf === 'object' && resp.cf !== null && resp.cf.thing) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getStreamFuncs() {\n  if (isCloudflareRuntime()) {\n    return getCloudflareStreamFuncs();\n  }\n  return getNodejsStreamFuncs();\n}","map":{"version":3,"names":["getStream","getSecureStream","getStreamFuncs","module","exports","getNodejsStreamFuncs","ssl","net","require","Socket","options","tls","connect","getCloudflareStreamFuncs","CloudflareSocket","socket","startTls","isCloudflareRuntime","navigator","userAgent","Response","resp","cf","thing"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/pg/lib/stream.js"],"sourcesContent":["const { getStream, getSecureStream } = getStreamFuncs()\n\nmodule.exports = {\n  /**\n   * Get a socket stream compatible with the current runtime environment.\n   * @returns {Duplex}\n   */\n  getStream,\n  /**\n   * Get a TLS secured socket, compatible with the current environment,\n   * using the socket and other settings given in `options`.\n   * @returns {Duplex}\n   */\n  getSecureStream,\n}\n\n/**\n * The stream functions that work in Node.js\n */\nfunction getNodejsStreamFuncs() {\n  function getStream(ssl) {\n    const net = require('net')\n    return new net.Socket()\n  }\n\n  function getSecureStream(options) {\n    const tls = require('tls')\n    return tls.connect(options)\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * The stream functions that work in Cloudflare Workers\n */\nfunction getCloudflareStreamFuncs() {\n  function getStream(ssl) {\n    const { CloudflareSocket } = require('pg-cloudflare')\n    return new CloudflareSocket(ssl)\n  }\n\n  function getSecureStream(options) {\n    options.socket.startTls(options)\n    return options.socket\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * Are we running in a Cloudflare Worker?\n *\n * @returns true if the code is currently running inside a Cloudflare Worker.\n */\nfunction isCloudflareRuntime() {\n  // Since 2022-03-21 the `global_navigator` compatibility flag is on for Cloudflare Workers\n  // which means that `navigator.userAgent` will be defined.\n  // eslint-disable-next-line no-undef\n  if (typeof navigator === 'object' && navigator !== null && typeof navigator.userAgent === 'string') {\n    // eslint-disable-next-line no-undef\n    return navigator.userAgent === 'Cloudflare-Workers'\n  }\n  // In case `navigator` or `navigator.userAgent` is not defined then try a more sneaky approach\n  if (typeof Response === 'function') {\n    const resp = new Response(null, { cf: { thing: true } })\n    if (typeof resp.cf === 'object' && resp.cf !== null && resp.cf.thing) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction getStreamFuncs() {\n  if (isCloudflareRuntime()) {\n    return getCloudflareStreamFuncs()\n  }\n  return getNodejsStreamFuncs()\n}\n"],"mappings":"AAAA,MAAM;EAAEA,SAAS;EAAEC;AAAgB,CAAC,GAAGC,cAAc,CAAC,CAAC;AAEvDC,MAAM,CAACC,OAAO,GAAG;EACf;AACF;AACA;AACA;EACEJ,SAAS;EACT;AACF;AACA;AACA;AACA;EACEC;AACF,CAAC;;AAED;AACA;AACA;AACA,SAASI,oBAAoBA,CAAA,EAAG;EAC9B,SAASL,SAASA,CAACM,GAAG,EAAE;IACtB,MAAMC,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;IAC1B,OAAO,IAAID,GAAG,CAACE,MAAM,CAAC,CAAC;EACzB;EAEA,SAASR,eAAeA,CAACS,OAAO,EAAE;IAChC,MAAMC,GAAG,GAAGH,OAAO,CAAC,KAAK,CAAC;IAC1B,OAAOG,GAAG,CAACC,OAAO,CAACF,OAAO,CAAC;EAC7B;EACA,OAAO;IACLV,SAAS;IACTC;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA,SAASY,wBAAwBA,CAAA,EAAG;EAClC,SAASb,SAASA,CAACM,GAAG,EAAE;IACtB,MAAM;MAAEQ;IAAiB,CAAC,GAAGN,OAAO,CAAC,eAAe,CAAC;IACrD,OAAO,IAAIM,gBAAgB,CAACR,GAAG,CAAC;EAClC;EAEA,SAASL,eAAeA,CAACS,OAAO,EAAE;IAChCA,OAAO,CAACK,MAAM,CAACC,QAAQ,CAACN,OAAO,CAAC;IAChC,OAAOA,OAAO,CAACK,MAAM;EACvB;EACA,OAAO;IACLf,SAAS;IACTC;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASgB,mBAAmBA,CAAA,EAAG;EAC7B;EACA;EACA;EACA,IAAI,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,KAAK,IAAI,IAAI,OAAOA,SAAS,CAACC,SAAS,KAAK,QAAQ,EAAE;IAClG;IACA,OAAOD,SAAS,CAACC,SAAS,KAAK,oBAAoB;EACrD;EACA;EACA,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;IAClC,MAAMC,IAAI,GAAG,IAAID,QAAQ,CAAC,IAAI,EAAE;MAAEE,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAK;IAAE,CAAC,CAAC;IACxD,IAAI,OAAOF,IAAI,CAACC,EAAE,KAAK,QAAQ,IAAID,IAAI,CAACC,EAAE,KAAK,IAAI,IAAID,IAAI,CAACC,EAAE,CAACC,KAAK,EAAE;MACpE,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;AAEA,SAASrB,cAAcA,CAAA,EAAG;EACxB,IAAIe,mBAAmB,CAAC,CAAC,EAAE;IACzB,OAAOJ,wBAAwB,CAAC,CAAC;EACnC;EACA,OAAOR,oBAAoB,CAAC,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}