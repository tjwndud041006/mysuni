{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst lodash_1 = require(\"lodash\");\nclass Phrase {\n  constructor() {\n    this.words = [];\n    this.stems = [];\n    this.score = 0.0;\n  }\n  isEmpty() {\n    return this.words.length === 0;\n  }\n  pushWord(word) {\n    if (word && word.length > 1) {\n      this.words.push(word);\n    }\n  }\n  createText() {\n    this.text = this.words.join(' ');\n  }\n  calculateStems(stemmer) {\n    this.stems = lodash_1.map(this.words, word => stemmer.stem(word));\n  }\n  calculateScore(stemIndex) {\n    let sum = 0.0;\n    for (const stem of this.stems) {\n      sum += stemIndex[stem];\n    }\n    this.score = sum;\n  }\n  multiplyWith(amount) {\n    this.score *= amount;\n  }\n}\nexports.default = Phrase;","map":{"version":3,"names":["lodash_1","require","Phrase","constructor","words","stems","score","isEmpty","length","pushWord","word","push","createText","text","join","calculateStems","stemmer","map","stem","calculateScore","stemIndex","sum","multiplyWith","amount","exports","default"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/rake-js/src/lib/data_structures/phrase.ts"],"sourcesContent":["import { map } from 'lodash'\nimport Stemmer from '../tools/stemmer'\n\n/**\n * This is a container holding a bag of words and their stems. All words\n * together carry a combined meaning, and can be\n */\nexport default class Phrase {\n  public text: string\n  public words: string[] = []\n  public stems: string[] = []\n  public score: number = 0.0\n\n  public isEmpty() {\n    return this.words.length === 0\n  }\n\n  public pushWord(word: string) {\n    if (word && word.length > 1) {\n      this.words.push(word)\n    }\n  }\n\n  public createText() {\n    this.text = this.words.join(' ')\n  }\n\n  public calculateStems(stemmer: Stemmer) {\n    this.stems = map(this.words, word => stemmer.stem(word))\n  }\n\n  public calculateScore(stemIndex: { [stem: string]: number }) {\n    let sum = 0.0\n    for (const stem of this.stems) {\n      sum += stemIndex[stem]\n    }\n    this.score = sum\n  }\n\n  public multiplyWith(amount: number) {\n    this.score *= amount\n  }\n}\n"],"mappings":";;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAOA,MAAAC,MAAA;EAAAC,YAAA;IAES,KAAAC,KAAK,GAAa,EAAE;IACpB,KAAAC,KAAK,GAAa,EAAE;IACpB,KAAAC,KAAK,GAAW,GAAG;EA+B5B;EA7BSC,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACH,KAAK,CAACI,MAAM,KAAK,CAAC;EAChC;EAEOC,QAAQA,CAACC,IAAY;IAC1B,IAAIA,IAAI,IAAIA,IAAI,CAACF,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAACJ,KAAK,CAACO,IAAI,CAACD,IAAI,CAAC;IACvB;EACF;EAEOE,UAAUA,CAAA;IACf,IAAI,CAACC,IAAI,GAAG,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,GAAG,CAAC;EAClC;EAEOC,cAAcA,CAACC,OAAgB;IACpC,IAAI,CAACX,KAAK,GAAGL,QAAA,CAAAiB,GAAG,CAAC,IAAI,CAACb,KAAK,EAAEM,IAAI,IAAIM,OAAO,CAACE,IAAI,CAACR,IAAI,CAAC,CAAC;EAC1D;EAEOS,cAAcA,CAACC,SAAqC;IACzD,IAAIC,GAAG,GAAG,GAAG;IACb,KAAK,MAAMH,IAAI,IAAI,IAAI,CAACb,KAAK,EAAE;MAC7BgB,GAAG,IAAID,SAAS,CAACF,IAAI,CAAC;IACxB;IACA,IAAI,CAACZ,KAAK,GAAGe,GAAG;EAClB;EAEOC,YAAYA,CAACC,MAAc;IAChC,IAAI,CAACjB,KAAK,IAAIiB,MAAM;EACtB;;AAlCFC,OAAA,CAAAC,OAAA,GAAAvB,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}