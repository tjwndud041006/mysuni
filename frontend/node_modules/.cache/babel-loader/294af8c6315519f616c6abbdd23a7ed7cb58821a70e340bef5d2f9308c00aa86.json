{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst lodash_1 = require(\"lodash\");\nclass Preprocessor {\n  constructor(delimiters) {\n    this.delimiters = delimiters;\n    this.buildDelimiterRegexp();\n  }\n  process(corpus) {\n    return corpus.replace(/\\\\[nrt]/g, '. ').split(this.splitter).filter(Boolean);\n  }\n  buildDelimiterRegexp() {\n    const patterns = lodash_1.map(this.delimiters, d => '(' + d + ')');\n    const expression = '[' + patterns.join('') + ']';\n    this.splitter = new RegExp(expression, 'g');\n  }\n}\nexports.default = Preprocessor;","map":{"version":3,"names":["lodash_1","require","Preprocessor","constructor","delimiters","buildDelimiterRegexp","process","corpus","replace","split","splitter","filter","Boolean","patterns","map","d","expression","join","RegExp","exports","default"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/rake-js/src/lib/tools/preprocessor.ts"],"sourcesContent":["/**\n * This module can be used to remove non-word characters and non-content words\n * from strings. It is able to detect the natural language on its own.\n */\n\nimport { map } from 'lodash'\n\nexport default class Preprocessor {\n  private splitter: RegExp\n\n  constructor(private delimiters: string[]) {\n    this.buildDelimiterRegexp()\n  }\n\n  public process(corpus: string): string[] {\n    return corpus.replace(/\\\\[nrt]/g, '. ').split(this.splitter).filter(Boolean)\n  }\n\n  private buildDelimiterRegexp() {\n    const patterns = map(this.delimiters, d => '(' + d + ')')\n    const expression = '[' + patterns.join('') + ']'\n    this.splitter = new RegExp(expression, 'g')\n  }\n}\n"],"mappings":";;;;;AAKA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,YAAA;EAGEC,YAAoBC,UAAoB;IAApB,KAAAA,UAAU,GAAVA,UAAU;IAC5B,IAAI,CAACC,oBAAoB,EAAE;EAC7B;EAEOC,OAAOA,CAACC,MAAc;IAC3B,OAAOA,MAAM,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAACC,KAAK,CAAC,IAAI,CAACC,QAAQ,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EAC9E;EAEQP,oBAAoBA,CAAA;IAC1B,MAAMQ,QAAQ,GAAGb,QAAA,CAAAc,GAAG,CAAC,IAAI,CAACV,UAAU,EAAEW,CAAC,IAAI,GAAG,GAAGA,CAAC,GAAG,GAAG,CAAC;IACzD,MAAMC,UAAU,GAAG,GAAG,GAAGH,QAAQ,CAACI,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG;IAChD,IAAI,CAACP,QAAQ,GAAG,IAAIQ,MAAM,CAACF,UAAU,EAAE,GAAG,CAAC;EAC7C;;AAfFG,OAAA,CAAAC,OAAA,GAAAlB,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}