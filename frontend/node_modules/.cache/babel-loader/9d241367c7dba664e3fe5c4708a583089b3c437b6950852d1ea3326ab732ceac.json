{"ast":null,"code":"'use strict';\n\nconst Client = require('./client');\nconst defaults = require('./defaults');\nconst Connection = require('./connection');\nconst Result = require('./result');\nconst utils = require('./utils');\nconst Pool = require('pg-pool');\nconst TypeOverrides = require('./type-overrides');\nconst {\n  DatabaseError\n} = require('pg-protocol');\nconst {\n  escapeIdentifier,\n  escapeLiteral\n} = require('./utils');\nconst poolFactory = Client => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client);\n    }\n  };\n};\nconst PG = function (clientConstructor) {\n  this.defaults = defaults;\n  this.Client = clientConstructor;\n  this.Query = this.Client.Query;\n  this.Pool = poolFactory(this.Client);\n  this._pools = [];\n  this.Connection = Connection;\n  this.types = require('pg-types');\n  this.DatabaseError = DatabaseError;\n  this.TypeOverrides = TypeOverrides;\n  this.escapeIdentifier = escapeIdentifier;\n  this.escapeLiteral = escapeLiteral;\n  this.Result = Result;\n  this.utils = utils;\n};\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'));\n} else {\n  module.exports = new PG(Client);\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n    get() {\n      let native = null;\n      try {\n        native = new PG(require('./native'));\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err;\n        }\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, 'native', {\n        value: native\n      });\n      return native;\n    }\n  });\n}","map":{"version":3,"names":["Client","require","defaults","Connection","Result","utils","Pool","TypeOverrides","DatabaseError","escapeIdentifier","escapeLiteral","poolFactory","BoundPool","constructor","options","PG","clientConstructor","Query","_pools","types","process","env","NODE_PG_FORCE_NATIVE","module","exports","Object","defineProperty","configurable","enumerable","get","native","err","code","value"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/pg/lib/index.js"],"sourcesContent":["'use strict'\n\nconst Client = require('./client')\nconst defaults = require('./defaults')\nconst Connection = require('./connection')\nconst Result = require('./result')\nconst utils = require('./utils')\nconst Pool = require('pg-pool')\nconst TypeOverrides = require('./type-overrides')\nconst { DatabaseError } = require('pg-protocol')\nconst { escapeIdentifier, escapeLiteral } = require('./utils')\n\nconst poolFactory = (Client) => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client)\n    }\n  }\n}\n\nconst PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = require('pg-types')\n  this.DatabaseError = DatabaseError\n  this.TypeOverrides = TypeOverrides\n  this.escapeIdentifier = escapeIdentifier\n  this.escapeLiteral = escapeLiteral\n  this.Result = Result\n  this.utils = utils\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n    get() {\n      let native = null\n      try {\n        native = new PG(require('./native'))\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err\n        }\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, 'native', {\n        value: native,\n      })\n\n      return native\n    },\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMK,IAAI,GAAGL,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAMM,aAAa,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAM;EAAEO;AAAc,CAAC,GAAGP,OAAO,CAAC,aAAa,CAAC;AAChD,MAAM;EAAEQ,gBAAgB;EAAEC;AAAc,CAAC,GAAGT,OAAO,CAAC,SAAS,CAAC;AAE9D,MAAMU,WAAW,GAAIX,MAAM,IAAK;EAC9B,OAAO,MAAMY,SAAS,SAASN,IAAI,CAAC;IAClCO,WAAWA,CAACC,OAAO,EAAE;MACnB,KAAK,CAACA,OAAO,EAAEd,MAAM,CAAC;IACxB;EACF,CAAC;AACH,CAAC;AAED,MAAMe,EAAE,GAAG,SAAAA,CAAUC,iBAAiB,EAAE;EACtC,IAAI,CAACd,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACF,MAAM,GAAGgB,iBAAiB;EAC/B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACjB,MAAM,CAACiB,KAAK;EAC9B,IAAI,CAACX,IAAI,GAAGK,WAAW,CAAC,IAAI,CAACX,MAAM,CAAC;EACpC,IAAI,CAACkB,MAAM,GAAG,EAAE;EAChB,IAAI,CAACf,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACgB,KAAK,GAAGlB,OAAO,CAAC,UAAU,CAAC;EAChC,IAAI,CAACO,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACD,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACE,gBAAgB,GAAGA,gBAAgB;EACxC,IAAI,CAACC,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACN,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;AACpB,CAAC;AAED,IAAI,OAAOe,OAAO,CAACC,GAAG,CAACC,oBAAoB,KAAK,WAAW,EAAE;EAC3DC,MAAM,CAACC,OAAO,GAAG,IAAIT,EAAE,CAACd,OAAO,CAAC,UAAU,CAAC,CAAC;AAC9C,CAAC,MAAM;EACLsB,MAAM,CAACC,OAAO,GAAG,IAAIT,EAAE,CAACf,MAAM,CAAC;;EAE/B;EACAyB,MAAM,CAACC,cAAc,CAACH,MAAM,CAACC,OAAO,EAAE,QAAQ,EAAE;IAC9CG,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE,KAAK;IACjBC,GAAGA,CAAA,EAAG;MACJ,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAI;QACFA,MAAM,GAAG,IAAIf,EAAE,CAACd,OAAO,CAAC,UAAU,CAAC,CAAC;MACtC,CAAC,CAAC,OAAO8B,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,kBAAkB,EAAE;UACnC,MAAMD,GAAG;QACX;MACF;;MAEA;MACAN,MAAM,CAACC,cAAc,CAACH,MAAM,CAACC,OAAO,EAAE,QAAQ,EAAE;QAC9CS,KAAK,EAAEH;MACT,CAAC,CAAC;MAEF,OAAOA,MAAM;IACf;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}