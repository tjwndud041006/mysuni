{"ast":null,"code":"const api = function (View) {\n  /** speedy match a sequence of matches */\n  View.prototype.sweep = function (net, opts = {}) {\n    const {\n      world,\n      docs\n    } = this;\n    const {\n      methods\n    } = world;\n    let found = methods.one.bulkMatch(docs, net, this.methods, opts);\n\n    // apply any changes\n    if (opts.tagger !== false) {\n      methods.one.bulkTagger(found, docs, this.world);\n    }\n    // fix the pointers\n    // collect all found results into a View\n    found = found.map(o => {\n      let ptr = o.pointer;\n      let term = docs[ptr[0]][ptr[1]];\n      let len = ptr[2] - ptr[1];\n      if (term.index) {\n        o.pointer = [term.index[0], term.index[1], ptr[1] + len];\n      }\n      return o;\n    });\n    let ptrs = found.map(o => o.pointer);\n    // cleanup results a bit\n    found = found.map(obj => {\n      obj.view = this.update([obj.pointer]);\n      delete obj.regs;\n      delete obj.needs;\n      delete obj.pointer;\n      delete obj._expanded;\n      return obj;\n    });\n    return {\n      view: this.update(ptrs),\n      found\n    };\n  };\n};\nexport default api;","map":{"version":3,"names":["api","View","prototype","sweep","net","opts","world","docs","methods","found","one","bulkMatch","tagger","bulkTagger","map","o","ptr","pointer","term","len","index","ptrs","obj","view","update","regs","needs","_expanded"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/sweep/api.js"],"sourcesContent":["const api = function (View) {\n\n  /** speedy match a sequence of matches */\n  View.prototype.sweep = function (net, opts = {}) {\n    const { world, docs } = this\n    const { methods } = world\n    let found = methods.one.bulkMatch(docs, net, this.methods, opts)\n\n    // apply any changes\n    if (opts.tagger !== false) {\n      methods.one.bulkTagger(found, docs, this.world)\n    }\n    // fix the pointers\n    // collect all found results into a View\n    found = found.map(o => {\n      let ptr = o.pointer\n      let term = docs[ptr[0]][ptr[1]]\n      let len = ptr[2] - ptr[1]\n      if (term.index) {\n        o.pointer = [\n          term.index[0],\n          term.index[1],\n          ptr[1] + len\n        ]\n      }\n      return o\n    })\n    let ptrs = found.map(o => o.pointer)\n    // cleanup results a bit\n    found = found.map(obj => {\n      obj.view = this.update([obj.pointer])\n      delete obj.regs\n      delete obj.needs\n      delete obj.pointer\n      delete obj._expanded\n      return obj\n    })\n    return {\n      view: this.update(ptrs),\n      found\n    }\n  }\n\n}\nexport default api"],"mappings":"AAAA,MAAMA,GAAG,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAE1B;EACAA,IAAI,CAACC,SAAS,CAACC,KAAK,GAAG,UAAUC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC/C,MAAM;MAAEC,KAAK;MAAEC;IAAK,CAAC,GAAG,IAAI;IAC5B,MAAM;MAAEC;IAAQ,CAAC,GAAGF,KAAK;IACzB,IAAIG,KAAK,GAAGD,OAAO,CAACE,GAAG,CAACC,SAAS,CAACJ,IAAI,EAAEH,GAAG,EAAE,IAAI,CAACI,OAAO,EAAEH,IAAI,CAAC;;IAEhE;IACA,IAAIA,IAAI,CAACO,MAAM,KAAK,KAAK,EAAE;MACzBJ,OAAO,CAACE,GAAG,CAACG,UAAU,CAACJ,KAAK,EAAEF,IAAI,EAAE,IAAI,CAACD,KAAK,CAAC;IACjD;IACA;IACA;IACAG,KAAK,GAAGA,KAAK,CAACK,GAAG,CAACC,CAAC,IAAI;MACrB,IAAIC,GAAG,GAAGD,CAAC,CAACE,OAAO;MACnB,IAAIC,IAAI,GAAGX,IAAI,CAACS,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/B,IAAIG,GAAG,GAAGH,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;MACzB,IAAIE,IAAI,CAACE,KAAK,EAAE;QACdL,CAAC,CAACE,OAAO,GAAG,CACVC,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,EACbF,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGG,GAAG,CACb;MACH;MACA,OAAOJ,CAAC;IACV,CAAC,CAAC;IACF,IAAIM,IAAI,GAAGZ,KAAK,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACE,OAAO,CAAC;IACpC;IACAR,KAAK,GAAGA,KAAK,CAACK,GAAG,CAACQ,GAAG,IAAI;MACvBA,GAAG,CAACC,IAAI,GAAG,IAAI,CAACC,MAAM,CAAC,CAACF,GAAG,CAACL,OAAO,CAAC,CAAC;MACrC,OAAOK,GAAG,CAACG,IAAI;MACf,OAAOH,GAAG,CAACI,KAAK;MAChB,OAAOJ,GAAG,CAACL,OAAO;MAClB,OAAOK,GAAG,CAACK,SAAS;MACpB,OAAOL,GAAG;IACZ,CAAC,CAAC;IACF,OAAO;MACLC,IAAI,EAAE,IAAI,CAACC,MAAM,CAACH,IAAI,CAAC;MACvBZ;IACF,CAAC;EACH,CAAC;AAEH,CAAC;AACD,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}