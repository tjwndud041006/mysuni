{"ast":null,"code":"const beside = {\n  there: true,\n  //go there\n  this: true,\n  //try this\n  it: true,\n  //do it\n  him: true,\n  her: true,\n  us: true //tell us\n};\n\n// '[place] tea bags in hot water'\nconst imperative = function (terms, world) {\n  const setTag = world.methods.one.setTag;\n  const multiWords = world.model.one._multiCache || {};\n  let t = terms[0];\n  let isRight = t.switch === 'Noun|Verb' || t.tags.has('Infinitive');\n  if (isRight && terms.length >= 2) {\n    // ensure rest of sentence is ok\n    if (terms.length < 4 && !beside[terms[1].normal]) {\n      return;\n    }\n    // avoid multi-noun words like '[board] room'\n    if (!t.tags.has('PhrasalVerb') && multiWords.hasOwnProperty(t.normal)) {\n      return;\n    }\n    // is the next word a noun? - 'compile information ..'\n    let nextNoun = terms[1].tags.has('Noun') || terms[1].tags.has('Determiner');\n    if (nextNoun) {\n      // ensure no soon-verb -  'waste materials are ..'\n      let soonVerb = terms.slice(1, 3).some(term => term.tags.has('Verb'));\n      if (!soonVerb || t.tags.has('#PhrasalVerb')) {\n        setTag([t], 'Imperative', world, null, '3-[imperative]');\n      }\n    }\n  }\n};\nexport default imperative;","map":{"version":3,"names":["beside","there","this","it","him","her","us","imperative","terms","world","setTag","methods","one","multiWords","model","_multiCache","t","isRight","switch","tags","has","length","normal","hasOwnProperty","nextNoun","soonVerb","slice","some","term"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/08-imperative.js"],"sourcesContent":["const beside = {\n  there: true, //go there\n  this: true, //try this\n  it: true, //do it\n  him: true,\n  her: true,\n  us: true, //tell us\n}\n\n// '[place] tea bags in hot water'\nconst imperative = function (terms, world) {\n  const setTag = world.methods.one.setTag\n  const multiWords = world.model.one._multiCache || {}\n  let t = terms[0]\n  let isRight = t.switch === 'Noun|Verb' || t.tags.has('Infinitive')\n  if (isRight && terms.length >= 2) {\n    // ensure rest of sentence is ok\n    if (terms.length < 4 && !beside[terms[1].normal]) {\n      return\n    }\n    // avoid multi-noun words like '[board] room'\n    if (!t.tags.has('PhrasalVerb') && multiWords.hasOwnProperty(t.normal)) {\n      return\n    }\n    // is the next word a noun? - 'compile information ..'\n    let nextNoun = terms[1].tags.has('Noun') || terms[1].tags.has('Determiner')\n    if (nextNoun) {\n      // ensure no soon-verb -  'waste materials are ..'\n      let soonVerb = terms.slice(1, 3).some(term => term.tags.has('Verb'))\n      if (!soonVerb || t.tags.has('#PhrasalVerb')) {\n        setTag([t], 'Imperative', world, null, '3-[imperative]')\n      }\n    }\n  }\n}\nexport default imperative\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG;EACbC,KAAK,EAAE,IAAI;EAAE;EACbC,IAAI,EAAE,IAAI;EAAE;EACZC,EAAE,EAAE,IAAI;EAAE;EACVC,GAAG,EAAE,IAAI;EACTC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI,CAAE;AACZ,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,SAAAA,CAAUC,KAAK,EAAEC,KAAK,EAAE;EACzC,MAAMC,MAAM,GAAGD,KAAK,CAACE,OAAO,CAACC,GAAG,CAACF,MAAM;EACvC,MAAMG,UAAU,GAAGJ,KAAK,CAACK,KAAK,CAACF,GAAG,CAACG,WAAW,IAAI,CAAC,CAAC;EACpD,IAAIC,CAAC,GAAGR,KAAK,CAAC,CAAC,CAAC;EAChB,IAAIS,OAAO,GAAGD,CAAC,CAACE,MAAM,KAAK,WAAW,IAAIF,CAAC,CAACG,IAAI,CAACC,GAAG,CAAC,YAAY,CAAC;EAClE,IAAIH,OAAO,IAAIT,KAAK,CAACa,MAAM,IAAI,CAAC,EAAE;IAChC;IACA,IAAIb,KAAK,CAACa,MAAM,GAAG,CAAC,IAAI,CAACrB,MAAM,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACc,MAAM,CAAC,EAAE;MAChD;IACF;IACA;IACA,IAAI,CAACN,CAAC,CAACG,IAAI,CAACC,GAAG,CAAC,aAAa,CAAC,IAAIP,UAAU,CAACU,cAAc,CAACP,CAAC,CAACM,MAAM,CAAC,EAAE;MACrE;IACF;IACA;IACA,IAAIE,QAAQ,GAAGhB,KAAK,CAAC,CAAC,CAAC,CAACW,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,IAAIZ,KAAK,CAAC,CAAC,CAAC,CAACW,IAAI,CAACC,GAAG,CAAC,YAAY,CAAC;IAC3E,IAAII,QAAQ,EAAE;MACZ;MACA,IAAIC,QAAQ,GAAGjB,KAAK,CAACkB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACT,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,CAAC;MACpE,IAAI,CAACK,QAAQ,IAAIT,CAAC,CAACG,IAAI,CAACC,GAAG,CAAC,cAAc,CAAC,EAAE;QAC3CV,MAAM,CAAC,CAACM,CAAC,CAAC,EAAE,YAAY,EAAEP,KAAK,EAAE,IAAI,EAAE,gBAAgB,CAAC;MAC1D;IACF;EACF;AACF,CAAC;AACD,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}