{"ast":null,"code":"/*\n Copyright (c) 2013, Kenneth Koch\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The english normalizer will create a string in which all contractions are expanded to their\n * full meaning (i.e. \"we'll\" becomes \"we will\").\n *\n * It currently works off a conversion table and falls back to a set of rules.\n * Since it is applied first, the conversion table provides an \"override\" for the rules.\n **/\n// const replacer = require('../util/utils').replacer\nconst conversionTable = {\n  \"can't\": 'can not',\n  \"won't\": 'will not',\n  \"couldn't've\": 'could not have',\n  \"i'm\": 'I am',\n  \"how'd\": 'how did'\n};\nconst rules = [{\n  regex: /([azAZ]*)n'[tT]/g,\n  output: '$1 not'\n}, {\n  regex: /([azAZ]*)'[sS]/g,\n  output: '$1 is'\n}, {\n  regex: /([azAZ]*)'[lL][lL]/g,\n  output: '$1 will'\n}, {\n  regex: /([azAZ]*)'[rR][eE]/g,\n  output: '$1 are'\n}, {\n  regex: /([azAZ]*)'[vV][eE]/g,\n  output: '$1 have'\n}, {\n  regex: /([azAZ]*)'[dD]/g,\n  output: '$1 would'\n}];\n\n// Accepts a list of tokens to expand.\nconst normalizeTokens = function (tokens) {\n  if (typeof tokens === 'string') {\n    tokens = [tokens];\n  }\n  let results = [];\n  const ruleCount = rules.length;\n  const numTokens = tokens.length;\n  let i, token, r, rule;\n  for (i = 0; i < numTokens; i++) {\n    token = tokens[i];\n    // Check the conversion table\n    if (conversionTable[token.toLowerCase()]) {\n      results = results.concat(conversionTable[token.toLowerCase()].split(/\\W+/));\n    } else {\n      // Apply the rules\n      let matched = false;\n      for (r = 0; r < ruleCount; r++) {\n        rule = rules[r];\n        if (token.match(rule.regex)) {\n          results = results.concat(token.replace(rule.regex, rule.output).split(/\\W+/));\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        results.push(token);\n      }\n    }\n  }\n  return results;\n};\n\n// export the relevant stuff.\nexports.normalizeTokens = normalizeTokens;","map":{"version":3,"names":["conversionTable","rules","regex","output","normalizeTokens","tokens","results","ruleCount","length","numTokens","i","token","r","rule","toLowerCase","concat","split","matched","match","replace","push","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/normalizers/normalizer.js"],"sourcesContent":["/*\n Copyright (c) 2013, Kenneth Koch\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n\n'use strict'\n\n/**\n * The english normalizer will create a string in which all contractions are expanded to their\n * full meaning (i.e. \"we'll\" becomes \"we will\").\n *\n * It currently works off a conversion table and falls back to a set of rules.\n * Since it is applied first, the conversion table provides an \"override\" for the rules.\n **/\n// const replacer = require('../util/utils').replacer\n\nconst conversionTable = {\n  \"can't\": 'can not',\n  \"won't\": 'will not',\n  \"couldn't've\": 'could not have',\n  \"i'm\": 'I am',\n  \"how'd\": 'how did'\n}\n\nconst rules = [\n  { regex: /([azAZ]*)n'[tT]/g, output: '$1 not' },\n  { regex: /([azAZ]*)'[sS]/g, output: '$1 is' },\n  { regex: /([azAZ]*)'[lL][lL]/g, output: '$1 will' },\n  { regex: /([azAZ]*)'[rR][eE]/g, output: '$1 are' },\n  { regex: /([azAZ]*)'[vV][eE]/g, output: '$1 have' },\n  { regex: /([azAZ]*)'[dD]/g, output: '$1 would' }\n]\n\n// Accepts a list of tokens to expand.\nconst normalizeTokens = function (tokens) {\n  if (typeof tokens === 'string') {\n    tokens = [tokens]\n  }\n  let results = []\n  const ruleCount = rules.length\n  const numTokens = tokens.length\n  let i, token, r, rule\n\n  for (i = 0; i < numTokens; i++) {\n    token = tokens[i]\n    // Check the conversion table\n    if (conversionTable[token.toLowerCase()]) {\n      results = results.concat(conversionTable[token.toLowerCase()].split(/\\W+/))\n    } else { // Apply the rules\n      let matched = false\n      for (r = 0; r < ruleCount; r++) {\n        rule = rules[r]\n        if (token.match(rule.regex)) {\n          results = results.concat(token.replace(rule.regex, rule.output).split(/\\W+/))\n          matched = true\n          break\n        }\n      }\n      if (!matched) {\n        results.push(token)\n      }\n    }\n  }\n\n  return results\n}\n\n// export the relevant stuff.\nexports.normalizeTokens = normalizeTokens\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,eAAe,GAAG;EACtB,OAAO,EAAE,SAAS;EAClB,OAAO,EAAE,UAAU;EACnB,aAAa,EAAE,gBAAgB;EAC/B,KAAK,EAAE,MAAM;EACb,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,KAAK,GAAG,CACZ;EAAEC,KAAK,EAAE,kBAAkB;EAAEC,MAAM,EAAE;AAAS,CAAC,EAC/C;EAAED,KAAK,EAAE,iBAAiB;EAAEC,MAAM,EAAE;AAAQ,CAAC,EAC7C;EAAED,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAE;AAAU,CAAC,EACnD;EAAED,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAE;AAAS,CAAC,EAClD;EAAED,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAE;AAAU,CAAC,EACnD;EAAED,KAAK,EAAE,iBAAiB;EAAEC,MAAM,EAAE;AAAW,CAAC,CACjD;;AAED;AACA,MAAMC,eAAe,GAAG,SAAAA,CAAUC,MAAM,EAAE;EACxC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9BA,MAAM,GAAG,CAACA,MAAM,CAAC;EACnB;EACA,IAAIC,OAAO,GAAG,EAAE;EAChB,MAAMC,SAAS,GAAGN,KAAK,CAACO,MAAM;EAC9B,MAAMC,SAAS,GAAGJ,MAAM,CAACG,MAAM;EAC/B,IAAIE,CAAC,EAAEC,KAAK,EAAEC,CAAC,EAAEC,IAAI;EAErB,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,EAAEC,CAAC,EAAE,EAAE;IAC9BC,KAAK,GAAGN,MAAM,CAACK,CAAC,CAAC;IACjB;IACA,IAAIV,eAAe,CAACW,KAAK,CAACG,WAAW,CAAC,CAAC,CAAC,EAAE;MACxCR,OAAO,GAAGA,OAAO,CAACS,MAAM,CAACf,eAAe,CAACW,KAAK,CAACG,WAAW,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC,MAAM;MAAE;MACP,IAAIC,OAAO,GAAG,KAAK;MACnB,KAAKL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;QAC9BC,IAAI,GAAGZ,KAAK,CAACW,CAAC,CAAC;QACf,IAAID,KAAK,CAACO,KAAK,CAACL,IAAI,CAACX,KAAK,CAAC,EAAE;UAC3BI,OAAO,GAAGA,OAAO,CAACS,MAAM,CAACJ,KAAK,CAACQ,OAAO,CAACN,IAAI,CAACX,KAAK,EAAEW,IAAI,CAACV,MAAM,CAAC,CAACa,KAAK,CAAC,KAAK,CAAC,CAAC;UAC7EC,OAAO,GAAG,IAAI;UACd;QACF;MACF;MACA,IAAI,CAACA,OAAO,EAAE;QACZX,OAAO,CAACc,IAAI,CAACT,KAAK,CAAC;MACrB;IACF;EACF;EAEA,OAAOL,OAAO;AAChB,CAAC;;AAED;AACAe,OAAO,CAACjB,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}