{"ast":null,"code":"const hasContraction = /'/;\n//look for a past-tense verb\n// const hasPastTense = (terms, i) => {\n//   let after = terms.slice(i + 1, i + 3)\n//   return after.some(t => t.tags.has('PastTense'))\n// }\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\n\nconst alwaysDid = new Set(['what', 'how', 'when', 'where', 'why']);\n\n// after-words\nconst useWould = new Set(['be', 'go', 'start', 'think', 'need']);\nconst useHad = new Set(['been', 'gone']);\n// they'd gone\n// they'd go\n\n// he'd been\n//    he had been\n//    he would been\n\nconst _apostropheD = function (terms, i) {\n  let before = terms[i].normal.split(hasContraction)[0];\n\n  // what'd, how'd\n  if (alwaysDid.has(before)) {\n    return [before, 'did'];\n  }\n  if (terms[i + 1]) {\n    // they'd gone\n    if (useHad.has(terms[i + 1].normal)) {\n      return [before, 'had'];\n    }\n    // they'd go\n    if (useWould.has(terms[i + 1].normal)) {\n      return [before, 'would'];\n    }\n  }\n  return null;\n  //   if (hasPastTense(terms, i) === true) {\n  //     return [before, 'had']\n  //   }\n  //   // had/would/did\n  //   return [before, 'would']\n};\nexport default _apostropheD;","map":{"version":3,"names":["hasContraction","alwaysDid","Set","useWould","useHad","_apostropheD","terms","i","before","normal","split","has"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/contraction-one/compute/contractions/apostrophe-d.js"],"sourcesContent":["const hasContraction = /'/\n//look for a past-tense verb\n// const hasPastTense = (terms, i) => {\n//   let after = terms.slice(i + 1, i + 3)\n//   return after.some(t => t.tags.has('PastTense'))\n// }\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\n\nconst alwaysDid = new Set([\n  'what',\n  'how',\n  'when',\n  'where',\n  'why',\n])\n\n// after-words\nconst useWould = new Set([\n  'be',\n  'go',\n  'start',\n  'think',\n  'need',\n])\n\nconst useHad = new Set([\n  'been',\n  'gone'\n])\n// they'd gone\n// they'd go\n\n\n// he'd been\n//    he had been\n//    he would been\n\nconst _apostropheD = function (terms, i) {\n  let before = terms[i].normal.split(hasContraction)[0]\n\n  // what'd, how'd\n  if (alwaysDid.has(before)) {\n    return [before, 'did']\n  }\n  if (terms[i + 1]) {\n    // they'd gone\n    if (useHad.has(terms[i + 1].normal)) {\n      return [before, 'had']\n    }\n    // they'd go\n    if (useWould.has(terms[i + 1].normal)) {\n      return [before, 'would']\n    }\n  }\n  return null\n  //   if (hasPastTense(terms, i) === true) {\n  //     return [before, 'had']\n  //   }\n  //   // had/would/did\n  //   return [before, 'would']\n}\nexport default _apostropheD\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CACxB,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,EACP,KAAK,CACN,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAG,IAAID,GAAG,CAAC,CACvB,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,OAAO,EACP,MAAM,CACP,CAAC;AAEF,MAAME,MAAM,GAAG,IAAIF,GAAG,CAAC,CACrB,MAAM,EACN,MAAM,CACP,CAAC;AACF;AACA;;AAGA;AACA;AACA;;AAEA,MAAMG,YAAY,GAAG,SAAAA,CAAUC,KAAK,EAAEC,CAAC,EAAE;EACvC,IAAIC,MAAM,GAAGF,KAAK,CAACC,CAAC,CAAC,CAACE,MAAM,CAACC,KAAK,CAACV,cAAc,CAAC,CAAC,CAAC,CAAC;;EAErD;EACA,IAAIC,SAAS,CAACU,GAAG,CAACH,MAAM,CAAC,EAAE;IACzB,OAAO,CAACA,MAAM,EAAE,KAAK,CAAC;EACxB;EACA,IAAIF,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,EAAE;IAChB;IACA,IAAIH,MAAM,CAACO,GAAG,CAACL,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,CAACE,MAAM,CAAC,EAAE;MACnC,OAAO,CAACD,MAAM,EAAE,KAAK,CAAC;IACxB;IACA;IACA,IAAIL,QAAQ,CAACQ,GAAG,CAACL,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,CAACE,MAAM,CAAC,EAAE;MACrC,OAAO,CAACD,MAAM,EAAE,OAAO,CAAC;IAC1B;EACF;EACA,OAAO,IAAI;EACX;EACA;EACA;EACA;EACA;AACF,CAAC;AACD,eAAeH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}