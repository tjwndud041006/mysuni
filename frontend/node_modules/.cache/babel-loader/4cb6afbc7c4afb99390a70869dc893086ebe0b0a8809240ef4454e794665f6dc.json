{"ast":null,"code":"import misc from './abbreviations/misc.js';\nimport honorifics from './abbreviations/honorifics.js';\nimport months from './abbreviations/months.js';\nimport nouns from './abbreviations/nouns.js';\nimport organizations from './abbreviations/organizations.js';\nimport places from './abbreviations/places.js';\nimport units from './abbreviations/units.js';\n\n// add our abbreviation list to our lexicon\nlet list = [[misc], [units, 'Unit'], [nouns, 'Noun'], [honorifics, 'Honorific'], [months, 'Month'], [organizations, 'Organization'], [places, 'Place']];\n// create key-val for sentence-tokenizer\nlet abbreviations = {};\n// add them to a future lexicon\nlet lexicon = {};\nlist.forEach(a => {\n  a[0].forEach(w => {\n    // sentence abbrevs\n    abbreviations[w] = true;\n    // future-lexicon\n    lexicon[w] = 'Abbreviation';\n    if (a[1] !== undefined) {\n      lexicon[w] = [lexicon[w], a[1]];\n    }\n  });\n});\nexport { lexicon, abbreviations };","map":{"version":3,"names":["misc","honorifics","months","nouns","organizations","places","units","list","abbreviations","lexicon","forEach","a","w","undefined"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/model/lexicon.js"],"sourcesContent":["import misc from './abbreviations/misc.js'\nimport honorifics from './abbreviations/honorifics.js'\nimport months from './abbreviations/months.js'\nimport nouns from './abbreviations/nouns.js'\nimport organizations from './abbreviations/organizations.js'\nimport places from './abbreviations/places.js'\nimport units from './abbreviations/units.js'\n\n// add our abbreviation list to our lexicon\nlet list = [\n  [misc],\n  [units, 'Unit'],\n  [nouns, 'Noun'],\n  [honorifics, 'Honorific'],\n  [months, 'Month'],\n  [organizations, 'Organization'],\n  [places, 'Place'],\n]\n// create key-val for sentence-tokenizer\nlet abbreviations = {}\n// add them to a future lexicon\nlet lexicon = {}\n\nlist.forEach(a => {\n  a[0].forEach(w => {\n    // sentence abbrevs\n    abbreviations[w] = true\n    // future-lexicon\n    lexicon[w] = 'Abbreviation'\n    if (a[1] !== undefined) {\n      lexicon[w] = [lexicon[w], a[1]]\n    }\n  })\n})\n\nexport { lexicon, abbreviations }\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,UAAU,MAAM,+BAA+B;AACtD,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,aAAa,MAAM,kCAAkC;AAC5D,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,KAAK,MAAM,0BAA0B;;AAE5C;AACA,IAAIC,IAAI,GAAG,CACT,CAACP,IAAI,CAAC,EACN,CAACM,KAAK,EAAE,MAAM,CAAC,EACf,CAACH,KAAK,EAAE,MAAM,CAAC,EACf,CAACF,UAAU,EAAE,WAAW,CAAC,EACzB,CAACC,MAAM,EAAE,OAAO,CAAC,EACjB,CAACE,aAAa,EAAE,cAAc,CAAC,EAC/B,CAACC,MAAM,EAAE,OAAO,CAAC,CAClB;AACD;AACA,IAAIG,aAAa,GAAG,CAAC,CAAC;AACtB;AACA,IAAIC,OAAO,GAAG,CAAC,CAAC;AAEhBF,IAAI,CAACG,OAAO,CAACC,CAAC,IAAI;EAChBA,CAAC,CAAC,CAAC,CAAC,CAACD,OAAO,CAACE,CAAC,IAAI;IAChB;IACAJ,aAAa,CAACI,CAAC,CAAC,GAAG,IAAI;IACvB;IACAH,OAAO,CAACG,CAAC,CAAC,GAAG,cAAc;IAC3B,IAAID,CAAC,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MACtBJ,OAAO,CAACG,CAAC,CAAC,GAAG,CAACH,OAAO,CAACG,CAAC,CAAC,EAAED,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,SAASF,OAAO,EAAED,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}