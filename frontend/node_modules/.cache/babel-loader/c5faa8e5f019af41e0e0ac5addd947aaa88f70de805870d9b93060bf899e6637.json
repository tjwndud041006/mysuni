{"ast":null,"code":"import rules from './_rules.js';\nconst addE = /([xsz]|ch|sh)$/;\nconst trySuffix = function (str) {\n  let c = str[str.length - 1];\n  if (rules.hasOwnProperty(c) === true) {\n    for (let i = 0; i < rules[c].length; i += 1) {\n      let reg = rules[c][i][0];\n      if (reg.test(str) === true) {\n        return str.replace(reg, rules[c][i][1]);\n      }\n    }\n  }\n  return null;\n};\n/** Turn a singular noun into a plural\n * assume the given string is singular\n */\nconst pluralize = function (str = '', model) {\n  let {\n    irregularPlurals,\n    uncountable\n  } = model.two;\n  // is it a word without a plural form?\n  if (uncountable.hasOwnProperty(str)) {\n    return str;\n  }\n  // check irregulars list\n  if (irregularPlurals.hasOwnProperty(str)) {\n    return irregularPlurals[str];\n  }\n  //we have some rules to try-out\n  let plural = trySuffix(str);\n  if (plural !== null) {\n    return plural;\n  }\n  //like 'church'\n  if (addE.test(str)) {\n    return str + 'es';\n  }\n  // ¯\\_(ツ)_/¯\n  return str + 's';\n};\nexport default pluralize;","map":{"version":3,"names":["rules","addE","trySuffix","str","c","length","hasOwnProperty","i","reg","test","replace","pluralize","model","irregularPlurals","uncountable","two","plural"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/index.js"],"sourcesContent":["import rules from './_rules.js'\nconst addE = /([xsz]|ch|sh)$/\n\nconst trySuffix = function (str) {\n  let c = str[str.length - 1]\n  if (rules.hasOwnProperty(c) === true) {\n    for (let i = 0; i < rules[c].length; i += 1) {\n      let reg = rules[c][i][0]\n      if (reg.test(str) === true) {\n        return str.replace(reg, rules[c][i][1])\n      }\n    }\n  }\n  return null\n}\n/** Turn a singular noun into a plural\n * assume the given string is singular\n */\nconst pluralize = function (str = '', model) {\n  let { irregularPlurals, uncountable } = model.two\n  // is it a word without a plural form?\n  if (uncountable.hasOwnProperty(str)) {\n    return str\n  }\n  // check irregulars list\n  if (irregularPlurals.hasOwnProperty(str)) {\n    return irregularPlurals[str]\n  }\n  //we have some rules to try-out\n  let plural = trySuffix(str)\n  if (plural !== null) {\n    return plural\n  }\n  //like 'church'\n  if (addE.test(str)) {\n    return str + 'es'\n  }\n  // ¯\\_(ツ)_/¯\n  return str + 's'\n}\nexport default pluralize\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,aAAa;AAC/B,MAAMC,IAAI,GAAG,gBAAgB;AAE7B,MAAMC,SAAS,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC/B,IAAIC,CAAC,GAAGD,GAAG,CAACA,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC;EAC3B,IAAIL,KAAK,CAACM,cAAc,CAACF,CAAC,CAAC,KAAK,IAAI,EAAE;IACpC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACI,CAAC,CAAC,CAACC,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;MAC3C,IAAIC,GAAG,GAAGR,KAAK,CAACI,CAAC,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;MACxB,IAAIC,GAAG,CAACC,IAAI,CAACN,GAAG,CAAC,KAAK,IAAI,EAAE;QAC1B,OAAOA,GAAG,CAACO,OAAO,CAACF,GAAG,EAAER,KAAK,CAACI,CAAC,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzC;IACF;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD;AACA;AACA;AACA,MAAMI,SAAS,GAAG,SAAAA,CAAUR,GAAG,GAAG,EAAE,EAAES,KAAK,EAAE;EAC3C,IAAI;IAAEC,gBAAgB;IAAEC;EAAY,CAAC,GAAGF,KAAK,CAACG,GAAG;EACjD;EACA,IAAID,WAAW,CAACR,cAAc,CAACH,GAAG,CAAC,EAAE;IACnC,OAAOA,GAAG;EACZ;EACA;EACA,IAAIU,gBAAgB,CAACP,cAAc,CAACH,GAAG,CAAC,EAAE;IACxC,OAAOU,gBAAgB,CAACV,GAAG,CAAC;EAC9B;EACA;EACA,IAAIa,MAAM,GAAGd,SAAS,CAACC,GAAG,CAAC;EAC3B,IAAIa,MAAM,KAAK,IAAI,EAAE;IACnB,OAAOA,MAAM;EACf;EACA;EACA,IAAIf,IAAI,CAACQ,IAAI,CAACN,GAAG,CAAC,EAAE;IAClB,OAAOA,GAAG,GAAG,IAAI;EACnB;EACA;EACA,OAAOA,GAAG,GAAG,GAAG;AAClB,CAAC;AACD,eAAeQ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}