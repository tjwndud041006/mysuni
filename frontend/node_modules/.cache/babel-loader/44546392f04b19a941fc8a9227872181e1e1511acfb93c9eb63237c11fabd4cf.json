{"ast":null,"code":"// find the main verb, from a verb phrase\nconst getMain = function (vb) {\n  let root = vb;\n  if (vb.wordCount() > 1) {\n    root = vb.not('(#Negative|#Auxiliary|#Modal|#Adverb|#Prefix)');\n  }\n  // fallback to just the last word, sometimes\n  if (root.length > 1 && !root.has('#Phrasal #Particle')) {\n    root = root.last();\n  }\n  // look for more modals\n  root = root.not('(want|wants|wanted) to');\n\n  // fallback\n  if (!root.found) {\n    root = vb.not('#Negative');\n    return root;\n  }\n  return root;\n};\nexport default getMain;","map":{"version":3,"names":["getMain","vb","root","wordCount","not","length","has","last","found"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/verbs/api/parse/root.js"],"sourcesContent":["// find the main verb, from a verb phrase\nconst getMain = function (vb) {\n  let root = vb\n  if (vb.wordCount() > 1) {\n    root = vb.not('(#Negative|#Auxiliary|#Modal|#Adverb|#Prefix)')\n  }\n  // fallback to just the last word, sometimes\n  if (root.length > 1 && !root.has('#Phrasal #Particle')) {\n    root = root.last()\n  }\n  // look for more modals\n  root = root.not('(want|wants|wanted) to')\n\n  // fallback\n  if (!root.found) {\n    root = vb.not('#Negative')\n    return root\n  }\n  return root\n}\nexport default getMain\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,SAAAA,CAAUC,EAAE,EAAE;EAC5B,IAAIC,IAAI,GAAGD,EAAE;EACb,IAAIA,EAAE,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE;IACtBD,IAAI,GAAGD,EAAE,CAACG,GAAG,CAAC,+CAA+C,CAAC;EAChE;EACA;EACA,IAAIF,IAAI,CAACG,MAAM,GAAG,CAAC,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,oBAAoB,CAAC,EAAE;IACtDJ,IAAI,GAAGA,IAAI,CAACK,IAAI,CAAC,CAAC;EACpB;EACA;EACAL,IAAI,GAAGA,IAAI,CAACE,GAAG,CAAC,wBAAwB,CAAC;;EAEzC;EACA,IAAI,CAACF,IAAI,CAACM,KAAK,EAAE;IACfN,IAAI,GAAGD,EAAE,CAACG,GAAG,CAAC,WAAW,CAAC;IAC1B,OAAOF,IAAI;EACb;EACA,OAAOA,IAAI;AACb,CAAC;AACD,eAAeF,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}