{"ast":null,"code":"const hasOpen = /\\(/;\nconst hasClosed = /\\)/;\nconst findEnd = function (terms, i) {\n  for (; i < terms.length; i += 1) {\n    if (terms[i].post && hasClosed.test(terms[i].post)) {\n      let [, index] = terms[i].index;\n      index = index || 0;\n      return index;\n    }\n  }\n  return null;\n};\nconst find = function (doc) {\n  let ptrs = [];\n  doc.docs.forEach(terms => {\n    let isOpen = false;\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i];\n      if (!isOpen && term.pre && hasOpen.test(term.pre)) {\n        let end = findEnd(terms, i);\n        if (end !== null) {\n          let [n, start] = terms[i].index;\n          ptrs.push([n, start, end + 1, terms[i].id]);\n          i = end;\n        }\n      }\n    }\n  });\n  return doc.update(ptrs);\n};\nconst strip = function (m) {\n  m.docs.forEach(terms => {\n    terms[0].pre = terms[0].pre.replace(hasOpen, '');\n    let last = terms[terms.length - 1];\n    last.post = last.post.replace(hasClosed, '');\n  });\n  return m;\n};\nexport { find, strip };","map":{"version":3,"names":["hasOpen","hasClosed","findEnd","terms","i","length","post","test","index","find","doc","ptrs","docs","forEach","isOpen","term","pre","end","n","start","push","id","update","strip","m","replace","last"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/misc/parentheses/fns.js"],"sourcesContent":["const hasOpen = /\\(/\nconst hasClosed = /\\)/\n\nconst findEnd = function (terms, i) {\n  for (; i < terms.length; i += 1) {\n    if (terms[i].post && hasClosed.test(terms[i].post)) {\n      let [, index] = terms[i].index\n      index = index || 0\n      return index\n    }\n  }\n  return null\n}\n\nconst find = function (doc) {\n  let ptrs = []\n  doc.docs.forEach(terms => {\n    let isOpen = false\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i]\n      if (!isOpen && term.pre && hasOpen.test(term.pre)) {\n        let end = findEnd(terms, i)\n        if (end !== null) {\n          let [n, start] = terms[i].index\n          ptrs.push([n, start, end + 1, terms[i].id])\n          i = end\n        }\n      }\n    }\n  })\n  return doc.update(ptrs)\n}\n\nconst strip = function (m) {\n  m.docs.forEach(terms => {\n    terms[0].pre = terms[0].pre.replace(hasOpen, '')\n    let last = terms[terms.length - 1]\n    last.post = last.post.replace(hasClosed, '')\n  })\n  return m\n}\nexport { find, strip }\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,IAAI;AACpB,MAAMC,SAAS,GAAG,IAAI;AAEtB,MAAMC,OAAO,GAAG,SAAAA,CAAUC,KAAK,EAAEC,CAAC,EAAE;EAClC,OAAOA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC/B,IAAID,KAAK,CAACC,CAAC,CAAC,CAACE,IAAI,IAAIL,SAAS,CAACM,IAAI,CAACJ,KAAK,CAACC,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE;MAClD,IAAI,GAAGE,KAAK,CAAC,GAAGL,KAAK,CAACC,CAAC,CAAC,CAACI,KAAK;MAC9BA,KAAK,GAAGA,KAAK,IAAI,CAAC;MAClB,OAAOA,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb,CAAC;AAED,MAAMC,IAAI,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC1B,IAAIC,IAAI,GAAG,EAAE;EACbD,GAAG,CAACE,IAAI,CAACC,OAAO,CAACV,KAAK,IAAI;IACxB,IAAIW,MAAM,GAAG,KAAK;IAClB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACxC,IAAIW,IAAI,GAAGZ,KAAK,CAACC,CAAC,CAAC;MACnB,IAAI,CAACU,MAAM,IAAIC,IAAI,CAACC,GAAG,IAAIhB,OAAO,CAACO,IAAI,CAACQ,IAAI,CAACC,GAAG,CAAC,EAAE;QACjD,IAAIC,GAAG,GAAGf,OAAO,CAACC,KAAK,EAAEC,CAAC,CAAC;QAC3B,IAAIa,GAAG,KAAK,IAAI,EAAE;UAChB,IAAI,CAACC,CAAC,EAAEC,KAAK,CAAC,GAAGhB,KAAK,CAACC,CAAC,CAAC,CAACI,KAAK;UAC/BG,IAAI,CAACS,IAAI,CAAC,CAACF,CAAC,EAAEC,KAAK,EAAEF,GAAG,GAAG,CAAC,EAAEd,KAAK,CAACC,CAAC,CAAC,CAACiB,EAAE,CAAC,CAAC;UAC3CjB,CAAC,GAAGa,GAAG;QACT;MACF;IACF;EACF,CAAC,CAAC;EACF,OAAOP,GAAG,CAACY,MAAM,CAACX,IAAI,CAAC;AACzB,CAAC;AAED,MAAMY,KAAK,GAAG,SAAAA,CAAUC,CAAC,EAAE;EACzBA,CAAC,CAACZ,IAAI,CAACC,OAAO,CAACV,KAAK,IAAI;IACtBA,KAAK,CAAC,CAAC,CAAC,CAACa,GAAG,GAAGb,KAAK,CAAC,CAAC,CAAC,CAACa,GAAG,CAACS,OAAO,CAACzB,OAAO,EAAE,EAAE,CAAC;IAChD,IAAI0B,IAAI,GAAGvB,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC;IAClCqB,IAAI,CAACpB,IAAI,GAAGoB,IAAI,CAACpB,IAAI,CAACmB,OAAO,CAACxB,SAAS,EAAE,EAAE,CAAC;EAC9C,CAAC,CAAC;EACF,OAAOuB,CAAC;AACV,CAAC;AACD,SAASf,IAAI,EAAEc,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}