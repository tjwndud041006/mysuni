{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict';\n\nconst Phonetic = require('./phonetic');\nclass DoubleMetaphone extends Phonetic {\n  isVowel(c) {\n    return c && c.match(/[aeiouy]/i);\n  }\n  process(token, maxLength) {\n    // For the functions that live here in the process method\n    const self = this;\n    token = token.toUpperCase();\n    let primary = '';\n    let secondary = '';\n    let pos = 0;\n    maxLength = maxLength || 32;\n    const san = token.substring(0, 3) === 'SAN';\n    const startsWithVowel = this.isVowel(token[0]);\n    const slavoGermanic = token.match(/(W|K|CZ|WITZ)/);\n    if (subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {\n      pos++;\n    }\n    while (pos < token.length) {\n      switch (token[pos]) {\n        case 'A':\n        case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n        case 'Y':\n        case 'Ê':\n        case 'É':\n        case 'À':\n          if (pos === 0) {\n            add('A');\n          }\n          break;\n        case 'B':\n          addCompressedDouble('B', 'P');\n          break;\n        case 'C':\n          handleC();\n          break;\n        case 'Ç':\n          add('S');\n          break;\n        case 'D':\n          handleD();\n          break;\n        case 'F':\n        case 'K':\n        case 'N':\n          addCompressedDouble(token[pos]);\n          break;\n        case 'G':\n          handleG();\n          break;\n        case 'H':\n          handleH();\n          break;\n        case 'J':\n          handleJ();\n          break;\n        case 'L':\n          handleL();\n          break;\n        case 'M':\n          handleM();\n          break;\n        case 'Ñ':\n          add('N');\n          break;\n        case 'P':\n          handleP();\n          break;\n        case 'Q':\n          addCompressedDouble('Q', 'K');\n          break;\n        case 'R':\n          handleR();\n          break;\n        case 'S':\n          handleS();\n          break;\n        case 'T':\n          handleT();\n          break;\n        case 'V':\n          addCompressedDouble('V', 'F');\n          break;\n        case 'W':\n          handleW();\n          break;\n        case 'X':\n          handleX();\n          break;\n        case 'Z':\n          handleZ();\n          break;\n      }\n      if (primary.length >= maxLength && secondary.length >= maxLength) {\n        break;\n      }\n      pos++;\n    }\n    return [truncate(primary, maxLength), truncate(secondary, maxLength)];\n    function subMatch(startOffset, stopOffset, terms) {\n      return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);\n    }\n    function subMatchAbsolute(startOffset, stopOffset, terms) {\n      return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;\n    }\n    function truncate(string, length) {\n      if (string.length >= length) {\n        string = string.substring(0, length);\n      }\n      return string;\n    }\n    function addSecondary(primaryAppendage, secondaryAppendage) {\n      primary += primaryAppendage;\n      secondary += secondaryAppendage;\n    }\n    function add(primaryAppendage) {\n      addSecondary(primaryAppendage, primaryAppendage);\n    }\n    function addCompressedDouble(c, encoded) {\n      if (token[pos + 1] === c) {\n        pos++;\n      }\n      add(encoded || c);\n    }\n    function handleC() {\n      if (pos >= 1 && !self.isVowel(token[pos - 2]) && token[pos - 1] === 'A' && token[pos + 1] === 'H' && token[pos + 2] !== 'I' || subMatch(-2, 4, ['BACHER', 'MACHER'])) {\n        add('K');\n        pos++;\n      } else if (pos === 0 && token.substring(1, 6) === 'EASAR') {\n        add('S');\n        add('S');\n        add('R');\n        pos += 6;\n      } else if (token.substring(pos + 1, pos + 4) === 'HIA') {\n        add('K');\n        pos++;\n      } else if (token[pos + 1] === 'H') {\n        if (pos > 0 && token.substring(pos + 2, pos + 4) === 'AE') {\n          addSecondary('K', 'X');\n          pos++;\n        } else if (pos === 0 && (subMatch(1, 6, ['HARAC', 'HARIS']) || subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM'])) && token.substring(pos + 1, pos + 5) !== 'HORE') {\n          add('K');\n          pos++;\n        } else {\n          if (subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0, 3) === 'SCH' || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID']) || subMatch(2, 3, ['T', 'S']) || (subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos === 0) && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W'])) {\n            add('K');\n          } else if (pos > 0) {\n            if (token.substring(0, 2) === 'MC') {\n              add('K');\n            } else {\n              addSecondary('X', 'K');\n            }\n          } else {\n            add('X');\n          }\n          pos++;\n        }\n      } else if (token.substring(pos, pos + 2) === 'CZ' && token.substring(pos - 2, pos + 1) !== 'WICZ') {\n        addSecondary('S', 'X');\n        pos++;\n      } else if (token.substring(pos, pos + 3) === 'CIA') {\n        add('X');\n        pos += 2;\n      } else if (token[pos + 1] === 'C' && pos !== 1 && token[0] !== 'M') {\n        if (['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 && token.substring(pos + 2, pos + 4) !== 'HU') {\n          if (pos === 1 && token[pos - 1] === 'A' || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {\n            add('KS');\n          } else {\n            add('X');\n          }\n          pos += 2;\n        } else {\n          add('K');\n          pos++;\n        }\n      } else if (['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {\n        add('K');\n        pos++;\n      } else if (['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {\n        if (subMatch(1, 3, ['IA', 'IE', 'IO'])) {\n          addSecondary('S', 'X');\n        } else {\n          add('S');\n        }\n        pos++;\n      } else {\n        add('K');\n        if (token[pos + 1] === ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {\n          pos += 2;\n        } else if (['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1 && !subMatch(1, 3, ['CE', 'CI'])) {\n          pos++;\n        }\n      }\n    }\n    function handleD() {\n      if (token[pos + 1] === 'G') {\n        if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n          add('J');\n          pos += 2;\n        } else {\n          add('TK');\n          pos++;\n        }\n      } else if (token[pos + 1] === 'T') {\n        add('T');\n        pos++;\n      } else {\n        addCompressedDouble('D', 'T');\n      }\n    }\n    function handleG() {\n      if (token[pos + 1] === 'H') {\n        if (pos > 0 && !self.isVowel(token[pos - 1])) {\n          add('K');\n          pos++;\n        } else if (pos === 0) {\n          if (token[pos + 2] === 'I') {\n            add('J');\n          } else {\n            add('K');\n          }\n          pos++;\n        } else if (pos > 1 && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1 || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1 || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {\n          pos++;\n        } else {\n          if (pos > 2 && token[pos - 1] === 'U' && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {\n            add('F');\n          } else if (token[pos - 1] !== 'I') {\n            add('K');\n          }\n          pos++;\n        }\n      } else if (token[pos + 1] === 'N') {\n        if (pos === 1 && startsWithVowel && !slavoGermanic) {\n          addSecondary('KN', 'N');\n        } else {\n          if (token.substring(pos + 2, pos + 4) !== 'EY' && token[pos + 1] !== 'Y' && !slavoGermanic) {\n            addSecondary('N', 'KN');\n          } else {\n            add('KN');\n          }\n        }\n        pos++;\n      } else if (token.substring(pos + 1, pos + 3) === 'LI' && !slavoGermanic) {\n        addSecondary('KL', 'L');\n        pos++;\n      } else if (pos === 0 && (token[pos + 1] === 'Y' || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {\n        addSecondary('K', 'J');\n      } else {\n        addCompressedDouble('G', 'K');\n      }\n    }\n    function handleH() {\n      // keep if starts a word or is surrounded by vowels\n      if ((pos === 0 || self.isVowel(token[pos - 1])) && self.isVowel(token[pos + 1])) {\n        add('H');\n        pos++;\n      }\n    }\n    function handleJ() {\n      const jose = token.substring(pos + 1, pos + 4) === 'OSE';\n      if (san || jose) {\n        if (pos === 0 && token[pos + 4] === ' ' || san) {\n          add('H');\n        } else {\n          add('J', 'H');\n        }\n      } else {\n        if (pos === 0 /* && !jose */) {\n          addSecondary('J', 'A');\n        } else if (self.isVowel(token[pos - 1]) && !slavoGermanic && (token[pos + 1] === 'A' || token[pos + 1] === 'O')) {\n          addSecondary('J', 'H');\n        } else if (pos === token.length - 1) {\n          addSecondary('J', ' ');\n        } else {\n          addCompressedDouble('J');\n        }\n      }\n    }\n    function handleL() {\n      if (token[pos + 1] === 'L') {\n        if (pos === token.length - 3 && (subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || token.substring(pos - 1, pos + 3) === 'ALLE' && (subMatch(-2, -1, ['AS', 'OS']) > -1 || ['A', 'O'].indexOf(token[token.length - 1]) > -1))) {\n          addSecondary('L', '');\n          pos++;\n          return;\n        }\n        pos++;\n      }\n      add('L');\n    }\n    function handleM() {\n      addCompressedDouble('M');\n      if (token[pos - 1] === 'U' && token[pos + 1] === 'B' && (pos === token.length - 2 || token.substring(pos + 2, pos + 4) === 'ER')) {\n        pos++;\n      }\n    }\n    function handleP() {\n      if (token[pos + 1] === 'H') {\n        add('F');\n        pos++;\n      } else {\n        addCompressedDouble('P');\n        if (token[pos + 1] === 'B') {\n          pos++;\n        }\n      }\n    }\n    function handleR() {\n      if (pos === token.length - 1 && !slavoGermanic && token.substring(pos - 2, pos) === 'IE' && !subMatch(-4, -3, ['ME', 'MA'])) {\n        addSecondary('', 'R');\n      } else {\n        addCompressedDouble('R');\n      }\n    }\n    function handleS() {\n      if (pos === 0 && token.substring(0, 5) === 'SUGAR') {\n        addSecondary('X', 'S');\n      } else if (token[pos + 1] === 'H') {\n        if (subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {\n          add('S');\n        } else {\n          add('X');\n        }\n        pos++;\n      } else if (subMatch(1, 3, ['IO', 'IA'])) {\n        if (slavoGermanic) {\n          add('S');\n        } else {\n          addSecondary('S', 'X');\n        }\n        pos++;\n      } else if (pos === 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1 || token[pos + 1] === 'Z') {\n        addSecondary('S', 'X');\n        if (token[pos + 1] === 'Z') {\n          pos++;\n        }\n      } else if (token.substring(pos, pos + 2) === 'SC') {\n        if (token[pos + 2] === 'H') {\n          if (subMatch(3, 5, ['ER', 'EN'])) {\n            addSecondary('X', 'SK');\n          } else if (subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {\n            add('SK');\n          } else if (pos === 0 && !self.isVowel(token[3]) && token[3] !== 'W') {\n            addSecondary('X', 'S');\n          } else {\n            add('X');\n          }\n        } else if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n          add('S');\n        } else {\n          add('SK');\n        }\n        pos += 2;\n      } else if (pos === token.length - 1 && subMatch(-2, 0, ['AI', 'OI'])) {\n        addSecondary('', 'S');\n      } else if (token[pos + 1] !== 'L' && token[pos - 1] !== 'A' && token[pos - 1] !== 'I') {\n        addCompressedDouble('S');\n        if (token[pos + 1] === 'Z') {\n          pos++;\n        }\n      }\n    }\n    function handleT() {\n      if (token.substring(pos + 1, pos + 4) === 'ION') {\n        add('XN');\n        pos += 3;\n      } else if (subMatch(1, 3, ['IA', 'CH'])) {\n        add('X');\n        pos += 2;\n      } else if (token[pos + 1] === 'H' || token.substring(1, 2) === 'TH') {\n        if (subMatch(2, 4, ['OM', 'AM']) || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1 || token.substring(0, 3) === 'SCH') {\n          add('T');\n        } else {\n          addSecondary('0', 'T');\n        }\n        pos++;\n      } else {\n        addCompressedDouble('T');\n        if (token[pos + 1] === 'D') {\n          pos++;\n        }\n      }\n    }\n    function handleX() {\n      if (pos === 0) {\n        add('S');\n      } else if (!(pos === token.length - 1 && (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1 || ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {\n        add('KS');\n      }\n    }\n    function handleW() {\n      if (pos === 0) {\n        if (token[1] === 'H') {\n          add('A');\n        } else if (self.isVowel(token[1])) {\n          addSecondary('A', 'F');\n        }\n      } else if (subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY']) || token.substring(0, 3) === 'SCH' || pos === token.length - 1 && self.isVowel(token[pos - 1])) {\n        addSecondary('', 'F');\n        pos++;\n      } else if (['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {\n        addSecondary('TS', 'FX');\n        pos += 3;\n      }\n    }\n    function handleZ() {\n      if (token[pos + 1] === 'H') {\n        add('J');\n        pos++;\n      } else if (subMatch(1, 3, ['ZO', 'ZI', 'ZA']) || slavoGermanic && pos > 0 && token[pos - 1] !== 'T') {\n        addSecondary('S', 'TS');\n        pos++;\n      } else {\n        addCompressedDouble('Z', 'S');\n      }\n    }\n  }\n  compare(stringA, stringB) {\n    const encodingsA = this.process(stringA);\n    const encodingsB = this.process(stringB);\n    return encodingsA[0] === encodingsB[0] || encodingsA[1] === encodingsB[1];\n  }\n}\nmodule.exports = DoubleMetaphone;","map":{"version":3,"names":["Phonetic","require","DoubleMetaphone","isVowel","c","match","process","token","maxLength","self","toUpperCase","primary","secondary","pos","san","substring","startsWithVowel","slavoGermanic","subMatch","length","add","addCompressedDouble","handleC","handleD","handleG","handleH","handleJ","handleL","handleM","handleP","handleR","handleS","handleT","handleW","handleX","handleZ","truncate","startOffset","stopOffset","terms","subMatchAbsolute","indexOf","string","addSecondary","primaryAppendage","secondaryAppendage","encoded","jose","compare","stringA","stringB","encodingsA","encodingsB","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/phonetics/double_metaphone.js"],"sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst Phonetic = require('./phonetic')\n\nclass DoubleMetaphone extends Phonetic {\n  isVowel (c) {\n    return c && c.match(/[aeiouy]/i)\n  }\n\n  process (token, maxLength) {\n    // For the functions that live here in the process method\n    const self = this\n\n    token = token.toUpperCase()\n    let primary = ''; let secondary = ''\n    let pos = 0\n    maxLength = maxLength || 32\n\n    const san = (token.substring(0, 3) === 'SAN')\n    const startsWithVowel = this.isVowel(token[0])\n    const slavoGermanic = token.match(/(W|K|CZ|WITZ)/)\n\n    if (subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {\n      pos++\n    }\n\n    while (pos < token.length) {\n      switch (token[pos]) {\n        case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y':\n        case 'Ê': case 'É': case 'À':\n          if (pos === 0) { add('A') }\n          break\n        case 'B':\n          addCompressedDouble('B', 'P')\n          break\n        case 'C':\n          handleC()\n          break\n        case 'Ç':\n          add('S')\n          break\n        case 'D':\n          handleD()\n          break\n        case 'F': case 'K': case 'N':\n          addCompressedDouble(token[pos])\n          break\n        case 'G':\n          handleG()\n          break\n        case 'H':\n          handleH()\n          break\n        case 'J':\n          handleJ()\n          break\n        case 'L':\n          handleL()\n          break\n        case 'M':\n          handleM()\n          break\n        case 'Ñ':\n          add('N')\n          break\n        case 'P':\n          handleP()\n          break\n        case 'Q':\n          addCompressedDouble('Q', 'K')\n          break\n        case 'R':\n          handleR()\n          break\n        case 'S':\n          handleS()\n          break\n        case 'T':\n          handleT()\n          break\n        case 'V':\n          addCompressedDouble('V', 'F')\n          break\n        case 'W':\n          handleW()\n          break\n        case 'X':\n          handleX()\n          break\n        case 'Z':\n          handleZ()\n          break\n      }\n\n      if (primary.length >= maxLength && secondary.length >= maxLength) {\n        break\n      }\n\n      pos++\n    }\n\n    return [truncate(primary, maxLength), truncate(secondary, maxLength)]\n\n    function subMatch (startOffset, stopOffset, terms) {\n      return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms)\n    }\n\n    function subMatchAbsolute (startOffset, stopOffset, terms) {\n      return terms.indexOf(token.substring(startOffset, stopOffset)) > -1\n    }\n\n    function truncate (string, length) {\n      if (string.length >= length) { string = string.substring(0, length) }\n\n      return string\n    }\n\n    function addSecondary (primaryAppendage, secondaryAppendage) {\n      primary += primaryAppendage\n      secondary += secondaryAppendage\n    }\n\n    function add (primaryAppendage) {\n      addSecondary(primaryAppendage, primaryAppendage)\n    }\n\n    function addCompressedDouble (c, encoded) {\n      if (token[pos + 1] === c) {\n        pos++\n      }\n      add(encoded || c)\n    }\n\n    function handleC () {\n      if ((pos >= 1 && !self.isVowel(token[pos - 2]) &&\n        token[pos - 1] === 'A' && token[pos + 1] === 'H' &&\n        token[pos + 2] !== 'I') ||\n        subMatch(-2, 4, ['BACHER', 'MACHER'])) {\n        add('K')\n        pos++\n      } else if (pos === 0 && token.substring(1, 6) === 'EASAR') {\n        add('S')\n        add('S')\n        add('R')\n        pos += 6\n      } else if (token.substring(pos + 1, pos + 4) === 'HIA') {\n        add('K')\n        pos++\n      } else if (token[pos + 1] === 'H') {\n        if (pos > 0 && token.substring(pos + 2, pos + 4) === 'AE') {\n          addSecondary('K', 'X')\n          pos++\n        } else if (pos === 0 &&\n                          (subMatch(1, 6, ['HARAC', 'HARIS']) ||\n                              subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM'])) &&\n                          token.substring(pos + 1, pos + 5) !== 'HORE') {\n          add('K')\n          pos++\n        } else {\n          if ((subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0, 3) === 'SCH') ||\n                      subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID']) ||\n                      subMatch(2, 3, ['T', 'S']) ||\n                      ((subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos === 0) &&\n                          subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W']))) {\n            add('K')\n          } else if (pos > 0) {\n            if (token.substring(0, 2) === 'MC') {\n              add('K')\n            } else {\n              addSecondary('X', 'K')\n            }\n          } else {\n            add('X')\n          }\n          pos++\n        }\n      } else if (token.substring(pos, pos + 2) === 'CZ' &&\n                  token.substring(pos - 2, pos + 1) !== 'WICZ') {\n        addSecondary('S', 'X')\n        pos++\n      } else if (token.substring(pos, pos + 3) === 'CIA') {\n        add('X')\n        pos += 2\n      } else if (token[pos + 1] === 'C' && pos !== 1 && token[0] !== 'M') {\n        if (['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 &&\n                      token.substring(pos + 2, pos + 4) !== 'HU') {\n          if ((pos === 1 && token[pos - 1] === 'A') ||\n                subMatch(-1, 4, ['UCCEE', 'UCCES'])) {\n            add('KS')\n          } else {\n            add('X')\n          }\n          pos += 2\n        } else {\n          add('K')\n          pos++\n        }\n      } else if (['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {\n        add('K')\n        pos++\n      } else if (['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {\n        if (subMatch(1, 3, ['IA', 'IE', 'IO'])) {\n          addSecondary('S', 'X')\n        } else {\n          add('S')\n        }\n        pos++\n      } else {\n        add('K')\n        if (token[pos + 1] === ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {\n          pos += 2\n        } else if (['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1 &&\n                      !subMatch(1, 3, ['CE', 'CI'])) {\n          pos++\n        }\n      }\n    }\n\n    function handleD () {\n      if (token[pos + 1] === 'G') {\n        if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n          add('J')\n          pos += 2\n        } else {\n          add('TK')\n          pos++\n        }\n      } else if (token[pos + 1] === 'T') {\n        add('T')\n        pos++\n      } else { addCompressedDouble('D', 'T') }\n    }\n\n    function handleG () {\n      if (token[pos + 1] === 'H') {\n        if (pos > 0 && !self.isVowel(token[pos - 1])) {\n          add('K')\n          pos++\n        } else if (pos === 0) {\n          if (token[pos + 2] === 'I') {\n            add('J')\n          } else {\n            add('K')\n          }\n          pos++\n        } else if (pos > 1 &&\n                  (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1 ||\n                      ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1 ||\n                      ['B', 'H'].indexOf(token[pos - 4]) > -1)) {\n          pos++\n        } else {\n          if (pos > 2 &&\n                          token[pos - 1] === 'U' &&\n                          ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {\n            add('F')\n          } else if (token[pos - 1] !== 'I') {\n            add('K')\n          }\n\n          pos++\n        }\n      } else if (token[pos + 1] === 'N') {\n        if (pos === 1 && startsWithVowel && !slavoGermanic) {\n          addSecondary('KN', 'N')\n        } else {\n          if (token.substring(pos + 2, pos + 4) !== 'EY' &&\n                          (token[pos + 1] !== 'Y' &&\n                              !slavoGermanic)) {\n            addSecondary('N', 'KN')\n          } else { add('KN') }\n        }\n        pos++\n      } else if (token.substring(pos + 1, pos + 3) === 'LI' && !slavoGermanic) {\n        addSecondary('KL', 'L')\n        pos++\n      } else if (pos === 0 && (token[pos + 1] === 'Y' ||\n                  subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {\n        addSecondary('K', 'J')\n      } else {\n        addCompressedDouble('G', 'K')\n      }\n    }\n\n    function handleH () {\n      // keep if starts a word or is surrounded by vowels\n      if ((pos === 0 || self.isVowel(token[pos - 1])) && self.isVowel(token[pos + 1])) {\n        add('H')\n        pos++\n      }\n    }\n\n    function handleJ () {\n      const jose = (token.substring(pos + 1, pos + 4) === 'OSE')\n\n      if (san || jose) {\n        if ((pos === 0 && token[pos + 4] === ' ') ||\n                      san) {\n          add('H')\n        } else { add('J', 'H') }\n      } else {\n        if (pos === 0/* && !jose */) {\n          addSecondary('J', 'A')\n        } else if (self.isVowel(token[pos - 1]) && !slavoGermanic &&\n                      (token[pos + 1] === 'A' || token[pos + 1] === 'O')) {\n          addSecondary('J', 'H')\n        } else if (pos === token.length - 1) {\n          addSecondary('J', ' ')\n        } else { addCompressedDouble('J') }\n      }\n    }\n\n    function handleL () {\n      if (token[pos + 1] === 'L') {\n        if (pos === token.length - 3 && (\n          subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || (\n            token.substring(pos - 1, pos + 3) === 'ALLE' &&\n            (subMatch(-2, -1, ['AS', 'OS']) > -1 ||\n            ['A', 'O'].indexOf(token[token.length - 1]) > -1)))) {\n          addSecondary('L', '')\n          pos++\n          return\n        }\n        pos++\n      }\n      add('L')\n    }\n\n    function handleM () {\n      addCompressedDouble('M')\n      if (token[pos - 1] === 'U' && token[pos + 1] === 'B' &&\n        ((pos === token.length - 2 || token.substring(pos + 2, pos + 4) === 'ER'))) { pos++ }\n    }\n\n    function handleP () {\n      if (token[pos + 1] === 'H') {\n        add('F')\n        pos++\n      } else {\n        addCompressedDouble('P')\n        if (token[pos + 1] === 'B') {\n          pos++\n        }\n      }\n    }\n\n    function handleR () {\n      if (pos === token.length - 1 && !slavoGermanic &&\n        token.substring(pos - 2, pos) === 'IE' &&\n        !subMatch(-4, -3, ['ME', 'MA'])) {\n        addSecondary('', 'R')\n      } else {\n        addCompressedDouble('R')\n      }\n    }\n\n    function handleS () {\n      if (pos === 0 && token.substring(0, 5) === 'SUGAR') {\n        addSecondary('X', 'S')\n      } else if (token[pos + 1] === 'H') {\n        if (subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {\n          add('S')\n        } else {\n          add('X')\n        }\n        pos++\n      } else if (subMatch(1, 3, ['IO', 'IA'])) {\n        if (slavoGermanic) {\n          add('S')\n        } else {\n          addSecondary('S', 'X')\n        }\n        pos++\n      } else if ((pos === 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1) ||\n                  token[pos + 1] === 'Z') {\n        addSecondary('S', 'X')\n        if (token[pos + 1] === 'Z') { pos++ }\n      } else if (token.substring(pos, pos + 2) === 'SC') {\n        if (token[pos + 2] === 'H') {\n          if (subMatch(3, 5, ['ER', 'EN'])) {\n            addSecondary('X', 'SK')\n          } else if (subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {\n            add('SK')\n          } else if (pos === 0 && !self.isVowel(token[3]) && token[3] !== 'W') {\n            addSecondary('X', 'S')\n          } else {\n            add('X')\n          }\n        } else if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n          add('S')\n        } else {\n          add('SK')\n        }\n\n        pos += 2\n      } else if (pos === token.length - 1 &&\n                  subMatch(-2, 0, ['AI', 'OI'])) {\n        addSecondary('', 'S')\n      } else if (token[pos + 1] !== 'L' && (\n        token[pos - 1] !== 'A' && token[pos - 1] !== 'I')) {\n        addCompressedDouble('S')\n        if (token[pos + 1] === 'Z') { pos++ }\n      }\n    }\n\n    function handleT () {\n      if (token.substring(pos + 1, pos + 4) === 'ION') {\n        add('XN')\n        pos += 3\n      } else if (subMatch(1, 3, ['IA', 'CH'])) {\n        add('X')\n        pos += 2\n      } else if (token[pos + 1] === 'H' ||\n                  token.substring(1, 2) === 'TH') {\n        if (subMatch(2, 4, ['OM', 'AM']) ||\n                      ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1 ||\n                      token.substring(0, 3) === 'SCH') {\n          add('T')\n        } else { addSecondary('0', 'T') }\n        pos++\n      } else {\n        addCompressedDouble('T')\n\n        if (token[pos + 1] === 'D') { pos++ }\n      }\n    }\n\n    function handleX () {\n      if (pos === 0) {\n        add('S')\n      } else if (!(pos === token.length - 1 &&\n        (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1 ||\n        ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {\n        add('KS')\n      }\n    }\n\n    function handleW () {\n      if (pos === 0) {\n        if (token[1] === 'H') {\n          add('A')\n        } else if (self.isVowel(token[1])) {\n          addSecondary('A', 'F')\n        }\n      } else if (subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY']) ||\n        token.substring(0, 3) === 'SCH' ||\n        (pos === token.length - 1 && self.isVowel(token[pos - 1]))) {\n        addSecondary('', 'F')\n        pos++\n      } else if (['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {\n        addSecondary('TS', 'FX')\n        pos += 3\n      }\n    }\n\n    function handleZ () {\n      if (token[pos + 1] === 'H') {\n        add('J')\n        pos++\n      } else if (subMatch(1, 3, ['ZO', 'ZI', 'ZA']) ||\n        (slavoGermanic && pos > 0 && token[pos - 1] !== 'T')) {\n        addSecondary('S', 'TS')\n        pos++\n      } else { addCompressedDouble('Z', 'S') }\n    }\n  }\n\n  compare (stringA, stringB) {\n    const encodingsA = this.process(stringA)\n    const encodingsB = this.process(stringB)\n\n    return encodingsA[0] === encodingsB[0] ||\n      encodingsA[1] === encodingsB[1]\n  }\n}\n\nmodule.exports = DoubleMetaphone\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}