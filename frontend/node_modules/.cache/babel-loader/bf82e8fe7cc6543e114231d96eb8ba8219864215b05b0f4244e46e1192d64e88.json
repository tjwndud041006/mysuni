{"ast":null,"code":"const trimEnd = /[,:;)\\]*.?~!\\u0022\\uFF02\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4—-]+$/;\nconst trimStart = /^[(['\"*~\\uFF02\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F]+/;\nconst punctToKill = /[,:;)('\"\\u201D\\]]/;\nconst isHyphen = /^[-–—]$/;\nconst hasSpace = / /;\nconst textFromTerms = function (terms, opts, keepSpace = true) {\n  let txt = '';\n  terms.forEach(t => {\n    let pre = t.pre || '';\n    let post = t.post || '';\n    if (opts.punctuation === 'some') {\n      pre = pre.replace(trimStart, '');\n      // replace a hyphen with a space\n      if (isHyphen.test(post)) {\n        post = ' ';\n      }\n      post = post.replace(punctToKill, '');\n      // cleanup exclamations\n      post = post.replace(/\\?!+/, '?');\n      post = post.replace(/!+/, '!');\n      post = post.replace(/\\?+/, '?');\n      // kill elipses\n      post = post.replace(/\\.{2,}/, '');\n      // kill abbreviation periods\n      if (t.tags.has('Abbreviation')) {\n        post = post.replace(/\\./, '');\n      }\n    }\n    if (opts.whitespace === 'some') {\n      pre = pre.replace(/\\s/, ''); //remove pre-whitespace\n      post = post.replace(/\\s+/, ' '); //replace post-whitespace with a space\n    }\n    if (!opts.keepPunct) {\n      pre = pre.replace(trimStart, '');\n      if (post === '-') {\n        post = ' ';\n      } else {\n        post = post.replace(trimEnd, '');\n      }\n    }\n    // grab the correct word format\n    let word = t[opts.form || 'text'] || t.normal || '';\n    if (opts.form === 'implicit') {\n      word = t.implicit || t.text;\n    }\n    if (opts.form === 'root' && t.implicit) {\n      word = t.root || t.implicit || t.normal;\n    }\n    // add an implicit space, for contractions\n    if ((opts.form === 'machine' || opts.form === 'implicit' || opts.form === 'root') && t.implicit) {\n      if (!post || !hasSpace.test(post)) {\n        post += ' ';\n      }\n    }\n    txt += pre + word + post;\n  });\n  if (keepSpace === false) {\n    txt = txt.trim();\n  }\n  if (opts.lowerCase === true) {\n    txt = txt.toLowerCase();\n  }\n  return txt;\n};\nconst textFromDoc = function (docs, opts) {\n  let text = '';\n  if (!docs || !docs[0] || !docs[0][0]) {\n    return text;\n  }\n  for (let i = 0; i < docs.length; i += 1) {\n    // middle\n    text += textFromTerms(docs[i], opts, true);\n  }\n  if (!opts.keepSpace) {\n    text = text.trim();\n  }\n  if (opts.keepEndPunct === false) {\n    // don't remove ':)' etc\n    if (!docs[0][0].tags.has('Emoticon')) {\n      text = text.replace(trimStart, '');\n    }\n    // remove ending periods\n    let last = docs[docs.length - 1];\n    if (!last[last.length - 1].tags.has('Emoticon')) {\n      text = text.replace(trimEnd, '');\n    }\n    // kill end quotations\n    if (text.endsWith(`'`) && !text.endsWith(`s'`)) {\n      text = text.replace(/'/, '');\n    }\n  }\n  if (opts.cleanWhitespace === true) {\n    text = text.trim();\n  }\n  return text;\n};\nexport { textFromDoc, textFromTerms };","map":{"version":3,"names":["trimEnd","trimStart","punctToKill","isHyphen","hasSpace","textFromTerms","terms","opts","keepSpace","txt","forEach","t","pre","post","punctuation","replace","test","tags","has","whitespace","keepPunct","word","form","normal","implicit","text","root","trim","lowerCase","toLowerCase","textFromDoc","docs","i","length","keepEndPunct","last","endsWith","cleanWhitespace"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/output/api/_text.js"],"sourcesContent":["const trimEnd = /[,:;)\\]*.?~!\\u0022\\uFF02\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4—-]+$/\nconst trimStart =\n  /^[(['\"*~\\uFF02\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F]+/\n\nconst punctToKill = /[,:;)('\"\\u201D\\]]/\nconst isHyphen = /^[-–—]$/\nconst hasSpace = / /\n\nconst textFromTerms = function (terms, opts, keepSpace = true) {\n  let txt = ''\n  terms.forEach(t => {\n    let pre = t.pre || ''\n    let post = t.post || ''\n    if (opts.punctuation === 'some') {\n      pre = pre.replace(trimStart, '')\n      // replace a hyphen with a space\n      if (isHyphen.test(post)) {\n        post = ' '\n      }\n      post = post.replace(punctToKill, '')\n      // cleanup exclamations\n      post = post.replace(/\\?!+/, '?')\n      post = post.replace(/!+/, '!')\n      post = post.replace(/\\?+/, '?')\n      // kill elipses\n      post = post.replace(/\\.{2,}/, '')\n      // kill abbreviation periods\n      if (t.tags.has('Abbreviation')) {\n        post = post.replace(/\\./, '')\n      }\n    }\n    if (opts.whitespace === 'some') {\n      pre = pre.replace(/\\s/, '') //remove pre-whitespace\n      post = post.replace(/\\s+/, ' ') //replace post-whitespace with a space\n    }\n    if (!opts.keepPunct) {\n      pre = pre.replace(trimStart, '')\n      if (post === '-') {\n        post = ' '\n      } else {\n        post = post.replace(trimEnd, '')\n      }\n    }\n    // grab the correct word format\n    let word = t[opts.form || 'text'] || t.normal || ''\n    if (opts.form === 'implicit') {\n      word = t.implicit || t.text\n    }\n    if (opts.form === 'root' && t.implicit) {\n      word = t.root || t.implicit || t.normal\n    }\n    // add an implicit space, for contractions\n    if ((opts.form === 'machine' || opts.form === 'implicit' || opts.form === 'root') && t.implicit) {\n      if (!post || !hasSpace.test(post)) {\n        post += ' '\n      }\n    }\n    txt += pre + word + post\n  })\n  if (keepSpace === false) {\n    txt = txt.trim()\n  }\n  if (opts.lowerCase === true) {\n    txt = txt.toLowerCase()\n  }\n  return txt\n}\n\nconst textFromDoc = function (docs, opts) {\n  let text = ''\n  if (!docs || !docs[0] || !docs[0][0]) {\n    return text\n  }\n  for (let i = 0; i < docs.length; i += 1) {\n    // middle\n    text += textFromTerms(docs[i], opts, true)\n  }\n  if (!opts.keepSpace) {\n    text = text.trim()\n  }\n  if (opts.keepEndPunct === false) {\n    // don't remove ':)' etc\n    if (!docs[0][0].tags.has('Emoticon')) {\n      text = text.replace(trimStart, '')\n    }\n    // remove ending periods\n    let last = docs[docs.length - 1]\n    if (!last[last.length - 1].tags.has('Emoticon')) {\n      text = text.replace(trimEnd, '')\n    }\n    // kill end quotations\n    if (text.endsWith(`'`) && !text.endsWith(`s'`)) {\n      text = text.replace(/'/, '')\n    }\n  }\n  if (opts.cleanWhitespace === true) {\n    text = text.trim()\n  }\n  return text\n}\nexport { textFromDoc, textFromTerms }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}