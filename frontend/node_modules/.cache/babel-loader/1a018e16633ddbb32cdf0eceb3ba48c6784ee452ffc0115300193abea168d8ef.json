{"ast":null,"code":"// lookup last word in the type-ahead prefixes\nconst typeahead = function (view) {\n  const prefixes = view.model.one.typeahead;\n  const docs = view.docs;\n  if (docs.length === 0 || Object.keys(prefixes).length === 0) {\n    return;\n  }\n  let lastPhrase = docs[docs.length - 1] || [];\n  let lastTerm = lastPhrase[lastPhrase.length - 1];\n  // if we've already put whitespace, end.\n  if (lastTerm.post) {\n    return;\n  }\n  // if we found something\n  if (prefixes.hasOwnProperty(lastTerm.normal)) {\n    let found = prefixes[lastTerm.normal];\n    // add full-word as an implicit result\n    lastTerm.implicit = found;\n    lastTerm.machine = found;\n    lastTerm.typeahead = true;\n    // tag it, as our assumed term\n    if (view.compute.preTagger) {\n      view.last().unTag('*').compute(['lexicon', 'preTagger']);\n    }\n  }\n};\nexport default {\n  typeahead\n};","map":{"version":3,"names":["typeahead","view","prefixes","model","one","docs","length","Object","keys","lastPhrase","lastTerm","post","hasOwnProperty","normal","found","implicit","machine","compute","preTagger","last","unTag"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/typeahead/compute.js"],"sourcesContent":["// lookup last word in the type-ahead prefixes\nconst typeahead = function (view) {\n  const prefixes = view.model.one.typeahead\n  const docs = view.docs\n  if (docs.length === 0 || Object.keys(prefixes).length === 0) {\n    return\n  }\n  let lastPhrase = docs[docs.length - 1] || []\n  let lastTerm = lastPhrase[lastPhrase.length - 1]\n  // if we've already put whitespace, end.\n  if (lastTerm.post) {\n    return\n  }\n  // if we found something\n  if (prefixes.hasOwnProperty(lastTerm.normal)) {\n    let found = prefixes[lastTerm.normal]\n    // add full-word as an implicit result\n    lastTerm.implicit = found\n    lastTerm.machine = found\n    lastTerm.typeahead = true\n    // tag it, as our assumed term\n    if (view.compute.preTagger) {\n      view.last().unTag('*').compute(['lexicon', 'preTagger'])\n    }\n  }\n}\n\nexport default { typeahead }\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAChC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAK,CAACC,GAAG,CAACJ,SAAS;EACzC,MAAMK,IAAI,GAAGJ,IAAI,CAACI,IAAI;EACtB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAIC,MAAM,CAACC,IAAI,CAACN,QAAQ,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;IAC3D;EACF;EACA,IAAIG,UAAU,GAAGJ,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE;EAC5C,IAAII,QAAQ,GAAGD,UAAU,CAACA,UAAU,CAACH,MAAM,GAAG,CAAC,CAAC;EAChD;EACA,IAAII,QAAQ,CAACC,IAAI,EAAE;IACjB;EACF;EACA;EACA,IAAIT,QAAQ,CAACU,cAAc,CAACF,QAAQ,CAACG,MAAM,CAAC,EAAE;IAC5C,IAAIC,KAAK,GAAGZ,QAAQ,CAACQ,QAAQ,CAACG,MAAM,CAAC;IACrC;IACAH,QAAQ,CAACK,QAAQ,GAAGD,KAAK;IACzBJ,QAAQ,CAACM,OAAO,GAAGF,KAAK;IACxBJ,QAAQ,CAACV,SAAS,GAAG,IAAI;IACzB;IACA,IAAIC,IAAI,CAACgB,OAAO,CAACC,SAAS,EAAE;MAC1BjB,IAAI,CAACkB,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACH,OAAO,CAAC,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC1D;EACF;AACF,CAAC;AAED,eAAe;EAAEjB;AAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}