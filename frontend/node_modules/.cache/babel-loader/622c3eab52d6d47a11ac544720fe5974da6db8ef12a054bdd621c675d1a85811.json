{"ast":null,"code":"import lexData from './_data.js';\nimport { unpack } from 'efrt';\nimport misc from './misc.js';\nimport frozenLex from './frozenLex.js';\nimport emoticons from './emoticons.js';\nimport toPlural from '../../methods/transform/nouns/toPlural/index.js';\nimport irregularPlurals from '../irregulars/plurals.js';\n// unpack our lexicon of words\n// (found in ./lexicon/)\n\n// more clever things are done on the data later\n//  - once the plugin is applied\nconst hasSwitch = /\\|/;\nlet lexicon = misc;\nlet switches = {};\nconst tmpModel = {\n  two: {\n    irregularPlurals,\n    uncountable: {}\n  }\n};\nObject.keys(lexData).forEach(tag => {\n  let wordsObj = unpack(lexData[tag]);\n  // POS tag, or something fancier?\n  if (!hasSwitch.test(tag)) {\n    // set them as simple word key-value lookup\n    Object.keys(wordsObj).forEach(w => {\n      lexicon[w] = tag;\n    });\n    return;\n  }\n  // add them as seperate key-val object\n  Object.keys(wordsObj).forEach(w => {\n    switches[w] = tag;\n    // pluralize Noun|Verb switches\n    if (tag === 'Noun|Verb') {\n      let plural = toPlural(w, tmpModel);\n      switches[plural] = 'Plural|Verb';\n    }\n  });\n});\n// add ':)'\nemoticons.forEach(str => lexicon[str] = 'Emoticon');\n\n// misc cleanup\ndelete lexicon[''];\ndelete lexicon[null];\ndelete lexicon[' '];\nexport { lexicon, switches, frozenLex };","map":{"version":3,"names":["lexData","unpack","misc","frozenLex","emoticons","toPlural","irregularPlurals","hasSwitch","lexicon","switches","tmpModel","two","uncountable","Object","keys","forEach","tag","wordsObj","test","w","plural","str"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/model/lexicon/index.js"],"sourcesContent":["import lexData from './_data.js'\nimport { unpack } from 'efrt'\nimport misc from './misc.js'\nimport frozenLex from './frozenLex.js'\nimport emoticons from './emoticons.js'\nimport toPlural from '../../methods/transform/nouns/toPlural/index.js'\nimport irregularPlurals from '../irregulars/plurals.js'\n// unpack our lexicon of words\n// (found in ./lexicon/)\n\n// more clever things are done on the data later\n//  - once the plugin is applied\nconst hasSwitch = /\\|/\nlet lexicon = misc\nlet switches = {}\n\nconst tmpModel = { two: { irregularPlurals, uncountable: {} } }\n\nObject.keys(lexData).forEach(tag => {\n  let wordsObj = unpack(lexData[tag])\n  // POS tag, or something fancier?\n  if (!hasSwitch.test(tag)) {\n    // set them as simple word key-value lookup\n    Object.keys(wordsObj).forEach(w => {\n      lexicon[w] = tag\n    })\n    return\n  }\n  // add them as seperate key-val object\n  Object.keys(wordsObj).forEach(w => {\n    switches[w] = tag\n    // pluralize Noun|Verb switches\n    if (tag === 'Noun|Verb') {\n      let plural = toPlural(w, tmpModel)\n      switches[plural] = 'Plural|Verb'\n    }\n  })\n})\n// add ':)'\nemoticons.forEach(str => (lexicon[str] = 'Emoticon'))\n\n// misc cleanup\ndelete lexicon['']\ndelete lexicon[null]\ndelete lexicon[' ']\n\nexport { lexicon, switches, frozenLex }\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,YAAY;AAChC,SAASC,MAAM,QAAQ,MAAM;AAC7B,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,iDAAiD;AACtE,OAAOC,gBAAgB,MAAM,0BAA0B;AACvD;AACA;;AAEA;AACA;AACA,MAAMC,SAAS,GAAG,IAAI;AACtB,IAAIC,OAAO,GAAGN,IAAI;AAClB,IAAIO,QAAQ,GAAG,CAAC,CAAC;AAEjB,MAAMC,QAAQ,GAAG;EAAEC,GAAG,EAAE;IAAEL,gBAAgB;IAAEM,WAAW,EAAE,CAAC;EAAE;AAAE,CAAC;AAE/DC,MAAM,CAACC,IAAI,CAACd,OAAO,CAAC,CAACe,OAAO,CAACC,GAAG,IAAI;EAClC,IAAIC,QAAQ,GAAGhB,MAAM,CAACD,OAAO,CAACgB,GAAG,CAAC,CAAC;EACnC;EACA,IAAI,CAACT,SAAS,CAACW,IAAI,CAACF,GAAG,CAAC,EAAE;IACxB;IACAH,MAAM,CAACC,IAAI,CAACG,QAAQ,CAAC,CAACF,OAAO,CAACI,CAAC,IAAI;MACjCX,OAAO,CAACW,CAAC,CAAC,GAAGH,GAAG;IAClB,CAAC,CAAC;IACF;EACF;EACA;EACAH,MAAM,CAACC,IAAI,CAACG,QAAQ,CAAC,CAACF,OAAO,CAACI,CAAC,IAAI;IACjCV,QAAQ,CAACU,CAAC,CAAC,GAAGH,GAAG;IACjB;IACA,IAAIA,GAAG,KAAK,WAAW,EAAE;MACvB,IAAII,MAAM,GAAGf,QAAQ,CAACc,CAAC,EAAET,QAAQ,CAAC;MAClCD,QAAQ,CAACW,MAAM,CAAC,GAAG,aAAa;IAClC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACF;AACAhB,SAAS,CAACW,OAAO,CAACM,GAAG,IAAKb,OAAO,CAACa,GAAG,CAAC,GAAG,UAAW,CAAC;;AAErD;AACA,OAAOb,OAAO,CAAC,EAAE,CAAC;AAClB,OAAOA,OAAO,CAAC,IAAI,CAAC;AACpB,OAAOA,OAAO,CAAC,GAAG,CAAC;AAEnB,SAASA,OAAO,EAAEC,QAAQ,EAAEN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}