{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass StringCounter {\n  constructor() {\n    this.counter = {};\n  }\n  count(str) {\n    if (!str) {\n      return;\n    }\n    if (this.counter[str]) {\n      this.counter[str]++;\n    } else {\n      this.counter[str] = 1;\n    }\n  }\n  strings() {\n    return Object.keys(this.counter);\n  }\n}\nexports.default = StringCounter;","map":{"version":3,"names":["StringCounter","constructor","counter","count","str","strings","Object","keys","exports","default"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/rake-js/src/lib/data_structures/string_counter.ts"],"sourcesContent":["/**\n * Helper Class to keep track of strings (words, stems, ) and their occurences\n */\nexport default class StringCounter {\n  // the actual data store implemented with a plain object\n  private counter: { [word: string]: number } = {}\n\n  // increase the counter for a given string\n  public count(str: string): void {\n    if (!str) {\n      return\n    }\n    if (this.counter[str]) {\n      this.counter[str]++\n    } else {\n      this.counter[str] = 1\n    }\n  }\n\n  // return a list of all strings counted yet\n  public strings(): string[] {\n    return Object.keys(this.counter)\n  }\n}\n"],"mappings":";;;;;AAGA,MAAAA,aAAA;EAAAC,YAAA;IAEU,KAAAC,OAAO,GAA+B,EAAE;EAkBlD;EAfSC,KAAKA,CAACC,GAAW;IACtB,IAAI,CAACA,GAAG,EAAE;MACR;IACF;IACA,IAAI,IAAI,CAACF,OAAO,CAACE,GAAG,CAAC,EAAE;MACrB,IAAI,CAACF,OAAO,CAACE,GAAG,CAAC,EAAE;IACrB,CAAC,MAAM;MACL,IAAI,CAACF,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC;IACvB;EACF;EAGOC,OAAOA,CAAA;IACZ,OAAOC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC;EAClC;;AAnBFM,OAAA,CAAAC,OAAA,GAAAT,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}