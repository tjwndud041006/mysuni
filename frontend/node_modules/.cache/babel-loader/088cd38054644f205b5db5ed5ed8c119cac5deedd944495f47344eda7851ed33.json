{"ast":null,"code":"// Copyright (c) 2011, Chris Umbel, James Coglan\n// Matrix class - depends on Vector.\n\nvar fs = require('fs');\nvar Sylvester = require('./sylvester');\nvar Vector = require('./vector');\n\n// augment a matrix M with identity rows/cols\nfunction identSize(M, m, n, k) {\n  var e = M.elements;\n  var i = k - 1;\n  while (i--) {\n    var row = [];\n    for (var j = 0; j < n; j++) row.push(j == i ? 1 : 0);\n    e.unshift(row);\n  }\n  for (var i = k - 1; i < m; i++) {\n    while (e[i].length < n) e[i].unshift(0);\n  }\n  return $M(e);\n}\nfunction pca(X) {\n  var Sigma = X.transpose().x(X).x(1 / X.rows());\n  var svd = Sigma.svd();\n  return {\n    U: svd.U,\n    S: svd.S\n  };\n}\nfunction Matrix() {}\nMatrix.prototype = {\n  pcaProject: function (k, U) {\n    var U = U || pca(this).U;\n    var Ureduce = U.slice(1, U.rows(), 1, k);\n    return {\n      Z: this.x(Ureduce),\n      U: U\n    };\n  },\n  pcaRecover: function (U) {\n    var k = this.cols();\n    var Ureduce = U.slice(1, U.rows(), 1, k);\n    return this.x(Ureduce.transpose());\n  },\n  triu: function (k) {\n    if (!k) k = 0;\n    return this.map(function (x, i, j) {\n      return j - i >= k ? x : 0;\n    });\n  },\n  svd: function () {\n    var A = this;\n    var U = Matrix.I(A.rows());\n    var S = A.transpose();\n    var V = Matrix.I(A.cols());\n    var err = Number.MAX_VALUE;\n    var i = 0;\n    var maxLoop = 100;\n    while (err > 2.2737e-13 && i < maxLoop) {\n      var qr = S.transpose().qr();\n      S = qr.R;\n      U = U.x(qr.Q);\n      qr = S.transpose().qr();\n      V = V.x(qr.Q);\n      S = qr.R;\n      var e = S.triu(1).unroll().norm();\n      var f = S.diagonal().norm();\n      if (f == 0) f = 1;\n      err = e / f;\n      i++;\n    }\n    var ss = S.diagonal();\n    var s = [];\n    for (var i = 1; i <= ss.cols(); i++) {\n      var ssn = ss.e(i);\n      s.push(Math.abs(ssn));\n      if (ssn < 0) {\n        for (var j = 0; j < U.rows(); j++) {\n          U.elements[j][i - 1] = -U.elements[j][i - 1];\n        }\n      }\n    }\n    return {\n      U: U,\n      S: $V(s).toDiagonalMatrix(),\n      V: V\n    };\n  },\n  unroll: function () {\n    var v = [];\n    for (var i = 1; i <= this.cols(); i++) {\n      for (var j = 1; j <= this.rows(); j++) {\n        v.push(this.e(j, i));\n      }\n    }\n    return $V(v);\n  },\n  qr: function () {\n    var m = this.rows();\n    var n = this.cols();\n    var Q = Matrix.I(m);\n    var A = this;\n    for (var k = 1; k < Math.min(m, n); k++) {\n      var ak = A.slice(k, 0, k, k).col(1);\n      var oneZero = [1];\n      while (oneZero.length <= m - k) oneZero.push(0);\n      oneZero = $V(oneZero);\n      var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));\n      var Vk = $M(vk);\n      var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));\n      var Qk = identSize(Hk, m, n, k);\n      A = Qk.x(A);\n      Q = Q.x(Qk);\n    }\n    return {\n      Q: Q,\n      R: A\n    };\n  },\n  slice: function (startRow, endRow, startCol, endCol) {\n    var x = [];\n    if (endRow == 0) endRow = this.rows();\n    if (endCol == 0) endCol = this.cols();\n    for (i = startRow; i <= endRow; i++) {\n      var row = [];\n      for (j = startCol; j <= endCol; j++) {\n        row.push(this.e(i, j));\n      }\n      x.push(row);\n    }\n    return $M(x);\n  },\n  // Returns element (i,j) of the matrix\n  e: function (i, j) {\n    if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) {\n      return null;\n    }\n    return this.elements[i - 1][j - 1];\n  },\n  // Returns row k of the matrix as a vector\n  row: function (i) {\n    if (i > this.elements.length) {\n      return null;\n    }\n    return $V(this.elements[i - 1]);\n  },\n  // Returns column k of the matrix as a vector\n  col: function (j) {\n    if (j > this.elements[0].length) {\n      return null;\n    }\n    var col = [],\n      n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      col.push(this.elements[i][j - 1]);\n    }\n    return $V(col);\n  },\n  // Returns the number of rows/columns the matrix has\n  dimensions: function () {\n    return {\n      rows: this.elements.length,\n      cols: this.elements[0].length\n    };\n  },\n  // Returns the number of rows in the matrix\n  rows: function () {\n    return this.elements.length;\n  },\n  // Returns the number of columns in the matrix\n  cols: function () {\n    return this.elements[0].length;\n  },\n  // Returns true iff the matrix is equal to the argument. You can supply\n  // a vector as the argument, in which case the receiver must be a\n  // one-column matrix equal to the vector.\n  eql: function (matrix) {\n    var M = matrix.elements || matrix;\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n    if (this.elements.length != M.length || this.elements[0].length != M[0].length) {\n      return false;\n    }\n    var i = this.elements.length,\n      nj = this.elements[0].length,\n      j;\n    while (i--) {\n      j = nj;\n      while (j--) {\n        if (Math.abs(this.elements[i][j] - M[i][j]) > Sylvester.precision) {\n          return false;\n        }\n      }\n    }\n    return true;\n  },\n  // Returns a copy of the matrix\n  dup: function () {\n    return Matrix.create(this.elements);\n  },\n  // Maps the matrix to another matrix (of the same dimensions) according to the given function\n  map: function (fn) {\n    var els = [],\n      i = this.elements.length,\n      nj = this.elements[0].length,\n      j;\n    while (i--) {\n      j = nj;\n      els[i] = [];\n      while (j--) {\n        els[i][j] = fn(this.elements[i][j], i + 1, j + 1);\n      }\n    }\n    return Matrix.create(els);\n  },\n  // Returns true iff the argument has the same dimensions as the matrix\n  isSameSizeAs: function (matrix) {\n    var M = matrix.elements || matrix;\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n    return this.elements.length == M.length && this.elements[0].length == M[0].length;\n  },\n  // Returns the result of adding the argument to the matrix\n  add: function (matrix) {\n    if (typeof matrix == 'number') {\n      return this.map(function (x, i, j) {\n        return x + matrix;\n      });\n    } else {\n      var M = matrix.elements || matrix;\n      if (typeof M[0][0] == 'undefined') {\n        M = Matrix.create(M).elements;\n      }\n      if (!this.isSameSizeAs(M)) {\n        return null;\n      }\n      return this.map(function (x, i, j) {\n        return x + M[i - 1][j - 1];\n      });\n    }\n  },\n  // Returns the result of subtracting the argument from the matrix\n  subtract: function (matrix) {\n    if (typeof matrix == 'number') {\n      return this.map(function (x, i, j) {\n        return x - matrix;\n      });\n    } else {\n      var M = matrix.elements || matrix;\n      if (typeof M[0][0] == 'undefined') {\n        M = Matrix.create(M).elements;\n      }\n      if (!this.isSameSizeAs(M)) {\n        return null;\n      }\n      return this.map(function (x, i, j) {\n        return x - M[i - 1][j - 1];\n      });\n    }\n  },\n  // Returns true iff the matrix can multiply the argument from the left\n  canMultiplyFromLeft: function (matrix) {\n    var M = matrix.elements || matrix;\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n    // this.columns should equal matrix.rows\n    return this.elements[0].length == M.length;\n  },\n  // Returns the result of a multiplication-style operation the matrix from the right by the argument.\n  // If the argument is a scalar then just operate on all the elements. If the argument is\n  // a vector, a vector is returned, which saves you having to remember calling\n  // col(1) on the result.\n  mulOp: function (matrix, op) {\n    if (!matrix.elements) {\n      return this.map(function (x) {\n        return op(x, matrix);\n      });\n    }\n    var returnVector = matrix.modulus ? true : false;\n    var M = matrix.elements || matrix;\n    if (typeof M[0][0] == 'undefined') M = Matrix.create(M).elements;\n    if (!this.canMultiplyFromLeft(M)) return null;\n    var e = this.elements,\n      rowThis,\n      rowElem,\n      elements = [],\n      sum,\n      m = e.length,\n      n = M[0].length,\n      o = e[0].length,\n      i = m,\n      j,\n      k;\n    while (i--) {\n      rowElem = [];\n      rowThis = e[i];\n      j = n;\n      while (j--) {\n        sum = 0;\n        k = o;\n        while (k--) {\n          sum += op(rowThis[k], M[k][j]);\n        }\n        rowElem[j] = sum;\n      }\n      elements[i] = rowElem;\n    }\n    var M = Matrix.create(elements);\n    return returnVector ? M.col(1) : M;\n  },\n  // Returns the result of dividing the matrix from the right by the argument.\n  // If the argument is a scalar then just divide all the elements. If the argument is\n  // a vector, a vector is returned, which saves you having to remember calling\n  // col(1) on the result.\n  div: function (matrix) {\n    return this.mulOp(matrix, function (x, y) {\n      return x / y;\n    });\n  },\n  // Returns the result of multiplying the matrix from the right by the argument.\n  // If the argument is a scalar then just multiply all the elements. If the argument is\n  // a vector, a vector is returned, which saves you having to remember calling\n  // col(1) on the result.\n  multiply: function (matrix) {\n    return this.mulOp(matrix, function (x, y) {\n      return x * y;\n    });\n  },\n  x: function (matrix) {\n    return this.multiply(matrix);\n  },\n  elementMultiply: function (v) {\n    return this.map(function (k, i, j) {\n      return v.e(i, j) * k;\n    });\n  },\n  sum: function () {\n    var sum = 0;\n    this.map(function (x) {\n      sum += x;\n    });\n    return sum;\n  },\n  // Returns a Vector of each colum averaged.\n  mean: function () {\n    var dim = this.dimensions();\n    var r = [];\n    for (var i = 1; i <= dim.cols; i++) {\n      r.push(this.col(i).sum() / dim.rows);\n    }\n    return $V(r);\n  },\n  column: function (n) {\n    return this.col(n);\n  },\n  log: function () {\n    return this.map(function (x) {\n      return Math.log(x);\n    });\n  },\n  // Returns a submatrix taken from the matrix\n  // Argument order is: start row, start col, nrows, ncols\n  // Element selection wraps if the required index is outside the matrix's bounds, so you could\n  // use this to perform row/column cycling or copy-augmenting.\n  minor: function (a, b, c, d) {\n    var elements = [],\n      ni = c,\n      i,\n      nj,\n      j;\n    var rows = this.elements.length,\n      cols = this.elements[0].length;\n    while (ni--) {\n      i = c - ni - 1;\n      elements[i] = [];\n      nj = d;\n      while (nj--) {\n        j = d - nj - 1;\n        elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];\n      }\n    }\n    return Matrix.create(elements);\n  },\n  // Returns the transpose of the matrix\n  transpose: function () {\n    var rows = this.elements.length,\n      i,\n      cols = this.elements[0].length,\n      j;\n    var elements = [],\n      i = cols;\n    while (i--) {\n      j = rows;\n      elements[i] = [];\n      while (j--) {\n        elements[i][j] = this.elements[j][i];\n      }\n    }\n    return Matrix.create(elements);\n  },\n  // Returns true iff the matrix is square\n  isSquare: function () {\n    return this.elements.length == this.elements[0].length;\n  },\n  // Returns the (absolute) largest element of the matrix\n  max: function () {\n    var m = 0,\n      i = this.elements.length,\n      nj = this.elements[0].length,\n      j;\n    while (i--) {\n      j = nj;\n      while (j--) {\n        if (Math.abs(this.elements[i][j]) > Math.abs(m)) {\n          m = this.elements[i][j];\n        }\n      }\n    }\n    return m;\n  },\n  // Returns the indeces of the first match found by reading row-by-row from left to right\n  indexOf: function (x) {\n    var index = null,\n      ni = this.elements.length,\n      i,\n      nj = this.elements[0].length,\n      j;\n    for (i = 0; i < ni; i++) {\n      for (j = 0; j < nj; j++) {\n        if (this.elements[i][j] == x) {\n          return {\n            i: i + 1,\n            j: j + 1\n          };\n        }\n      }\n    }\n    return null;\n  },\n  // If the matrix is square, returns the diagonal elements as a vector.\n  // Otherwise, returns null.\n  diagonal: function () {\n    if (!this.isSquare) {\n      return null;\n    }\n    var els = [],\n      n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      els.push(this.elements[i][i]);\n    }\n    return $V(els);\n  },\n  // Make the matrix upper (right) triangular by Gaussian elimination.\n  // This method only adds multiples of rows to other rows. No rows are\n  // scaled up or switched, and the determinant is preserved.\n  toRightTriangular: function () {\n    var M = this.dup(),\n      els;\n    var n = this.elements.length,\n      i,\n      j,\n      np = this.elements[0].length,\n      p;\n    for (i = 0; i < n; i++) {\n      if (M.elements[i][i] == 0) {\n        for (j = i + 1; j < n; j++) {\n          if (M.elements[j][i] != 0) {\n            els = [];\n            for (p = 0; p < np; p++) {\n              els.push(M.elements[i][p] + M.elements[j][p]);\n            }\n            M.elements[i] = els;\n            break;\n          }\n        }\n      }\n      if (M.elements[i][i] != 0) {\n        for (j = i + 1; j < n; j++) {\n          var multiplier = M.elements[j][i] / M.elements[i][i];\n          els = [];\n          for (p = 0; p < np; p++) {\n            // Elements with column numbers up to an including the number\n            // of the row that we're subtracting can safely be set straight to\n            // zero, since that's the point of this routine and it avoids having\n            // to loop over and correct rounding errors later\n            els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n          }\n          M.elements[j] = els;\n        }\n      }\n    }\n    return M;\n  },\n  toUpperTriangular: function () {\n    return this.toRightTriangular();\n  },\n  // Returns the determinant for square matrices\n  determinant: function () {\n    if (!this.isSquare()) {\n      return null;\n    }\n    if (this.cols == 1 && this.rows == 1) {\n      return this.row(1);\n    }\n    if (this.cols == 0 && this.rows == 0) {\n      return 1;\n    }\n    var M = this.toRightTriangular();\n    var det = M.elements[0][0],\n      n = M.elements.length;\n    for (var i = 1; i < n; i++) {\n      det = det * M.elements[i][i];\n    }\n    return det;\n  },\n  det: function () {\n    return this.determinant();\n  },\n  // Returns true iff the matrix is singular\n  isSingular: function () {\n    return this.isSquare() && this.determinant() === 0;\n  },\n  // Returns the trace for square matrices\n  trace: function () {\n    if (!this.isSquare()) {\n      return null;\n    }\n    var tr = this.elements[0][0],\n      n = this.elements.length;\n    for (var i = 1; i < n; i++) {\n      tr += this.elements[i][i];\n    }\n    return tr;\n  },\n  tr: function () {\n    return this.trace();\n  },\n  // Returns the rank of the matrix\n  rank: function () {\n    var M = this.toRightTriangular(),\n      rank = 0;\n    var i = this.elements.length,\n      nj = this.elements[0].length,\n      j;\n    while (i--) {\n      j = nj;\n      while (j--) {\n        if (Math.abs(M.elements[i][j]) > Sylvester.precision) {\n          rank++;\n          break;\n        }\n      }\n    }\n    return rank;\n  },\n  rk: function () {\n    return this.rank();\n  },\n  // Returns the result of attaching the given argument to the right-hand side of the matrix\n  augment: function (matrix) {\n    var M = matrix.elements || matrix;\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n    var T = this.dup(),\n      cols = T.elements[0].length;\n    var i = T.elements.length,\n      nj = M[0].length,\n      j;\n    if (i != M.length) {\n      return null;\n    }\n    while (i--) {\n      j = nj;\n      while (j--) {\n        T.elements[i][cols + j] = M[i][j];\n      }\n    }\n    return T;\n  },\n  // Returns the inverse (if one exists) using Gauss-Jordan\n  inverse: function () {\n    if (!this.isSquare() || this.isSingular()) {\n      return null;\n    }\n    var n = this.elements.length,\n      i = n,\n      j;\n    var M = this.augment(Matrix.I(n)).toRightTriangular();\n    var np = M.elements[0].length,\n      p,\n      els,\n      divisor;\n    var inverse_elements = [],\n      new_element;\n    // Matrix is non-singular so there will be no zeros on the diagonal\n    // Cycle through rows from last to first\n    while (i--) {\n      // First, normalise diagonal elements to 1\n      els = [];\n      inverse_elements[i] = [];\n      divisor = M.elements[i][i];\n      for (p = 0; p < np; p++) {\n        new_element = M.elements[i][p] / divisor;\n        els.push(new_element);\n        // Shuffle off the current row of the right hand side into the results\n        // array as it will not be modified by later runs through this loop\n        if (p >= n) {\n          inverse_elements[i].push(new_element);\n        }\n      }\n      M.elements[i] = els;\n      // Then, subtract this row from those above it to\n      // give the identity matrix on the left hand side\n      j = i;\n      while (j--) {\n        els = [];\n        for (p = 0; p < np; p++) {\n          els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n        }\n        M.elements[j] = els;\n      }\n    }\n    return Matrix.create(inverse_elements);\n  },\n  inv: function () {\n    return this.inverse();\n  },\n  // Returns the result of rounding all the elements\n  round: function () {\n    return this.map(function (x) {\n      return Math.round(x);\n    });\n  },\n  // Returns a copy of the matrix with elements set to the given value if they\n  // differ from it by less than Sylvester.precision\n  snapTo: function (x) {\n    return this.map(function (p) {\n      return Math.abs(p - x) <= Sylvester.precision ? x : p;\n    });\n  },\n  // Returns a string representation of the matrix\n  inspect: function () {\n    var matrix_rows = [];\n    var n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      matrix_rows.push($V(this.elements[i]).inspect());\n    }\n    return matrix_rows.join('\\n');\n  },\n  // Returns a array representation of the matrix\n  toArray: function () {\n    var matrix_rows = [];\n    var n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      matrix_rows.push(this.elements[i]);\n    }\n    return matrix_rows;\n  },\n  // Set the matrix's elements from an array. If the argument passed\n  // is a vector, the resulting matrix will be a single column.\n  setElements: function (els) {\n    var i,\n      j,\n      elements = els.elements || els;\n    if (typeof elements[0][0] != 'undefined') {\n      i = elements.length;\n      this.elements = [];\n      while (i--) {\n        j = elements[i].length;\n        this.elements[i] = [];\n        while (j--) {\n          this.elements[i][j] = elements[i][j];\n        }\n      }\n      return this;\n    }\n    var n = elements.length;\n    this.elements = [];\n    for (i = 0; i < n; i++) {\n      this.elements.push([elements[i]]);\n    }\n    return this;\n  },\n  maxColumnIndexes: function () {\n    var maxes = [];\n    for (var i = 1; i <= this.rows(); i++) {\n      var max = null;\n      var maxIndex = -1;\n      for (var j = 1; j <= this.cols(); j++) {\n        if (max === null || this.e(i, j) > max) {\n          max = this.e(i, j);\n          maxIndex = j;\n        }\n      }\n      maxes.push(maxIndex);\n    }\n    return $V(maxes);\n  },\n  maxColumns: function () {\n    var maxes = [];\n    for (var i = 1; i <= this.rows(); i++) {\n      var max = null;\n      for (var j = 1; j <= this.cols(); j++) {\n        if (max === null || this.e(i, j) > max) {\n          max = this.e(i, j);\n        }\n      }\n      maxes.push(max);\n    }\n    return $V(maxes);\n  },\n  minColumnIndexes: function () {\n    var mins = [];\n    for (var i = 1; i <= this.rows(); i++) {\n      var min = null;\n      var minIndex = -1;\n      for (var j = 1; j <= this.cols(); j++) {\n        if (min === null || this.e(i, j) < min) {\n          min = this.e(i, j);\n          minIndex = j;\n        }\n      }\n      mins.push(minIndex);\n    }\n    return $V(mins);\n  },\n  minColumns: function () {\n    var mins = [];\n    for (var i = 1; i <= this.rows(); i++) {\n      var min = null;\n      for (var j = 1; j <= this.cols(); j++) {\n        if (min === null || this.e(i, j) < min) {\n          min = this.e(i, j);\n        }\n      }\n      mins.push(min);\n    }\n    return $V(mins);\n  }\n};\n\n// Constructor function\nMatrix.create = function (elements) {\n  var M = new Matrix();\n  return M.setElements(elements);\n};\n\n// Identity matrix of size n\nMatrix.I = function (n) {\n  var els = [],\n    i = n,\n    j;\n  while (i--) {\n    j = n;\n    els[i] = [];\n    while (j--) {\n      els[i][j] = i == j ? 1 : 0;\n    }\n  }\n  return Matrix.create(els);\n};\nMatrix.loadFile = function (file) {\n  var contents = fs.readFileSync(file, 'utf-8');\n  var matrix = [];\n  var rowArray = contents.split('\\n');\n  for (var i = 0; i < rowArray.length; i++) {\n    var d = rowArray[i].split(',');\n    if (d.length > 1) {\n      matrix.push(d);\n    }\n  }\n  var M = new Matrix();\n  return M.setElements(matrix);\n};\n\n// Diagonal matrix - all off-diagonal elements are zero\nMatrix.Diagonal = function (elements) {\n  var i = elements.length;\n  var M = Matrix.I(i);\n  while (i--) {\n    M.elements[i][i] = elements[i];\n  }\n  return M;\n};\n\n// Rotation matrix about some axis. If no axis is\n// supplied, assume we're after a 2D transform\nMatrix.Rotation = function (theta, a) {\n  if (!a) {\n    return Matrix.create([[Math.cos(theta), -Math.sin(theta)], [Math.sin(theta), Math.cos(theta)]]);\n  }\n  var axis = a.dup();\n  if (axis.elements.length != 3) {\n    return null;\n  }\n  var mod = axis.modulus();\n  var x = axis.elements[0] / mod,\n    y = axis.elements[1] / mod,\n    z = axis.elements[2] / mod;\n  var s = Math.sin(theta),\n    c = Math.cos(theta),\n    t = 1 - c;\n  // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n  // That proof rotates the co-ordinate system so theta\n  // becomes -theta and sin becomes -sin here.\n  return Matrix.create([[t * x * x + c, t * x * y - s * z, t * x * z + s * y], [t * x * y + s * z, t * y * y + c, t * y * z - s * x], [t * x * z - s * y, t * y * z + s * x, t * z * z + c]]);\n};\n\n// Special case rotations\nMatrix.RotationX = function (t) {\n  var c = Math.cos(t),\n    s = Math.sin(t);\n  return Matrix.create([[1, 0, 0], [0, c, -s], [0, s, c]]);\n};\nMatrix.RotationY = function (t) {\n  var c = Math.cos(t),\n    s = Math.sin(t);\n  return Matrix.create([[c, 0, s], [0, 1, 0], [-s, 0, c]]);\n};\nMatrix.RotationZ = function (t) {\n  var c = Math.cos(t),\n    s = Math.sin(t);\n  return Matrix.create([[c, -s, 0], [s, c, 0], [0, 0, 1]]);\n};\n\n// Random matrix of n rows, m columns\nMatrix.Random = function (n, m) {\n  if (arguments.length === 1) m = n;\n  return Matrix.Zero(n, m).map(function () {\n    return Math.random();\n  });\n};\nMatrix.Fill = function (n, m, v) {\n  if (arguments.length === 2) {\n    v = m;\n    m = n;\n  }\n  var els = [],\n    i = n,\n    j;\n  while (i--) {\n    j = m;\n    els[i] = [];\n    while (j--) {\n      els[i][j] = v;\n    }\n  }\n  return Matrix.create(els);\n};\n\n// Matrix filled with zeros\nMatrix.Zero = function (n, m) {\n  return Matrix.Fill(n, m, 0);\n};\n\n// Matrix filled with zeros\nMatrix.Zeros = function (n, m) {\n  return Matrix.Zero(n, m);\n};\n\n// Matrix filled with ones\nMatrix.One = function (n, m) {\n  return Matrix.Fill(n, m, 1);\n};\n\n// Matrix filled with ones\nMatrix.Ones = function (n, m) {\n  return Matrix.One(n, m);\n};\nmodule.exports = Matrix;","map":{"version":3,"names":["fs","require","Sylvester","Vector","identSize","M","m","n","k","e","elements","i","row","j","push","unshift","length","$M","pca","X","Sigma","transpose","x","rows","svd","U","S","Matrix","prototype","pcaProject","Ureduce","slice","Z","pcaRecover","cols","triu","map","A","I","V","err","Number","MAX_VALUE","maxLoop","qr","R","Q","unroll","norm","f","diagonal","ss","s","ssn","Math","abs","$V","toDiagonalMatrix","v","min","ak","col","oneZero","vk","add","sign","Vk","Hk","subtract","div","Qk","startRow","endRow","startCol","endCol","dimensions","eql","matrix","create","nj","precision","dup","fn","els","isSameSizeAs","canMultiplyFromLeft","mulOp","op","returnVector","modulus","rowThis","rowElem","sum","o","y","multiply","elementMultiply","mean","dim","r","column","log","minor","a","b","c","d","ni","isSquare","max","indexOf","index","toRightTriangular","np","p","multiplier","toUpperTriangular","determinant","det","isSingular","trace","tr","rank","rk","augment","T","inverse","divisor","inverse_elements","new_element","inv","round","snapTo","inspect","matrix_rows","join","toArray","setElements","maxColumnIndexes","maxes","maxIndex","maxColumns","minColumnIndexes","mins","minIndex","minColumns","loadFile","file","contents","readFileSync","rowArray","split","Diagonal","Rotation","theta","cos","sin","axis","mod","z","t","RotationX","RotationY","RotationZ","Random","arguments","Zero","random","Fill","Zeros","One","Ones","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/sylvester/lib/node-sylvester/matrix.js"],"sourcesContent":["// Copyright (c) 2011, Chris Umbel, James Coglan\n// Matrix class - depends on Vector.\n\nvar fs = require('fs');\nvar Sylvester = require('./sylvester');\nvar Vector = require('./vector');\n\n// augment a matrix M with identity rows/cols\nfunction identSize(M, m, n, k) {\n    var e = M.elements;\n    var i = k - 1;\n\n    while(i--) {\n\tvar row = [];\n\t\n\tfor(var j = 0; j < n; j++)\n\t    row.push(j == i ? 1 : 0);\n\t\n        e.unshift(row);\n    }\n    \n    for(var i = k - 1; i < m; i++) {\n        while(e[i].length < n)\n            e[i].unshift(0);\n    }\n\n    return $M(e);\n}\n\nfunction pca(X) {\n    var Sigma = X.transpose().x(X).x(1 / X.rows());\n    var svd = Sigma.svd();\n    return {U: svd.U, S: svd.S};\n}\n\nfunction Matrix() {}\nMatrix.prototype = {\n    pcaProject: function(k, U) {\n\tvar U = U || pca(this).U;\n\tvar Ureduce= U.slice(1, U.rows(), 1, k);\n\treturn {Z: this.x(Ureduce), U: U};\n    },\n\n    pcaRecover: function(U) {\n\tvar k = this.cols();\n\tvar Ureduce = U.slice(1, U.rows(), 1, k);\n\treturn this.x(Ureduce.transpose());\n    },    \n\n    triu: function(k) {\n\tif(!k)\n\t    k = 0;\n\t\n\treturn this.map(function(x, i, j) {\n\t    return j - i >= k ? x : 0;\n\t});\n    },\n\n    svd: function() {\n\tvar A = this;\n\tvar U = Matrix.I(A.rows());\n\tvar S = A.transpose();\n\tvar V = Matrix.I(A.cols());\n\tvar err = Number.MAX_VALUE;\n\tvar i = 0;\n\tvar maxLoop = 100;\n\n\twhile(err > 2.2737e-13 && i < maxLoop) {\n\t    var qr = S.transpose().qr();\n\t    S = qr.R;\n\t    U = U.x(qr.Q);\n\t    qr = S.transpose().qr();\n\t    V = V.x(qr.Q);\n\t    S = qr.R;\n\n\t    var e = S.triu(1).unroll().norm();\n\t    var f = S.diagonal().norm();\n\n\t    if(f == 0)\n\t\tf = 1;\n\n\t    err = e / f;\n\n\t    i++;\n\t}\n\n\tvar ss = S.diagonal();\n\tvar s = [];\n\n\tfor(var i = 1; i <= ss.cols(); i++) {\n\t    var ssn = ss.e(i);\n\t    s.push(Math.abs(ssn));\n\n\t    if(ssn < 0) {\n\t\tfor(var j = 0; j < U.rows(); j++) {\n\t\t    U.elements[j][i - 1] = -(U.elements[j][i - 1]);\n\t\t}\n\t    }\n\t}\n\n\treturn {U: U, S: $V(s).toDiagonalMatrix(), V: V};\n    },\n\n    unroll: function() {\n\tvar v = [];\n\t\n\tfor(var i = 1; i <= this.cols(); i++) {\n\t    for(var j = 1; j <= this.rows(); j++) {\n\t\tv.push(this.e(j, i));\n\t    }\n\t}\n\n\treturn $V(v);\n    },\n\n    qr: function() {\n\tvar m = this.rows();\n\tvar n = this.cols();\n\tvar Q = Matrix.I(m);\n\tvar A = this;\n\t\n\tfor(var k = 1; k < Math.min(m, n); k++) {\n\t    var ak = A.slice(k, 0, k, k).col(1);\n\t    var oneZero = [1];\n\t    \n\t    while(oneZero.length <=  m - k)\n\t\toneZero.push(0);\n\t    \n\t    oneZero = $V(oneZero);\n\t    var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));\n\t    var Vk = $M(vk);\n\t    var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));\n\t    var Qk = identSize(Hk, m, n, k);\n\t    A = Qk.x(A);\n\t    Q = Q.x(Qk);\n\t}\n\n\treturn {Q: Q, R: A};\n    },\n\n\n    slice: function(startRow, endRow, startCol, endCol) {\n\tvar x = [];\n\t\n\tif(endRow == 0)\n\t    endRow = this.rows();\n\t\n\tif(endCol == 0)\n\t    endCol = this.cols();\n\n\tfor(i = startRow; i <= endRow; i++) {\n\t    var row = [];\n\n\t    for(j = startCol; j <= endCol; j++) {\n\t\trow.push(this.e(i, j));\n\t    }\n\n\t    x.push(row);\n\t}\n\n\treturn $M(x);\n    },\n\n    // Returns element (i,j) of the matrix\n    e: function(i,j) {\n\tif (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }\n\treturn this.elements[i - 1][j - 1];\n    },\n\n    // Returns row k of the matrix as a vector\n    row: function(i) {\n\tif (i > this.elements.length) { return null; }\n\treturn $V(this.elements[i - 1]);\n    },\n\n    // Returns column k of the matrix as a vector\n    col: function(j) {\n\tif (j > this.elements[0].length) { return null; }\n\tvar col = [], n = this.elements.length;\n\tfor (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }\n\treturn $V(col);\n    },\n\n    // Returns the number of rows/columns the matrix has\n    dimensions: function() {\n\treturn {rows: this.elements.length, cols: this.elements[0].length};\n    },\n\n    // Returns the number of rows in the matrix\n    rows: function() {\n\treturn this.elements.length;\n    },\n\n    // Returns the number of columns in the matrix\n    cols: function() {\n\treturn this.elements[0].length;\n    },\n\n    // Returns true iff the matrix is equal to the argument. You can supply\n    // a vector as the argument, in which case the receiver must be a\n    // one-column matrix equal to the vector.\n    eql: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\tif (this.elements.length != M.length ||\n            this.elements[0].length != M[0].length) { return false; }\n\tvar i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) { j = nj;\n\t\t      while (j--) {\n\t\t\t  if (Math.abs(this.elements[i][j] - M[i][j]) > Sylvester.precision) { return false; }\n\t\t      }\n\t\t    }\n\treturn true;\n    },\n\n    // Returns a copy of the matrix\n    dup: function() {\n\treturn Matrix.create(this.elements);\n    },\n\n    // Maps the matrix to another matrix (of the same dimensions) according to the given function\n    map: function(fn) {\n    var els = [], i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) { j = nj;\n\t\t      els[i] = [];\n\t\t      while (j--) {\n\t\t\t  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);\n\t\t      }\n\t\t    }\n\treturn Matrix.create(els);\n    },\n\n    // Returns true iff the argument has the same dimensions as the matrix\n    isSameSizeAs: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\treturn (this.elements.length == M.length &&\n\t\tthis.elements[0].length == M[0].length);\n    },\n\n    // Returns the result of adding the argument to the matrix\n    add: function(matrix) {\n\tif(typeof(matrix) == 'number') {\n\t    return this.map(function(x, i, j) { return x + matrix});\n\t} else {\n\t    var M = matrix.elements || matrix;\n\t    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\t    if (!this.isSameSizeAs(M)) { return null; }\n\t    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });\n\t}\n    },\n\n    // Returns the result of subtracting the argument from the matrix\n    subtract: function(matrix) {\n\tif(typeof(matrix) == 'number') {\n\t    return this.map(function(x, i, j) { return x - matrix});\n\t} else {\n\t    var M = matrix.elements || matrix;\n\t    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\t    if (!this.isSameSizeAs(M)) { return null; }\n\t    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });\n\t}\n    },\n\n    // Returns true iff the matrix can multiply the argument from the left\n    canMultiplyFromLeft: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\t// this.columns should equal matrix.rows\n\treturn (this.elements[0].length == M.length);\n    },\n\n    // Returns the result of a multiplication-style operation the matrix from the right by the argument.\n    // If the argument is a scalar then just operate on all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    mulOp: function(matrix, op) {\n\tif (!matrix.elements) {\n\t    return this.map(function(x) { return op(x, matrix); });\n\t}\n\n\tvar returnVector = matrix.modulus ? true : false;\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') \n\t    M = Matrix.create(M).elements;\n\tif (!this.canMultiplyFromLeft(M)) \n\t    return null; \n\tvar e = this.elements, rowThis, rowElem, elements = [],\n        sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;\n\n\twhile (i--) {\n            rowElem = [];\n            rowThis = e[i];\n            j = n;\n\n            while (j--) {\n\t\tsum = 0;\n\t\tk = o;\n\n\t\twhile (k--) {\n                    sum += op(rowThis[k], M[k][j]);\n\t\t}\n\n\t\trowElem[j] = sum;\n            }\n\n            elements[i] = rowElem;\n\t}\n\n\tvar M = Matrix.create(elements);\n\treturn returnVector ? M.col(1) : M;\n    },\n\n    // Returns the result of dividing the matrix from the right by the argument.\n    // If the argument is a scalar then just divide all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    div: function(matrix) {\n\treturn this.mulOp(matrix, function(x, y) { return x / y});\n    },\n\n    // Returns the result of multiplying the matrix from the right by the argument.\n    // If the argument is a scalar then just multiply all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    multiply: function(matrix) {\n\treturn this.mulOp(matrix, function(x, y) { return x * y});\n    },\n\n    x: function(matrix) { return this.multiply(matrix); },\n\n    elementMultiply: function(v) {\n        return this.map(function(k, i, j) {\n            return v.e(i, j) * k;\n        });\n    },\n\n    sum: function() {\n        var sum = 0;\n\n        this.map(function(x) { sum += x;});\n\n        return sum;\n    },\n\n    // Returns a Vector of each colum averaged.\n    mean: function() {\n      var dim = this.dimensions();\n      var r = [];\n      for (var i = 1; i <= dim.cols; i++) {\n        r.push(this.col(i).sum() / dim.rows);\n      }\n      return $V(r);\n    },\n\n    column: function(n) {\n\treturn this.col(n);\n    },\n\n    log: function() {\n\treturn this.map(function(x) { return Math.log(x); });\n    },\n\n    // Returns a submatrix taken from the matrix\n    // Argument order is: start row, start col, nrows, ncols\n    // Element selection wraps if the required index is outside the matrix's bounds, so you could\n    // use this to perform row/column cycling or copy-augmenting.\n    minor: function(a, b, c, d) {\n\tvar elements = [], ni = c, i, nj, j;\n\tvar rows = this.elements.length, cols = this.elements[0].length;\n\twhile (ni--) {\n\t    i = c - ni - 1;\n\t    elements[i] = [];\n\t    nj = d;\n\t    while (nj--) {\n\t\tj = d - nj - 1;\n\t\telements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];\n\t    }\n\t}\n\treturn Matrix.create(elements);\n    },\n\n    // Returns the transpose of the matrix\n    transpose: function() {\n    var rows = this.elements.length, i, cols = this.elements[0].length, j;\n\tvar elements = [], i = cols;\n\twhile (i--) {\n\t    j = rows;\n\t    elements[i] = [];\n\t    while (j--) {\n\t\telements[i][j] = this.elements[j][i];\n\t    }\n\t}\n\treturn Matrix.create(elements);\n    },\n\n    // Returns true iff the matrix is square\n    isSquare: function() {\n\treturn (this.elements.length == this.elements[0].length);\n    },\n\n    // Returns the (absolute) largest element of the matrix\n    max: function() {\n\tvar m = 0, i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) {\n\t    j = nj;\n\t    while (j--) {\n\t\tif (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }\n\t    }\n\t}\n\treturn m;\n    },\n\n    // Returns the indeces of the first match found by reading row-by-row from left to right\n    indexOf: function(x) {\n\tvar index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;\n\tfor (i = 0; i < ni; i++) {\n\t    for (j = 0; j < nj; j++) {\n\t\tif (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }\n\t    }\n\t}\n\treturn null;\n    },\n\n    // If the matrix is square, returns the diagonal elements as a vector.\n    // Otherwise, returns null.\n    diagonal: function() {\n\tif (!this.isSquare) { return null; }\n\tvar els = [], n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    els.push(this.elements[i][i]);\n\t}\n\treturn $V(els);\n    },\n\n    // Make the matrix upper (right) triangular by Gaussian elimination.\n    // This method only adds multiples of rows to other rows. No rows are\n    // scaled up or switched, and the determinant is preserved.\n    toRightTriangular: function() {\n\tvar M = this.dup(), els;\n\tvar n = this.elements.length, i, j, np = this.elements[0].length, p;\n\tfor (i = 0; i < n; i++) {\n\t    if (M.elements[i][i] == 0) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t    if (M.elements[j][i] != 0) {\n\t\t\tels = [];\n\t\t\tfor (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }\n\t\t\tM.elements[i] = els;\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t    }\n\t    if (M.elements[i][i] != 0) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t    var multiplier = M.elements[j][i] / M.elements[i][i];\n\t\t    els = [];\n\t\t    for (p = 0; p < np; p++) {\n\t\t\t// Elements with column numbers up to an including the number\n\t\t\t// of the row that we're subtracting can safely be set straight to\n\t\t\t// zero, since that's the point of this routine and it avoids having\n\t\t\t// to loop over and correct rounding errors later\n\t\t\tels.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n\t\t    }\n\t\t    M.elements[j] = els;\n\t\t}\n\t    }\n\t}\n\treturn M;\n    },\n\n    toUpperTriangular: function() { return this.toRightTriangular(); },\n\n    // Returns the determinant for square matrices\n    determinant: function() {\n\tif (!this.isSquare()) { return null; }\n\tif (this.cols == 1 && this.rows == 1) { return this.row(1); }\n\tif (this.cols == 0 && this.rows == 0) { return 1; }\n\tvar M = this.toRightTriangular();\n\tvar det = M.elements[0][0], n = M.elements.length;\n\tfor (var i = 1; i < n; i++) {\n\t    det = det * M.elements[i][i];\n\t}\n\treturn det;\n    },\n    det: function() { return this.determinant(); },\n\n    // Returns true iff the matrix is singular\n    isSingular: function() {\n\treturn (this.isSquare() && this.determinant() === 0);\n    },\n\n    // Returns the trace for square matrices\n    trace: function() {\n\tif (!this.isSquare()) { return null; }\n\tvar tr = this.elements[0][0], n = this.elements.length;\n\tfor (var i = 1; i < n; i++) {\n\t    tr += this.elements[i][i];\n\t}\n\treturn tr;\n    },\n\n    tr: function() { return this.trace(); },\n\n    // Returns the rank of the matrix\n    rank: function() {\n\tvar M = this.toRightTriangular(), rank = 0;\n\tvar i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) {\n\t    j = nj;\n\t    while (j--) {\n\t\tif (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }\n\t    }\n\t}\n\treturn rank;\n    },\n\n    rk: function() { return this.rank(); },\n\n    // Returns the result of attaching the given argument to the right-hand side of the matrix\n    augment: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\tvar T = this.dup(), cols = T.elements[0].length;\n\tvar i = T.elements.length, nj = M[0].length, j;\n\tif (i != M.length) { return null; }\n\twhile (i--) {\n\t    j = nj;\n\t    while (j--) {\n\t\tT.elements[i][cols + j] = M[i][j];\n\t    }\n\t}\n\treturn T;\n    },\n\n    // Returns the inverse (if one exists) using Gauss-Jordan\n    inverse: function() {\n\tif (!this.isSquare() || this.isSingular()) { return null; }\n\tvar n = this.elements.length, i = n, j;\n\tvar M = this.augment(Matrix.I(n)).toRightTriangular();\n\tvar np = M.elements[0].length, p, els, divisor;\n\tvar inverse_elements = [], new_element;\n\t// Matrix is non-singular so there will be no zeros on the diagonal\n\t// Cycle through rows from last to first\n\twhile (i--) {\n\t    // First, normalise diagonal elements to 1\n\t    els = [];\n\t    inverse_elements[i] = [];\n\t    divisor = M.elements[i][i];\n\t    for (p = 0; p < np; p++) {\n        new_element = M.elements[i][p] / divisor;\n\t\tels.push(new_element);\n\t\t// Shuffle off the current row of the right hand side into the results\n\t\t// array as it will not be modified by later runs through this loop\n\t\tif (p >= n) { inverse_elements[i].push(new_element); }\n\t    }\n\t    M.elements[i] = els;\n\t    // Then, subtract this row from those above it to\n\t    // give the identity matrix on the left hand side\n\t    j = i;\n\t    while (j--) {\n\t\tels = [];\n\t\tfor (p = 0; p < np; p++) {\n\t\t    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n\t\t}\n\t\tM.elements[j] = els;\n\t    }\n\t}\n\treturn Matrix.create(inverse_elements);\n    },\n\n    inv: function() { return this.inverse(); },\n\n    // Returns the result of rounding all the elements\n    round: function() {\n\treturn this.map(function(x) { return Math.round(x); });\n    },\n\n    // Returns a copy of the matrix with elements set to the given value if they\n    // differ from it by less than Sylvester.precision\n    snapTo: function(x) {\n\treturn this.map(function(p) {\n\t    return (Math.abs(p - x) <= Sylvester.precision) ? x : p;\n\t});\n    },\n\n    // Returns a string representation of the matrix\n    inspect: function() {\n\tvar matrix_rows = [];\n\tvar n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    matrix_rows.push($V(this.elements[i]).inspect());\n\t}\n\treturn matrix_rows.join('\\n');\n    },\n\n    // Returns a array representation of the matrix\n    toArray: function() {\n    \tvar matrix_rows = [];\n    \tvar n = this.elements.length;\n    \tfor (var i = 0; i < n; i++) {\n        matrix_rows.push(this.elements[i]);\n    \t}\n      return matrix_rows;\n    },\n\n\n    // Set the matrix's elements from an array. If the argument passed\n    // is a vector, the resulting matrix will be a single column.\n    setElements: function(els) {\n\tvar i, j, elements = els.elements || els;\n\tif (typeof(elements[0][0]) != 'undefined') {\n\t    i = elements.length;\n\t    this.elements = [];\n\t    while (i--) {\n\t\tj = elements[i].length;\n\t\tthis.elements[i] = [];\n\t\twhile (j--) {\n\t\t    this.elements[i][j] = elements[i][j];\n\t\t}\n\t    }\n\t    return this;\n\t}\n\tvar n = elements.length;\n\tthis.elements = [];\n\tfor (i = 0; i < n; i++) {\n\t    this.elements.push([elements[i]]);\n\t}\n\treturn this;\n    },\n\n    maxColumnIndexes: function() {\n\tvar maxes = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var max = null;\n\t    var maxIndex = -1;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(max === null || this.e(i, j) > max) {\n\t\t    max = this.e(i, j);\n\t\t    maxIndex = j;\n\t\t}\n\t    }\n\n\t    maxes.push(maxIndex);\n\t}\n\n\treturn $V(maxes);\n    },\n\n    maxColumns: function() {\n\tvar maxes = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var max = null;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(max === null || this.e(i, j) > max) {\n\t\t    max = this.e(i, j);\n\t\t}\n\t    }\n\n\t    maxes.push(max);\n\t}\n\n\treturn $V(maxes);\n    },\n\n    minColumnIndexes: function() {\n\tvar mins = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var min = null;\n\t    var minIndex = -1;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(min === null || this.e(i, j) < min) {\n\t\t    min = this.e(i, j);\n\t\t    minIndex = j;\n\t\t}\n\t    }\n\n\t    mins.push(minIndex);\n\t}\n\n\treturn $V(mins);\n    },\n\n    minColumns: function() {\n\tvar mins = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var min = null;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(min === null || this.e(i, j) < min) {\n\t\t    min = this.e(i, j);\n\t\t}\n\t    }\n\n\t    mins.push(min);\n\t}\n\n\treturn $V(mins);\n    }\n};\n\n// Constructor function\nMatrix.create = function(elements) {\n    var M = new Matrix();\n    return M.setElements(elements);\n};\n\n// Identity matrix of size n\nMatrix.I = function(n) {\n    var els = [], i = n, j;\n    while (i--) {\n\tj = n;\n\tels[i] = [];\n\twhile (j--) {\n\t    els[i][j] = (i == j) ? 1 : 0;\n\t}\n    }\n    return Matrix.create(els);\n};\n\nMatrix.loadFile = function(file) {\n    var contents = fs.readFileSync(file, 'utf-8');\n    var matrix = [];\n\n    var rowArray = contents.split('\\n');\n    for (var i = 0; i < rowArray.length; i++) {\n\tvar d = rowArray[i].split(',');\n\tif (d.length > 1) {\n\t    matrix.push(d);\n\t}\n    }\n\n    var M = new Matrix();\n    return M.setElements(matrix);\n};\n\n// Diagonal matrix - all off-diagonal elements are zero\nMatrix.Diagonal = function(elements) {\n    var i = elements.length;\n    var M = Matrix.I(i);\n    while (i--) {\n\tM.elements[i][i] = elements[i];\n    }\n    return M;\n};\n\n// Rotation matrix about some axis. If no axis is\n// supplied, assume we're after a 2D transform\nMatrix.Rotation = function(theta, a) {\n    if (!a) {\n\treturn Matrix.create([\n\t    [Math.cos(theta), -Math.sin(theta)],\n\t    [Math.sin(theta), Math.cos(theta)]\n\t]);\n  }\n    var axis = a.dup();\n    if (axis.elements.length != 3) { return null; }\n    var mod = axis.modulus();\n    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;\n    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;\n    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n    // That proof rotates the co-ordinate system so theta\n    // becomes -theta and sin becomes -sin here.\n    return Matrix.create([\n\t[t * x * x + c, t * x * y - s * z, t * x * z + s * y],\n\t[t * x * y + s * z, t * y * y + c, t * y * z - s * x],\n\t[t * x * z - s * y, t * y * z + s * x, t * z * z + c]\n    ]);\n};\n\n// Special case rotations\nMatrix.RotationX = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n\t[1, 0, 0],\n\t[0, c, -s],\n\t[0, s, c]\n    ]);\n};\n\nMatrix.RotationY = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n\t[c, 0, s],\n\t[0, 1, 0],\n\t[-s, 0, c]\n    ]);\n};\n\nMatrix.RotationZ = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n\t[c, -s, 0],\n\t[s, c, 0],\n\t[0, 0, 1]\n    ]);\n};\n\n// Random matrix of n rows, m columns\nMatrix.Random = function(n, m) {\n    if (arguments.length === 1) m = n;\n    return Matrix.Zero(n, m).map(\n\tfunction() { return Math.random(); }\n  );\n};\n\nMatrix.Fill = function(n, m, v) {\n    if (arguments.length === 2) {\n\tv = m;\n\tm = n;\n    }\n\n    var els = [], i = n, j;\n\n    while (i--) {\n\tj = m;\n\tels[i] = [];\n\n\twhile (j--) {\n\t    els[i][j] = v;\n\t}\n    }\n\n    return Matrix.create(els);\n};\n\n// Matrix filled with zeros\nMatrix.Zero = function(n, m) {\n    return Matrix.Fill(n, m, 0);\n};\n\n// Matrix filled with zeros\nMatrix.Zeros = function(n, m) {\n    return Matrix.Zero(n, m);\n};\n\n// Matrix filled with ones\nMatrix.One = function(n, m) {\n    return Matrix.Fill(n, m, 1);\n};\n\n// Matrix filled with ones\nMatrix.Ones = function(n, m) {\n    return Matrix.One(n, m);\n};\n\nmodule.exports = Matrix;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}