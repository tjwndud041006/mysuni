{"ast":null,"code":"// return the nth elem of a doc\nconst hasPeriod = /\\./g;\nconst api = function (View) {\n  class Acronyms extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Acronyms';\n    }\n    strip() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(hasPeriod, '');\n          term.normal = term.normal.replace(hasPeriod, '');\n        });\n      });\n      return this;\n    }\n    addPeriods() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(hasPeriod, '');\n          term.normal = term.normal.replace(hasPeriod, '');\n          term.text = term.text.split('').join('.') + '.';\n          term.normal = term.normal.split('').join('.') + '.';\n        });\n      });\n      return this;\n    }\n  }\n  View.prototype.acronyms = function (n) {\n    let m = this.match('#Acronym');\n    m = m.getNth(n);\n    return new Acronyms(m.document, m.pointer);\n  };\n};\nexport default api;","map":{"version":3,"names":["hasPeriod","api","View","Acronyms","constructor","document","pointer","groups","viewType","strip","docs","forEach","terms","term","text","replace","normal","addPeriods","split","join","prototype","acronyms","n","m","match","getNth"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/misc/acronyms/index.js"],"sourcesContent":["// return the nth elem of a doc\nconst hasPeriod = /\\./g\n\nconst api = function (View) {\n\n  class Acronyms extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Acronyms'\n    }\n    strip() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(hasPeriod, '')\n          term.normal = term.normal.replace(hasPeriod, '')\n        })\n      })\n      return this\n    }\n    addPeriods() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(hasPeriod, '')\n          term.normal = term.normal.replace(hasPeriod, '')\n          term.text = term.text.split('').join('.') + '.'\n          term.normal = term.normal.split('').join('.') + '.'\n        })\n      })\n      return this\n    }\n  }\n\n  View.prototype.acronyms = function (n) {\n    let m = this.match('#Acronym')\n    m = m.getNth(n)\n    return new Acronyms(m.document, m.pointer)\n  }\n}\nexport default api\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,KAAK;AAEvB,MAAMC,GAAG,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAE1B,MAAMC,QAAQ,SAASD,IAAI,CAAC;IAC1BE,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;MACrC,KAAK,CAACF,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;MAChC,IAAI,CAACC,QAAQ,GAAG,UAAU;IAC5B;IACAC,KAAKA,CAAA,EAAG;MACN,IAAI,CAACC,IAAI,CAACC,OAAO,CAACC,KAAK,IAAI;QACzBA,KAAK,CAACD,OAAO,CAACE,IAAI,IAAI;UACpBA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,CAACC,OAAO,CAACf,SAAS,EAAE,EAAE,CAAC;UAC5Ca,IAAI,CAACG,MAAM,GAAGH,IAAI,CAACG,MAAM,CAACD,OAAO,CAACf,SAAS,EAAE,EAAE,CAAC;QAClD,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAO,IAAI;IACb;IACAiB,UAAUA,CAAA,EAAG;MACX,IAAI,CAACP,IAAI,CAACC,OAAO,CAACC,KAAK,IAAI;QACzBA,KAAK,CAACD,OAAO,CAACE,IAAI,IAAI;UACpBA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,CAACC,OAAO,CAACf,SAAS,EAAE,EAAE,CAAC;UAC5Ca,IAAI,CAACG,MAAM,GAAGH,IAAI,CAACG,MAAM,CAACD,OAAO,CAACf,SAAS,EAAE,EAAE,CAAC;UAChDa,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,CAACI,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;UAC/CN,IAAI,CAACG,MAAM,GAAGH,IAAI,CAACG,MAAM,CAACE,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;QACrD,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAO,IAAI;IACb;EACF;EAEAjB,IAAI,CAACkB,SAAS,CAACC,QAAQ,GAAG,UAAUC,CAAC,EAAE;IACrC,IAAIC,CAAC,GAAG,IAAI,CAACC,KAAK,CAAC,UAAU,CAAC;IAC9BD,CAAC,GAAGA,CAAC,CAACE,MAAM,CAACH,CAAC,CAAC;IACf,OAAO,IAAInB,QAAQ,CAACoB,CAAC,CAAClB,QAAQ,EAAEkB,CAAC,CAACjB,OAAO,CAAC;EAC5C,CAAC;AACH,CAAC;AACD,eAAeL,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}