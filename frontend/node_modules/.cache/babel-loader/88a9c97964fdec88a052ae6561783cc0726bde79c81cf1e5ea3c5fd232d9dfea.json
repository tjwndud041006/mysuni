{"ast":null,"code":"//is this sentence asking a question?\nconst isQuestion = function (doc) {\n  let clauses = doc.clauses();\n\n  // Has ellipsis at the end means it's probably not a question\n  // e.g., Is this just fantasy...\n  if (/\\.\\.$/.test(doc.out('text'))) {\n    return false;\n  }\n\n  // Starts with question word, but has a comma, so probably not a question\n  // e.g., Why are we caught in a land slide, no escape from reality\n  if (doc.has('^#QuestionWord') && doc.has('@hasComma')) {\n    return false;\n  }\n\n  // do you see it or not\n  if (doc.has('or not$')) {\n    return true;\n  }\n\n  // Starts with a #QuestionWord\n  // e.g., What open your eyes look up to the skies and see\n  if (doc.has('^#QuestionWord')) {\n    return true;\n  }\n\n  // Second word is a #QuestionWord\n  // e.g., I'm what a poor boy\n  // case ts.has('^\\w+\\s#QuestionWord'):\n  // return true;\n\n  // is it, do you - start of sentence\n  // e.g., Do I need no sympathy\n  if (doc.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {\n    return true;\n  }\n\n  // these are a little more loose..\n  // e.g., Must I be come easy come easy go\n  if (doc.has('^(have|must) you')) {\n    return true;\n  }\n\n  // Clause starts with a question word\n  // e.g., Anyway the wind blows, what doesn't really matter to me\n  // if (clauses.has('^#QuestionWord')) {\n  //   return true\n  // }\n\n  //is wayne gretskzy alive\n  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {\n    return true;\n  }\n\n  // Probably not a question\n  return false;\n};\nconst findQuestions = function (view) {\n  const hasQ = /\\?/;\n  const {\n    document\n  } = view;\n  return view.filter(m => {\n    let terms = m.docs[0] || [];\n    let lastTerm = terms[terms.length - 1];\n    // is it not a full sentence?\n    if (!lastTerm || document[lastTerm.index[0]].length !== terms.length) {\n      return false;\n    }\n    // does it end with a question mark?\n    if (hasQ.test(lastTerm.post)) {\n      return true;\n    }\n    // try to guess a sentence without a question-mark\n    return isQuestion(m);\n  });\n};\nexport default findQuestions;","map":{"version":3,"names":["isQuestion","doc","clauses","test","out","has","findQuestions","view","hasQ","document","filter","m","terms","docs","lastTerm","length","index","post"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/sentences/questions.js"],"sourcesContent":["//is this sentence asking a question?\nconst isQuestion = function (doc) {\n  let clauses = doc.clauses()\n\n  // Has ellipsis at the end means it's probably not a question\n  // e.g., Is this just fantasy...\n  if (/\\.\\.$/.test(doc.out('text'))) {\n    return false\n  }\n\n  // Starts with question word, but has a comma, so probably not a question\n  // e.g., Why are we caught in a land slide, no escape from reality\n  if (doc.has('^#QuestionWord') && doc.has('@hasComma')) {\n    return false\n  }\n\n  // do you see it or not\n  if (doc.has('or not$')) {\n    return true\n  }\n\n  // Starts with a #QuestionWord\n  // e.g., What open your eyes look up to the skies and see\n  if (doc.has('^#QuestionWord')) {\n    return true\n  }\n\n  // Second word is a #QuestionWord\n  // e.g., I'm what a poor boy\n  // case ts.has('^\\w+\\s#QuestionWord'):\n  // return true;\n\n  // is it, do you - start of sentence\n  // e.g., Do I need no sympathy\n  if (doc.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {\n    return true\n  }\n\n  // these are a little more loose..\n  // e.g., Must I be come easy come easy go\n  if (doc.has('^(have|must) you')) {\n    return true\n  }\n\n  // Clause starts with a question word\n  // e.g., Anyway the wind blows, what doesn't really matter to me\n  // if (clauses.has('^#QuestionWord')) {\n  //   return true\n  // }\n\n  //is wayne gretskzy alive\n  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {\n    return true\n  }\n\n  // Probably not a question\n  return false\n}\n\nconst findQuestions = function (view) {\n  const hasQ = /\\?/\n  const { document } = view\n  return view.filter(m => {\n    let terms = m.docs[0] || []\n    let lastTerm = terms[terms.length - 1]\n    // is it not a full sentence?\n    if (!lastTerm || document[lastTerm.index[0]].length !== terms.length) {\n      return false\n    }\n    // does it end with a question mark?\n    if (hasQ.test(lastTerm.post)) {\n      return true\n    }\n    // try to guess a sentence without a question-mark\n    return isQuestion(m)\n  })\n}\nexport default findQuestions\n"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAChC,IAAIC,OAAO,GAAGD,GAAG,CAACC,OAAO,CAAC,CAAC;;EAE3B;EACA;EACA,IAAI,OAAO,CAACC,IAAI,CAACF,GAAG,CAACG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;IACjC,OAAO,KAAK;EACd;;EAEA;EACA;EACA,IAAIH,GAAG,CAACI,GAAG,CAAC,gBAAgB,CAAC,IAAIJ,GAAG,CAACI,GAAG,CAAC,WAAW,CAAC,EAAE;IACrD,OAAO,KAAK;EACd;;EAEA;EACA,IAAIJ,GAAG,CAACI,GAAG,CAAC,SAAS,CAAC,EAAE;IACtB,OAAO,IAAI;EACb;;EAEA;EACA;EACA,IAAIJ,GAAG,CAACI,GAAG,CAAC,gBAAgB,CAAC,EAAE;IAC7B,OAAO,IAAI;EACb;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA,IAAIJ,GAAG,CAACI,GAAG,CAAC,sDAAsD,CAAC,EAAE;IACnE,OAAO,IAAI;EACb;;EAEA;EACA;EACA,IAAIJ,GAAG,CAACI,GAAG,CAAC,kBAAkB,CAAC,EAAE;IAC/B,OAAO,IAAI;EACb;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA,IAAIH,OAAO,CAACG,GAAG,CAAC,4DAA4D,CAAC,EAAE;IAC7E,OAAO,IAAI;EACb;;EAEA;EACA,OAAO,KAAK;AACd,CAAC;AAED,MAAMC,aAAa,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACpC,MAAMC,IAAI,GAAG,IAAI;EACjB,MAAM;IAAEC;EAAS,CAAC,GAAGF,IAAI;EACzB,OAAOA,IAAI,CAACG,MAAM,CAACC,CAAC,IAAI;IACtB,IAAIC,KAAK,GAAGD,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC3B,IAAIC,QAAQ,GAAGF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;IACtC;IACA,IAAI,CAACD,QAAQ,IAAIL,QAAQ,CAACK,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAACD,MAAM,KAAKH,KAAK,CAACG,MAAM,EAAE;MACpE,OAAO,KAAK;IACd;IACA;IACA,IAAIP,IAAI,CAACL,IAAI,CAACW,QAAQ,CAACG,IAAI,CAAC,EAAE;MAC5B,OAAO,IAAI;IACb;IACA;IACA,OAAOjB,UAAU,CAACW,CAAC,CAAC;EACtB,CAAC,CAAC;AACJ,CAAC;AACD,eAAeL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}