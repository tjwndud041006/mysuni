{"ast":null,"code":"/*\nunique & ordered term ids, based on time & term index\n\nBase 36 (numbers+ascii)\n  3 digit 4,600\n  2 digit 1,200\n  1 digit 36\n\n  TTT|NNN|II|R\n\nTTT -> 46 terms since load\nNNN -> 46 thousand sentences (>1 inf-jest)\nII  -> 1,200 words in a sentence (nuts)\nR   -> 1-36 random number \n\nnovels: \n  avg 80,000 words\n    15 words per sentence\n  5,000 sentences\n\nInfinite Jest:\n  36,247 sentences\n  https://en.wikipedia.org/wiki/List_of_longest_novels\n\ncollisions are more-likely after\n    46 seconds have passed,\n  and \n    after 46-thousand sentences\n\n*/\nlet index = 0;\nconst pad3 = str => {\n  str = str.length < 3 ? '0' + str : str;\n  return str.length < 3 ? '0' + str : str;\n};\nconst toId = function (term) {\n  let [n, i] = term.index || [0, 0];\n  index += 1;\n\n  //don't overflow index\n  index = index > 46655 ? 0 : index;\n  //don't overflow sentences\n  n = n > 46655 ? 0 : n;\n  // //don't overflow terms\n  i = i > 1294 ? 0 : i;\n\n  // 3 digits for time\n  let id = pad3(index.toString(36));\n  // 3 digit  for sentence index (46k)\n  id += pad3(n.toString(36));\n\n  // 1 digit for term index (36)\n  let tx = i.toString(36);\n  tx = tx.length < 2 ? '0' + tx : tx; //pad2\n  id += tx;\n\n  // 1 digit random number\n  let r = parseInt(Math.random() * 36, 10);\n  id += r.toString(36);\n  return term.normal + '|' + id.toUpperCase();\n};\nexport default toId;\n\n// setInterval(() => console.log(toId(4, 12)), 100)","map":{"version":3,"names":["index","pad3","str","length","toId","term","n","i","id","toString","tx","r","parseInt","Math","random","normal","toUpperCase"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/change/compute/uuid.js"],"sourcesContent":["/*\nunique & ordered term ids, based on time & term index\n\nBase 36 (numbers+ascii)\n  3 digit 4,600\n  2 digit 1,200\n  1 digit 36\n\n  TTT|NNN|II|R\n\nTTT -> 46 terms since load\nNNN -> 46 thousand sentences (>1 inf-jest)\nII  -> 1,200 words in a sentence (nuts)\nR   -> 1-36 random number \n\nnovels: \n  avg 80,000 words\n    15 words per sentence\n  5,000 sentences\n\nInfinite Jest:\n  36,247 sentences\n  https://en.wikipedia.org/wiki/List_of_longest_novels\n\ncollisions are more-likely after\n    46 seconds have passed,\n  and \n    after 46-thousand sentences\n\n*/\nlet index = 0\n\nconst pad3 = (str) => {\n  str = str.length < 3 ? '0' + str : str\n  return str.length < 3 ? '0' + str : str\n}\n\nconst toId = function (term) {\n  let [n, i] = term.index || [0, 0]\n  index += 1\n\n  //don't overflow index\n  index = index > 46655 ? 0 : index\n  //don't overflow sentences\n  n = n > 46655 ? 0 : n\n  // //don't overflow terms\n  i = i > 1294 ? 0 : i\n\n  // 3 digits for time\n  let id = pad3(index.toString(36))\n  // 3 digit  for sentence index (46k)\n  id += pad3(n.toString(36))\n\n  // 1 digit for term index (36)\n  let tx = i.toString(36)\n  tx = tx.length < 2 ? '0' + tx : tx //pad2\n  id += tx\n\n  // 1 digit random number\n  let r = parseInt(Math.random() * 36, 10)\n  id += (r).toString(36)\n\n  return term.normal + '|' + id.toUpperCase()\n}\n\nexport default toId\n\n// setInterval(() => console.log(toId(4, 12)), 100)\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAG,CAAC;AAEb,MAAMC,IAAI,GAAIC,GAAG,IAAK;EACpBA,GAAG,GAAGA,GAAG,CAACC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGD,GAAG,GAAGA,GAAG;EACtC,OAAOA,GAAG,CAACC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGD,GAAG,GAAGA,GAAG;AACzC,CAAC;AAED,MAAME,IAAI,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC3B,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGF,IAAI,CAACL,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACjCA,KAAK,IAAI,CAAC;;EAEV;EACAA,KAAK,GAAGA,KAAK,GAAG,KAAK,GAAG,CAAC,GAAGA,KAAK;EACjC;EACAM,CAAC,GAAGA,CAAC,GAAG,KAAK,GAAG,CAAC,GAAGA,CAAC;EACrB;EACAC,CAAC,GAAGA,CAAC,GAAG,IAAI,GAAG,CAAC,GAAGA,CAAC;;EAEpB;EACA,IAAIC,EAAE,GAAGP,IAAI,CAACD,KAAK,CAACS,QAAQ,CAAC,EAAE,CAAC,CAAC;EACjC;EACAD,EAAE,IAAIP,IAAI,CAACK,CAAC,CAACG,QAAQ,CAAC,EAAE,CAAC,CAAC;;EAE1B;EACA,IAAIC,EAAE,GAAGH,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC;EACvBC,EAAE,GAAGA,EAAE,CAACP,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGO,EAAE,GAAGA,EAAE,EAAC;EACnCF,EAAE,IAAIE,EAAE;;EAER;EACA,IAAIC,CAAC,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;EACxCN,EAAE,IAAKG,CAAC,CAAEF,QAAQ,CAAC,EAAE,CAAC;EAEtB,OAAOJ,IAAI,CAACU,MAAM,GAAG,GAAG,GAAGP,EAAE,CAACQ,WAAW,CAAC,CAAC;AAC7C,CAAC;AAED,eAAeZ,IAAI;;AAEnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}