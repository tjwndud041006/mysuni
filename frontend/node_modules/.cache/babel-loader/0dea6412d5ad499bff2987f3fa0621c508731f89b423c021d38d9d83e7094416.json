{"ast":null,"code":"import hasPlural from './hasPlural.js';\nconst keep = {\n  tags: true\n};\nconst nounToPlural = function (m, parsed) {\n  // already plural?\n  if (parsed.isPlural === true) {\n    return m;\n  }\n  // handle \"steve's\"\n  if (parsed.root.has('#Possessive')) {\n    parsed.root = parsed.root.possessives().strip();\n  }\n  // is a plural appropriate?\n  if (!hasPlural(parsed.root)) {\n    return m;\n  }\n  const {\n    methods,\n    model\n  } = m.world;\n  const {\n    toPlural\n  } = methods.two.transform.noun;\n  // inflect the root noun\n  let str = parsed.root.text({\n    keepPunct: false\n  });\n  let plural = toPlural(str, model);\n  m.match(parsed.root).replaceWith(plural, keep).tag('Plural', 'toPlural');\n  // should we change the determiner/article?\n  if (parsed.determiner.has('(a|an)')) {\n    // 'a captain' -> 'the captains'\n    // m.replace(parsed.determiner, 'the', keep)\n    m.remove(parsed.determiner);\n  }\n  // should we change the following copula?\n  let copula = parsed.root.after('not? #Adverb+? [#Copula]', 0);\n  if (copula.found) {\n    if (copula.has('is')) {\n      m.replace(copula, 'are');\n    } else if (copula.has('was')) {\n      m.replace(copula, 'were');\n    }\n  }\n  return m;\n};\nexport default nounToPlural;","map":{"version":3,"names":["hasPlural","keep","tags","nounToPlural","m","parsed","isPlural","root","has","possessives","strip","methods","model","world","toPlural","two","transform","noun","str","text","keepPunct","plural","match","replaceWith","tag","determiner","remove","copula","after","found","replace"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/nouns/api/toPlural.js"],"sourcesContent":["import hasPlural from './hasPlural.js'\n\nconst keep = { tags: true }\n\nconst nounToPlural = function (m, parsed) {\n  // already plural?\n  if (parsed.isPlural === true) {\n    return m\n  }\n  // handle \"steve's\"\n  if (parsed.root.has('#Possessive')) {\n    parsed.root = parsed.root.possessives().strip()\n  }\n  // is a plural appropriate?\n  if (!hasPlural(parsed.root)) {\n    return m\n  }\n  const { methods, model } = m.world\n  const { toPlural } = methods.two.transform.noun\n  // inflect the root noun\n  let str = parsed.root.text({ keepPunct: false })\n  let plural = toPlural(str, model)\n  m.match(parsed.root).replaceWith(plural, keep).tag('Plural', 'toPlural')\n  // should we change the determiner/article?\n  if (parsed.determiner.has('(a|an)')) {\n    // 'a captain' -> 'the captains'\n    // m.replace(parsed.determiner, 'the', keep)\n    m.remove(parsed.determiner)\n  }\n  // should we change the following copula?\n  let copula = parsed.root.after('not? #Adverb+? [#Copula]', 0)\n  if (copula.found) {\n    if (copula.has('is')) {\n      m.replace(copula, 'are')\n    } else if (copula.has('was')) {\n      m.replace(copula, 'were')\n    }\n  }\n  return m\n}\nexport default nounToPlural\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,gBAAgB;AAEtC,MAAMC,IAAI,GAAG;EAAEC,IAAI,EAAE;AAAK,CAAC;AAE3B,MAAMC,YAAY,GAAG,SAAAA,CAAUC,CAAC,EAAEC,MAAM,EAAE;EACxC;EACA,IAAIA,MAAM,CAACC,QAAQ,KAAK,IAAI,EAAE;IAC5B,OAAOF,CAAC;EACV;EACA;EACA,IAAIC,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC,aAAa,CAAC,EAAE;IAClCH,MAAM,CAACE,IAAI,GAAGF,MAAM,CAACE,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACjD;EACA;EACA,IAAI,CAACV,SAAS,CAACK,MAAM,CAACE,IAAI,CAAC,EAAE;IAC3B,OAAOH,CAAC;EACV;EACA,MAAM;IAAEO,OAAO;IAAEC;EAAM,CAAC,GAAGR,CAAC,CAACS,KAAK;EAClC,MAAM;IAAEC;EAAS,CAAC,GAAGH,OAAO,CAACI,GAAG,CAACC,SAAS,CAACC,IAAI;EAC/C;EACA,IAAIC,GAAG,GAAGb,MAAM,CAACE,IAAI,CAACY,IAAI,CAAC;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC;EAChD,IAAIC,MAAM,GAAGP,QAAQ,CAACI,GAAG,EAAEN,KAAK,CAAC;EACjCR,CAAC,CAACkB,KAAK,CAACjB,MAAM,CAACE,IAAI,CAAC,CAACgB,WAAW,CAACF,MAAM,EAAEpB,IAAI,CAAC,CAACuB,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;EACxE;EACA,IAAInB,MAAM,CAACoB,UAAU,CAACjB,GAAG,CAAC,QAAQ,CAAC,EAAE;IACnC;IACA;IACAJ,CAAC,CAACsB,MAAM,CAACrB,MAAM,CAACoB,UAAU,CAAC;EAC7B;EACA;EACA,IAAIE,MAAM,GAAGtB,MAAM,CAACE,IAAI,CAACqB,KAAK,CAAC,0BAA0B,EAAE,CAAC,CAAC;EAC7D,IAAID,MAAM,CAACE,KAAK,EAAE;IAChB,IAAIF,MAAM,CAACnB,GAAG,CAAC,IAAI,CAAC,EAAE;MACpBJ,CAAC,CAAC0B,OAAO,CAACH,MAAM,EAAE,KAAK,CAAC;IAC1B,CAAC,MAAM,IAAIA,MAAM,CAACnB,GAAG,CAAC,KAAK,CAAC,EAAE;MAC5BJ,CAAC,CAAC0B,OAAO,CAACH,MAAM,EAAE,MAAM,CAAC;IAC3B;EACF;EACA,OAAOvB,CAAC;AACV,CAAC;AACD,eAAeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}