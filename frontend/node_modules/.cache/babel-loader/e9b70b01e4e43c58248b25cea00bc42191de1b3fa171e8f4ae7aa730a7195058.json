{"ast":null,"code":"const findVerbs = function (doc) {\n  let m = doc.match('<Verb>');\n  // want to see\n  m = m.not('#Conjunction');\n  // by walking\n  m = m.not('#Preposition');\n  m = m.splitAfter('@hasComma');\n\n  // the reason he will is ...\n  // all i do is talk\n  m = m.splitAfter('[(do|did|am|was|is|will)] (is|was)', 0);\n  // m = m.splitAfter('[(do|did|am|was|is|will)] #PresentTense', 0)\n\n  // cool\n\n  // like being pampered\n  m = m.splitBefore('(#Verb && !#Copula) [being] #Verb', 0);\n  // like to be pampered\n  m = m.splitBefore('#Verb [to be] #Verb', 0);\n\n  // implicit conjugation - 'help fix'\n\n  m = m.splitAfter('[help] #PresentTense', 0);\n  // what i can sell is..\n  m = m.splitBefore('(#PresentTense|#PastTense) [#Copula]$', 0);\n  // what i can sell will be\n  m = m.splitBefore('(#PresentTense|#PastTense) [will be]$', 0);\n  // directing had\n  m = m.splitBefore('(#PresentTense|#PastTense) [(had|has)]', 0);\n\n  // 'allow yourself'\n  m = m.not('#Reflexive$');\n  // sitting near\n  m = m.not('#Adjective');\n\n  // pastTense-pastTense\n  // Everyone he [met] [told] him\n  m = m.splitAfter('[#PastTense] #PastTense', 0);\n  // Everyone he [met] had [told] him\n  m = m.splitAfter('[#PastTense] #Auxiliary+ #PastTense', 0);\n\n  // fans that were blowing felt amazing\n  m = m.splitAfter('#Copula [#Gerund] #PastTense', 0);\n\n  // managed to see\n  // m = m.splitOn('#PastTense [to] #Infinitive', 0)\n\n  //ensure there's actually a verb\n  m = m.if('#Verb');\n  // the reason he will is ...\n  // ensure it's not two verbs\n  // held annually is called\n  if (m.has('(#Verb && !#Auxiliary) #Adverb+? #Copula')) {\n    m = m.splitBefore('#Copula');\n  }\n  return m;\n};\nexport default findVerbs;","map":{"version":3,"names":["findVerbs","doc","m","match","not","splitAfter","splitBefore","if","has"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/verbs/find.js"],"sourcesContent":["const findVerbs = function (doc) {\n  let m = doc.match('<Verb>')\n  // want to see\n  m = m.not('#Conjunction')\n  // by walking\n  m = m.not('#Preposition')\n\n\n  m = m.splitAfter('@hasComma')\n\n  // the reason he will is ...\n  // all i do is talk\n  m = m.splitAfter('[(do|did|am|was|is|will)] (is|was)', 0)\n  // m = m.splitAfter('[(do|did|am|was|is|will)] #PresentTense', 0)\n\n  // cool\n\n  // like being pampered\n  m = m.splitBefore('(#Verb && !#Copula) [being] #Verb', 0)\n  // like to be pampered\n  m = m.splitBefore('#Verb [to be] #Verb', 0)\n\n  // implicit conjugation - 'help fix'\n\n  m = m.splitAfter('[help] #PresentTense', 0)\n  // what i can sell is..\n  m = m.splitBefore('(#PresentTense|#PastTense) [#Copula]$', 0)\n  // what i can sell will be\n  m = m.splitBefore('(#PresentTense|#PastTense) [will be]$', 0)\n  // directing had\n  m = m.splitBefore('(#PresentTense|#PastTense) [(had|has)]', 0)\n\n  // 'allow yourself'\n  m = m.not('#Reflexive$')\n  // sitting near\n  m = m.not('#Adjective')\n\n  // pastTense-pastTense\n  // Everyone he [met] [told] him\n  m = m.splitAfter('[#PastTense] #PastTense', 0)\n  // Everyone he [met] had [told] him\n  m = m.splitAfter('[#PastTense] #Auxiliary+ #PastTense', 0)\n\n  // fans that were blowing felt amazing\n  m = m.splitAfter('#Copula [#Gerund] #PastTense', 0)\n\n  // managed to see\n  // m = m.splitOn('#PastTense [to] #Infinitive', 0)\n\n\n  //ensure there's actually a verb\n  m = m.if('#Verb')\n  // the reason he will is ...\n  // ensure it's not two verbs\n  // held annually is called\n  if (m.has('(#Verb && !#Auxiliary) #Adverb+? #Copula')) {\n    m = m.splitBefore('#Copula')\n  }\n  return m\n}\nexport default findVerbs\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC/B,IAAIC,CAAC,GAAGD,GAAG,CAACE,KAAK,CAAC,QAAQ,CAAC;EAC3B;EACAD,CAAC,GAAGA,CAAC,CAACE,GAAG,CAAC,cAAc,CAAC;EACzB;EACAF,CAAC,GAAGA,CAAC,CAACE,GAAG,CAAC,cAAc,CAAC;EAGzBF,CAAC,GAAGA,CAAC,CAACG,UAAU,CAAC,WAAW,CAAC;;EAE7B;EACA;EACAH,CAAC,GAAGA,CAAC,CAACG,UAAU,CAAC,oCAAoC,EAAE,CAAC,CAAC;EACzD;;EAEA;;EAEA;EACAH,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,mCAAmC,EAAE,CAAC,CAAC;EACzD;EACAJ,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,qBAAqB,EAAE,CAAC,CAAC;;EAE3C;;EAEAJ,CAAC,GAAGA,CAAC,CAACG,UAAU,CAAC,sBAAsB,EAAE,CAAC,CAAC;EAC3C;EACAH,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,uCAAuC,EAAE,CAAC,CAAC;EAC7D;EACAJ,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,uCAAuC,EAAE,CAAC,CAAC;EAC7D;EACAJ,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,wCAAwC,EAAE,CAAC,CAAC;;EAE9D;EACAJ,CAAC,GAAGA,CAAC,CAACE,GAAG,CAAC,aAAa,CAAC;EACxB;EACAF,CAAC,GAAGA,CAAC,CAACE,GAAG,CAAC,YAAY,CAAC;;EAEvB;EACA;EACAF,CAAC,GAAGA,CAAC,CAACG,UAAU,CAAC,yBAAyB,EAAE,CAAC,CAAC;EAC9C;EACAH,CAAC,GAAGA,CAAC,CAACG,UAAU,CAAC,qCAAqC,EAAE,CAAC,CAAC;;EAE1D;EACAH,CAAC,GAAGA,CAAC,CAACG,UAAU,CAAC,8BAA8B,EAAE,CAAC,CAAC;;EAEnD;EACA;;EAGA;EACAH,CAAC,GAAGA,CAAC,CAACK,EAAE,CAAC,OAAO,CAAC;EACjB;EACA;EACA;EACA,IAAIL,CAAC,CAACM,GAAG,CAAC,0CAA0C,CAAC,EAAE;IACrDN,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,SAAS,CAAC;EAC9B;EACA,OAAOJ,CAAC;AACV,CAAC;AACD,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}