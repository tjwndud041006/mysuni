{"ast":null,"code":"import getRoot from './root.js';\nimport getAdverbs from './adverbs.js';\nconst getAuxiliary = function (vb, root) {\n  let parts = vb.splitBefore(root);\n  if (parts.length <= 1) {\n    return vb.none();\n  }\n  let aux = parts.eq(0);\n  aux = aux.not('(#Adverb|#Negative|#Prefix)');\n  return aux;\n};\nconst getNegative = function (vb) {\n  return vb.match('#Negative');\n};\n\n// pull-apart phrasal-verb into verb-particle\nconst getPhrasal = function (root) {\n  if (!root.has('(#Particle|#PhrasalVerb)')) {\n    return {\n      verb: root.none(),\n      particle: root.none()\n    };\n  }\n  let particle = root.match('#Particle$');\n  return {\n    verb: root.not(particle),\n    particle: particle\n  };\n};\nconst parseVerb = function (view) {\n  let vb = view.clone();\n  vb.contractions().expand();\n  const root = getRoot(vb);\n  let res = {\n    root: root,\n    prefix: vb.match('#Prefix'),\n    adverbs: getAdverbs(vb, root),\n    auxiliary: getAuxiliary(vb, root),\n    negative: getNegative(vb),\n    phrasal: getPhrasal(root)\n  };\n  return res;\n};\nexport default parseVerb;","map":{"version":3,"names":["getRoot","getAdverbs","getAuxiliary","vb","root","parts","splitBefore","length","none","aux","eq","not","getNegative","match","getPhrasal","has","verb","particle","parseVerb","view","clone","contractions","expand","res","prefix","adverbs","auxiliary","negative","phrasal"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/verbs/api/parse/index.js"],"sourcesContent":["import getRoot from './root.js'\nimport getAdverbs from './adverbs.js'\n\nconst getAuxiliary = function (vb, root) {\n  let parts = vb.splitBefore(root)\n  if (parts.length <= 1) {\n    return vb.none()\n  }\n  let aux = parts.eq(0)\n  aux = aux.not('(#Adverb|#Negative|#Prefix)')\n  return aux\n}\n\nconst getNegative = function (vb) {\n  return vb.match('#Negative')\n}\n\n// pull-apart phrasal-verb into verb-particle\nconst getPhrasal = function (root) {\n  if (!root.has('(#Particle|#PhrasalVerb)')) {\n    return {\n      verb: root.none(),\n      particle: root.none()\n    }\n  }\n  let particle = root.match('#Particle$')\n  return {\n    verb: root.not(particle),\n    particle: particle,\n  }\n}\n\nconst parseVerb = function (view) {\n  let vb = view.clone()\n  vb.contractions().expand()\n  const root = getRoot(vb)\n  let res = {\n    root: root,\n    prefix: vb.match('#Prefix'),\n    adverbs: getAdverbs(vb, root),\n    auxiliary: getAuxiliary(vb, root),\n    negative: getNegative(vb),\n    phrasal: getPhrasal(root),\n  }\n  return res\n}\nexport default parseVerb\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,cAAc;AAErC,MAAMC,YAAY,GAAG,SAAAA,CAAUC,EAAE,EAAEC,IAAI,EAAE;EACvC,IAAIC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAACF,IAAI,CAAC;EAChC,IAAIC,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IACrB,OAAOJ,EAAE,CAACK,IAAI,CAAC,CAAC;EAClB;EACA,IAAIC,GAAG,GAAGJ,KAAK,CAACK,EAAE,CAAC,CAAC,CAAC;EACrBD,GAAG,GAAGA,GAAG,CAACE,GAAG,CAAC,6BAA6B,CAAC;EAC5C,OAAOF,GAAG;AACZ,CAAC;AAED,MAAMG,WAAW,GAAG,SAAAA,CAAUT,EAAE,EAAE;EAChC,OAAOA,EAAE,CAACU,KAAK,CAAC,WAAW,CAAC;AAC9B,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,SAAAA,CAAUV,IAAI,EAAE;EACjC,IAAI,CAACA,IAAI,CAACW,GAAG,CAAC,0BAA0B,CAAC,EAAE;IACzC,OAAO;MACLC,IAAI,EAAEZ,IAAI,CAACI,IAAI,CAAC,CAAC;MACjBS,QAAQ,EAAEb,IAAI,CAACI,IAAI,CAAC;IACtB,CAAC;EACH;EACA,IAAIS,QAAQ,GAAGb,IAAI,CAACS,KAAK,CAAC,YAAY,CAAC;EACvC,OAAO;IACLG,IAAI,EAAEZ,IAAI,CAACO,GAAG,CAACM,QAAQ,CAAC;IACxBA,QAAQ,EAAEA;EACZ,CAAC;AACH,CAAC;AAED,MAAMC,SAAS,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAChC,IAAIhB,EAAE,GAAGgB,IAAI,CAACC,KAAK,CAAC,CAAC;EACrBjB,EAAE,CAACkB,YAAY,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EAC1B,MAAMlB,IAAI,GAAGJ,OAAO,CAACG,EAAE,CAAC;EACxB,IAAIoB,GAAG,GAAG;IACRnB,IAAI,EAAEA,IAAI;IACVoB,MAAM,EAAErB,EAAE,CAACU,KAAK,CAAC,SAAS,CAAC;IAC3BY,OAAO,EAAExB,UAAU,CAACE,EAAE,EAAEC,IAAI,CAAC;IAC7BsB,SAAS,EAAExB,YAAY,CAACC,EAAE,EAAEC,IAAI,CAAC;IACjCuB,QAAQ,EAAEf,WAAW,CAACT,EAAE,CAAC;IACzByB,OAAO,EAAEd,UAAU,CAACV,IAAI;EAC1B,CAAC;EACD,OAAOmB,GAAG;AACZ,CAAC;AACD,eAAeL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}