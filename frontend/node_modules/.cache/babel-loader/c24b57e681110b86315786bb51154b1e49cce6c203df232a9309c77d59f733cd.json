{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict';\n\nconst Stemmer = require('./stemmer');\nconst ruleTable = require('./lancaster_rules').rules;\nfunction acceptable(candidate) {\n  if (candidate.match(/^[aeiou]/)) {\n    return candidate.length > 1;\n  } else {\n    return candidate.length > 2 && candidate.match(/[aeiouy]/);\n  }\n}\n\n// take a token, look up the applicatble rule section and attempt some stemming!\nfunction applyRuleSection(token, intact) {\n  const section = token.substr(-1);\n  const rules = ruleTable[section];\n  if (rules) {\n    for (let i = 0; i < rules.length; i++) {\n      if ((intact || !rules[i].intact) &&\n      // only apply intact rules to intact tokens\n      token.substr(0 - rules[i].pattern.length) === rules[i].pattern) {\n        // hack off only as much as the rule indicates\n        let result = token.substr(0, token.length - rules[i].size);\n\n        // if the rules wants us to apply an appendage do so\n        if (rules[i].appendage) {\n          result += rules[i].appendage;\n        }\n        if (acceptable(result)) {\n          token = result;\n\n          // see what the rules wants to do next\n          if (rules[i].continuation) {\n            // this rule thinks there still might be stem left. keep at it.\n            // since we've applied a change we'll pass false in for intact\n            return applyRuleSection(result, false);\n          } else {\n            // the rule thinks we're done stemming. drop out.\n            return result;\n          }\n        }\n      }\n    }\n  }\n  return token;\n}\nconst LancasterStemmer = new Stemmer();\nmodule.exports = LancasterStemmer;\nLancasterStemmer.stem = function (token) {\n  return applyRuleSection(token.toLowerCase(), true);\n};","map":{"version":3,"names":["Stemmer","require","ruleTable","rules","acceptable","candidate","match","length","applyRuleSection","token","intact","section","substr","i","pattern","result","size","appendage","continuation","LancasterStemmer","module","exports","stem","toLowerCase"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/stemmers/lancaster_stemmer.js"],"sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst Stemmer = require('./stemmer')\nconst ruleTable = require('./lancaster_rules').rules\n\nfunction acceptable (candidate) {\n  if (candidate.match(/^[aeiou]/)) { return (candidate.length > 1) } else { return (candidate.length > 2 && candidate.match(/[aeiouy]/)) }\n}\n\n// take a token, look up the applicatble rule section and attempt some stemming!\nfunction applyRuleSection (token, intact) {\n  const section = token.substr(-1)\n  const rules = ruleTable[section]\n\n  if (rules) {\n    for (let i = 0; i < rules.length; i++) {\n      if ((intact || !rules[i].intact) &&\n            // only apply intact rules to intact tokens\n            token.substr(0 - rules[i].pattern.length) === rules[i].pattern) {\n        // hack off only as much as the rule indicates\n        let result = token.substr(0, token.length - rules[i].size)\n\n        // if the rules wants us to apply an appendage do so\n        if (rules[i].appendage) { result += rules[i].appendage }\n\n        if (acceptable(result)) {\n          token = result\n\n          // see what the rules wants to do next\n          if (rules[i].continuation) {\n            // this rule thinks there still might be stem left. keep at it.\n            // since we've applied a change we'll pass false in for intact\n            return applyRuleSection(result, false)\n          } else {\n            // the rule thinks we're done stemming. drop out.\n            return result\n          }\n        }\n      }\n    }\n  }\n\n  return token\n}\n\nconst LancasterStemmer = new Stemmer()\nmodule.exports = LancasterStemmer\n\nLancasterStemmer.stem = function (token) {\n  return applyRuleSection(token.toLowerCase(), true)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAmB,CAAC,CAACE,KAAK;AAEpD,SAASC,UAAUA,CAAEC,SAAS,EAAE;EAC9B,IAAIA,SAAS,CAACC,KAAK,CAAC,UAAU,CAAC,EAAE;IAAE,OAAQD,SAAS,CAACE,MAAM,GAAG,CAAC;EAAE,CAAC,MAAM;IAAE,OAAQF,SAAS,CAACE,MAAM,GAAG,CAAC,IAAIF,SAAS,CAACC,KAAK,CAAC,UAAU,CAAC;EAAE;AACzI;;AAEA;AACA,SAASE,gBAAgBA,CAAEC,KAAK,EAAEC,MAAM,EAAE;EACxC,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMT,KAAK,GAAGD,SAAS,CAACS,OAAO,CAAC;EAEhC,IAAIR,KAAK,EAAE;IACT,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACI,MAAM,EAAEM,CAAC,EAAE,EAAE;MACrC,IAAI,CAACH,MAAM,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAACH,MAAM;MACzB;MACAD,KAAK,CAACG,MAAM,CAAC,CAAC,GAAGT,KAAK,CAACU,CAAC,CAAC,CAACC,OAAO,CAACP,MAAM,CAAC,KAAKJ,KAAK,CAACU,CAAC,CAAC,CAACC,OAAO,EAAE;QACpE;QACA,IAAIC,MAAM,GAAGN,KAAK,CAACG,MAAM,CAAC,CAAC,EAAEH,KAAK,CAACF,MAAM,GAAGJ,KAAK,CAACU,CAAC,CAAC,CAACG,IAAI,CAAC;;QAE1D;QACA,IAAIb,KAAK,CAACU,CAAC,CAAC,CAACI,SAAS,EAAE;UAAEF,MAAM,IAAIZ,KAAK,CAACU,CAAC,CAAC,CAACI,SAAS;QAAC;QAEvD,IAAIb,UAAU,CAACW,MAAM,CAAC,EAAE;UACtBN,KAAK,GAAGM,MAAM;;UAEd;UACA,IAAIZ,KAAK,CAACU,CAAC,CAAC,CAACK,YAAY,EAAE;YACzB;YACA;YACA,OAAOV,gBAAgB,CAACO,MAAM,EAAE,KAAK,CAAC;UACxC,CAAC,MAAM;YACL;YACA,OAAOA,MAAM;UACf;QACF;MACF;IACF;EACF;EAEA,OAAON,KAAK;AACd;AAEA,MAAMU,gBAAgB,GAAG,IAAInB,OAAO,CAAC,CAAC;AACtCoB,MAAM,CAACC,OAAO,GAAGF,gBAAgB;AAEjCA,gBAAgB,CAACG,IAAI,GAAG,UAAUb,KAAK,EAAE;EACvC,OAAOD,gBAAgB,CAACC,KAAK,CAACc,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC;AACpD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}