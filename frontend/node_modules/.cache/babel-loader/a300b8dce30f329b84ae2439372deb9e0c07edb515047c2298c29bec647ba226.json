{"ast":null,"code":"const hasContraction = /'/;\nconst hadWords = new Set(['better',\n//had better\n'done',\n//had done\n'before',\n// he'd _ before\n'it',\n// he'd _ it\n'had' //she'd had -> she would have..\n]);\nconst wouldWords = new Set(['have',\n// 'i'd have' -> i would have..\n'be' //' she'd be'\n]);\n\n//look for a past-tense verb\n// You'd mentioned -> you had mentioned\n// You'd mention -> you would mention\nconst hadOrWould = (terms, i) => {\n  // scan ahead\n  for (let o = i + 1; o < terms.length; o += 1) {\n    let t = terms[o];\n    // you'd better go\n    if (hadWords.has(t.normal)) {\n      return 'had';\n    }\n    // we'd have\n    if (wouldWords.has(t.normal)) {\n      return 'would';\n    }\n    // You'd mentioned -> you had mentioned\n    if (t.tags.has('PastTense') || t.switch === 'Adj|Past') {\n      return 'had';\n    }\n    // You'd mention -> you would mention\n    if (t.tags.has('PresentTense') || t.tags.has('Infinitive')) {\n      return 'would';\n    }\n    // i'd an issue\n    if (t.tags.has('#Determiner')) {\n      return 'had';\n    }\n    if (t.tags.has('Adjective')) {\n      return 'would';\n    }\n  }\n  return false;\n};\n\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\nconst _apostropheD = function (terms, i) {\n  let before = terms[i].normal.split(hasContraction)[0];\n  // what'd, how'd\n  if (before === 'how' || before === 'what') {\n    return [before, 'did'];\n  }\n  if (hadOrWould(terms, i) === 'had') {\n    return [before, 'had'];\n  }\n  // had/would/did\n  return [before, 'would'];\n};\nexport default _apostropheD;","map":{"version":3,"names":["hasContraction","hadWords","Set","wouldWords","hadOrWould","terms","i","o","length","t","has","normal","tags","switch","_apostropheD","before","split"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-d.js"],"sourcesContent":["const hasContraction = /'/\n\nconst hadWords = new Set([\n  'better', //had better\n  'done', //had done\n  'before', // he'd _ before\n  'it', // he'd _ it\n  'had', //she'd had -> she would have..\n])\n\nconst wouldWords = new Set([\n  'have', // 'i'd have' -> i would have..\n  'be', //' she'd be'\n])\n\n//look for a past-tense verb\n// You'd mentioned -> you had mentioned\n// You'd mention -> you would mention\nconst hadOrWould = (terms, i) => {\n  // scan ahead\n  for (let o = i + 1; o < terms.length; o += 1) {\n    let t = terms[o]\n    // you'd better go\n    if (hadWords.has(t.normal)) {\n      return 'had'\n    }\n    // we'd have\n    if (wouldWords.has(t.normal)) {\n      return 'would'\n    }\n    // You'd mentioned -> you had mentioned\n    if (t.tags.has('PastTense') || t.switch === 'Adj|Past') {\n      return 'had'\n    }\n    // You'd mention -> you would mention\n    if (t.tags.has('PresentTense') || t.tags.has('Infinitive')) {\n      return 'would'\n    }\n    // i'd an issue\n    if (t.tags.has('#Determiner')) {\n      return 'had'\n    }\n    if (t.tags.has('Adjective')) {\n      return 'would'\n    }\n  }\n  return false\n}\n\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\nconst _apostropheD = function (terms, i) {\n  let before = terms[i].normal.split(hasContraction)[0]\n  // what'd, how'd\n  if (before === 'how' || before === 'what') {\n    return [before, 'did']\n  }\n  if (hadOrWould(terms, i) === 'had') {\n    return [before, 'had']\n  }\n  // had/would/did\n  return [before, 'would']\n}\nexport default _apostropheD\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,GAAG;AAE1B,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CACvB,QAAQ;AAAE;AACV,MAAM;AAAE;AACR,QAAQ;AAAE;AACV,IAAI;AAAE;AACN,KAAK,CAAE;AAAA,CACR,CAAC;AAEF,MAAMC,UAAU,GAAG,IAAID,GAAG,CAAC,CACzB,MAAM;AAAE;AACR,IAAI,CAAE;AAAA,CACP,CAAC;;AAEF;AACA;AACA;AACA,MAAME,UAAU,GAAGA,CAACC,KAAK,EAAEC,CAAC,KAAK;EAC/B;EACA,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC5C,IAAIE,CAAC,GAAGJ,KAAK,CAACE,CAAC,CAAC;IAChB;IACA,IAAIN,QAAQ,CAACS,GAAG,CAACD,CAAC,CAACE,MAAM,CAAC,EAAE;MAC1B,OAAO,KAAK;IACd;IACA;IACA,IAAIR,UAAU,CAACO,GAAG,CAACD,CAAC,CAACE,MAAM,CAAC,EAAE;MAC5B,OAAO,OAAO;IAChB;IACA;IACA,IAAIF,CAAC,CAACG,IAAI,CAACF,GAAG,CAAC,WAAW,CAAC,IAAID,CAAC,CAACI,MAAM,KAAK,UAAU,EAAE;MACtD,OAAO,KAAK;IACd;IACA;IACA,IAAIJ,CAAC,CAACG,IAAI,CAACF,GAAG,CAAC,cAAc,CAAC,IAAID,CAAC,CAACG,IAAI,CAACF,GAAG,CAAC,YAAY,CAAC,EAAE;MAC1D,OAAO,OAAO;IAChB;IACA;IACA,IAAID,CAAC,CAACG,IAAI,CAACF,GAAG,CAAC,aAAa,CAAC,EAAE;MAC7B,OAAO,KAAK;IACd;IACA,IAAID,CAAC,CAACG,IAAI,CAACF,GAAG,CAAC,WAAW,CAAC,EAAE;MAC3B,OAAO,OAAO;IAChB;EACF;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA,MAAMI,YAAY,GAAG,SAAAA,CAAUT,KAAK,EAAEC,CAAC,EAAE;EACvC,IAAIS,MAAM,GAAGV,KAAK,CAACC,CAAC,CAAC,CAACK,MAAM,CAACK,KAAK,CAAChB,cAAc,CAAC,CAAC,CAAC,CAAC;EACrD;EACA,IAAIe,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,MAAM,EAAE;IACzC,OAAO,CAACA,MAAM,EAAE,KAAK,CAAC;EACxB;EACA,IAAIX,UAAU,CAACC,KAAK,EAAEC,CAAC,CAAC,KAAK,KAAK,EAAE;IAClC,OAAO,CAACS,MAAM,EAAE,KAAK,CAAC;EACxB;EACA;EACA,OAAO,CAACA,MAAM,EAAE,OAAO,CAAC;AAC1B,CAAC;AACD,eAAeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}