{"ast":null,"code":"const isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]';\n};\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n};\n\n// internal Term objects are slightly different\nconst fromJson = function (json) {\n  return json.map(o => {\n    return o.terms.map(term => {\n      if (isArray(term.tags)) {\n        term.tags = new Set(term.tags);\n      }\n      return term;\n    });\n  });\n};\n\n// interpret an array-of-arrays\nconst preTokenized = function (arr) {\n  return arr.map(a => {\n    return a.map(str => {\n      return {\n        text: str,\n        normal: str,\n        //cleanup\n        pre: '',\n        post: ' ',\n        tags: new Set()\n      };\n    });\n  });\n};\nconst inputs = function (input, View, world) {\n  const {\n    methods\n  } = world;\n  let doc = new View([]);\n  doc.world = world;\n  // support a number\n  if (typeof input === 'number') {\n    input = String(input);\n  }\n  // return empty doc\n  if (!input) {\n    return doc;\n  }\n  // parse a string\n  if (typeof input === 'string') {\n    let document = methods.one.tokenize.fromString(input, world);\n    return new View(document);\n  }\n  // handle compromise View\n  if (isObject(input) && input.isView) {\n    return new View(input.document, input.ptrs);\n  }\n  // handle json input\n  if (isArray(input)) {\n    // pre-tokenized array-of-arrays \n    if (isArray(input[0])) {\n      let document = preTokenized(input);\n      return new View(document);\n    }\n    // handle json output\n    let document = fromJson(input);\n    return new View(document);\n  }\n  return doc;\n};\nexport default inputs;","map":{"version":3,"names":["isObject","val","Object","prototype","toString","call","isArray","arr","fromJson","json","map","o","terms","term","tags","Set","preTokenized","a","str","text","normal","pre","post","inputs","input","View","world","methods","doc","String","document","one","tokenize","fromString","isView","ptrs"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/API/inputs.js"],"sourcesContent":["const isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\n// internal Term objects are slightly different\nconst fromJson = function (json) {\n  return json.map(o => {\n    return o.terms.map(term => {\n      if (isArray(term.tags)) {\n        term.tags = new Set(term.tags)\n      }\n      return term\n    })\n  })\n}\n\n// interpret an array-of-arrays\nconst preTokenized = function (arr) {\n  return arr.map((a) => {\n    return a.map(str => {\n      return {\n        text: str,\n        normal: str,//cleanup\n        pre: '',\n        post: ' ',\n        tags: new Set()\n      }\n    })\n  })\n}\n\nconst inputs = function (input, View, world) {\n  const { methods } = world\n  let doc = new View([])\n  doc.world = world\n  // support a number\n  if (typeof input === 'number') {\n    input = String(input)\n  }\n  // return empty doc\n  if (!input) {\n    return doc\n  }\n  // parse a string\n  if (typeof input === 'string') {\n    let document = methods.one.tokenize.fromString(input, world)\n    return new View(document)\n  }\n  // handle compromise View\n  if (isObject(input) && input.isView) {\n    return new View(input.document, input.ptrs)\n  }\n  // handle json input\n  if (isArray(input)) {\n    // pre-tokenized array-of-arrays \n    if (isArray(input[0])) {\n      let document = preTokenized(input)\n      return new View(document)\n    }\n    // handle json output\n    let document = fromJson(input)\n    return new View(document)\n  }\n  return doc\n}\nexport default inputs"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,GAAG,IAAI;EACtB,OAAOC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,GAAG,CAAC,KAAK,iBAAiB;AAClE,CAAC;AAED,MAAMK,OAAO,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC7B,OAAOL,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACE,GAAG,CAAC,KAAK,gBAAgB;AACjE,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC/B,OAAOA,IAAI,CAACC,GAAG,CAACC,CAAC,IAAI;IACnB,OAAOA,CAAC,CAACC,KAAK,CAACF,GAAG,CAACG,IAAI,IAAI;MACzB,IAAIP,OAAO,CAACO,IAAI,CAACC,IAAI,CAAC,EAAE;QACtBD,IAAI,CAACC,IAAI,GAAG,IAAIC,GAAG,CAACF,IAAI,CAACC,IAAI,CAAC;MAChC;MACA,OAAOD,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMG,YAAY,GAAG,SAAAA,CAAUT,GAAG,EAAE;EAClC,OAAOA,GAAG,CAACG,GAAG,CAAEO,CAAC,IAAK;IACpB,OAAOA,CAAC,CAACP,GAAG,CAACQ,GAAG,IAAI;MAClB,OAAO;QACLC,IAAI,EAAED,GAAG;QACTE,MAAM,EAAEF,GAAG;QAAC;QACZG,GAAG,EAAE,EAAE;QACPC,IAAI,EAAE,GAAG;QACTR,IAAI,EAAE,IAAIC,GAAG,CAAC;MAChB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,MAAMQ,MAAM,GAAG,SAAAA,CAAUC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC3C,MAAM;IAAEC;EAAQ,CAAC,GAAGD,KAAK;EACzB,IAAIE,GAAG,GAAG,IAAIH,IAAI,CAAC,EAAE,CAAC;EACtBG,GAAG,CAACF,KAAK,GAAGA,KAAK;EACjB;EACA,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;IAC7BA,KAAK,GAAGK,MAAM,CAACL,KAAK,CAAC;EACvB;EACA;EACA,IAAI,CAACA,KAAK,EAAE;IACV,OAAOI,GAAG;EACZ;EACA;EACA,IAAI,OAAOJ,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAIM,QAAQ,GAAGH,OAAO,CAACI,GAAG,CAACC,QAAQ,CAACC,UAAU,CAACT,KAAK,EAAEE,KAAK,CAAC;IAC5D,OAAO,IAAID,IAAI,CAACK,QAAQ,CAAC;EAC3B;EACA;EACA,IAAI9B,QAAQ,CAACwB,KAAK,CAAC,IAAIA,KAAK,CAACU,MAAM,EAAE;IACnC,OAAO,IAAIT,IAAI,CAACD,KAAK,CAACM,QAAQ,EAAEN,KAAK,CAACW,IAAI,CAAC;EAC7C;EACA;EACA,IAAI7B,OAAO,CAACkB,KAAK,CAAC,EAAE;IAClB;IACA,IAAIlB,OAAO,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACrB,IAAIM,QAAQ,GAAGd,YAAY,CAACQ,KAAK,CAAC;MAClC,OAAO,IAAIC,IAAI,CAACK,QAAQ,CAAC;IAC3B;IACA;IACA,IAAIA,QAAQ,GAAGtB,QAAQ,CAACgB,KAAK,CAAC;IAC9B,OAAO,IAAIC,IAAI,CAACK,QAAQ,CAAC;EAC3B;EACA,OAAOF,GAAG;AACZ,CAAC;AACD,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}