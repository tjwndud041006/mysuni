{"ast":null,"code":"const titleCase = /^\\p{Lu}[\\p{Ll}'’]/u; //upercase, then lowercase\nimport contract from './contract.js';\nconst toTitleCase = function (str = '') {\n  str = str.replace(/^ *[a-z\\u00C0-\\u00FF]/, x => x.toUpperCase()); //TODO: support unicode\n  return str;\n};\nconst api = function (View) {\n  /** */\n  class Contractions extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Contraction';\n    }\n    /** i've -> 'i have' */\n    expand() {\n      this.docs.forEach(terms => {\n        let isTitleCase = titleCase.test(terms[0].text);\n        terms.forEach((t, i) => {\n          t.text = t.implicit || '';\n          delete t.implicit;\n          //add whitespace\n          if (i < terms.length - 1 && t.post === '') {\n            t.post += ' ';\n          }\n          // flag it as dirty\n          t.dirty = true;\n        });\n        // make the first word title-case?\n        if (isTitleCase) {\n          terms[0].text = toTitleCase(terms[0].text);\n        }\n      });\n      this.compute('normal'); //re-set normalized text\n      return this;\n    }\n  }\n  // add fn to View\n  View.prototype.contractions = function () {\n    let m = this.match('@hasContraction+');\n    return new Contractions(this.document, m.pointer);\n  };\n  View.prototype.contract = contract;\n};\nexport default api;","map":{"version":3,"names":["titleCase","contract","toTitleCase","str","replace","x","toUpperCase","api","View","Contractions","constructor","document","pointer","groups","viewType","expand","docs","forEach","terms","isTitleCase","test","text","t","i","implicit","length","post","dirty","compute","prototype","contractions","m","match"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/contraction-two/api/index.js"],"sourcesContent":["const titleCase = /^\\p{Lu}[\\p{Ll}'’]/u //upercase, then lowercase\nimport contract from './contract.js'\n\nconst toTitleCase = function (str = '') {\n  str = str.replace(/^ *[a-z\\u00C0-\\u00FF]/, x => x.toUpperCase()) //TODO: support unicode\n  return str\n}\n\nconst api = function (View) {\n  /** */\n  class Contractions extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Contraction'\n    }\n    /** i've -> 'i have' */\n    expand() {\n      this.docs.forEach(terms => {\n        let isTitleCase = titleCase.test(terms[0].text)\n        terms.forEach((t, i) => {\n          t.text = t.implicit || ''\n          delete t.implicit\n          //add whitespace\n          if (i < terms.length - 1 && t.post === '') {\n            t.post += ' '\n          }\n          // flag it as dirty\n          t.dirty = true\n        })\n        // make the first word title-case?\n        if (isTitleCase) {\n          terms[0].text = toTitleCase(terms[0].text)\n        }\n      })\n      this.compute('normal') //re-set normalized text\n      return this\n    }\n  }\n  // add fn to View\n  View.prototype.contractions = function () {\n    let m = this.match('@hasContraction+')\n    return new Contractions(this.document, m.pointer)\n  }\n  View.prototype.contract = contract\n}\n\nexport default api\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,oBAAoB,EAAC;AACvC,OAAOC,QAAQ,MAAM,eAAe;AAEpC,MAAMC,WAAW,GAAG,SAAAA,CAAUC,GAAG,GAAG,EAAE,EAAE;EACtCA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,uBAAuB,EAAEC,CAAC,IAAIA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,EAAC;EACjE,OAAOH,GAAG;AACZ,CAAC;AAED,MAAMI,GAAG,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC1B;EACA,MAAMC,YAAY,SAASD,IAAI,CAAC;IAC9BE,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;MACrC,KAAK,CAACF,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;MAChC,IAAI,CAACC,QAAQ,GAAG,aAAa;IAC/B;IACA;IACAC,MAAMA,CAAA,EAAG;MACP,IAAI,CAACC,IAAI,CAACC,OAAO,CAACC,KAAK,IAAI;QACzB,IAAIC,WAAW,GAAGnB,SAAS,CAACoB,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC;QAC/CH,KAAK,CAACD,OAAO,CAAC,CAACK,CAAC,EAAEC,CAAC,KAAK;UACtBD,CAAC,CAACD,IAAI,GAAGC,CAAC,CAACE,QAAQ,IAAI,EAAE;UACzB,OAAOF,CAAC,CAACE,QAAQ;UACjB;UACA,IAAID,CAAC,GAAGL,KAAK,CAACO,MAAM,GAAG,CAAC,IAAIH,CAAC,CAACI,IAAI,KAAK,EAAE,EAAE;YACzCJ,CAAC,CAACI,IAAI,IAAI,GAAG;UACf;UACA;UACAJ,CAAC,CAACK,KAAK,GAAG,IAAI;QAChB,CAAC,CAAC;QACF;QACA,IAAIR,WAAW,EAAE;UACfD,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,GAAGnB,WAAW,CAACgB,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC;QAC5C;MACF,CAAC,CAAC;MACF,IAAI,CAACO,OAAO,CAAC,QAAQ,CAAC,EAAC;MACvB,OAAO,IAAI;IACb;EACF;EACA;EACApB,IAAI,CAACqB,SAAS,CAACC,YAAY,GAAG,YAAY;IACxC,IAAIC,CAAC,GAAG,IAAI,CAACC,KAAK,CAAC,kBAAkB,CAAC;IACtC,OAAO,IAAIvB,YAAY,CAAC,IAAI,CAACE,QAAQ,EAAEoB,CAAC,CAACnB,OAAO,CAAC;EACnD,CAAC;EACDJ,IAAI,CAACqB,SAAS,CAAC5B,QAAQ,GAAGA,QAAQ;AACpC,CAAC;AAED,eAAeM,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}