{"ast":null,"code":"// longest common prefix\nconst findOverlap = (from, to) => {\n  let all = [];\n  for (let i = 0; i < from.length; i += 1) {\n    if (from[i] === to[i]) {\n      all.push(from[i]);\n    } else {\n      break;\n    }\n  }\n  return all.join('');\n};\n\n// run-length encode any shared prefix\nlet compress = function (key, val) {\n  let prefix = findOverlap(key, val);\n  if (prefix.length < 1) {\n    return val;\n  }\n  let out = prefix.length + val.substr(prefix.length);\n  return out;\n};\nexport default compress;\n// console.log(compress('fixture', 'fixturing'))","map":{"version":3,"names":["findOverlap","from","to","all","i","length","push","join","compress","key","val","prefix","out","substr"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/suffix-thumb/src/compress/key-val.js"],"sourcesContent":["// longest common prefix\nconst findOverlap = (from, to) => {\n  let all = []\n  for (let i = 0; i < from.length; i += 1) {\n    if (from[i] === to[i]) {\n      all.push(from[i])\n    } else {\n      break\n    }\n  }\n  return all.join('')\n}\n\n// run-length encode any shared prefix\nlet compress = function (key, val) {\n  let prefix = findOverlap(key, val)\n  if (prefix.length < 1) {\n    return val\n  }\n  let out = prefix.length + val.substr(prefix.length)\n  return out\n}\n\nexport default compress\n// console.log(compress('fixture', 'fixturing'))"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;EAChC,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACvC,IAAIH,IAAI,CAACG,CAAC,CAAC,KAAKF,EAAE,CAACE,CAAC,CAAC,EAAE;MACrBD,GAAG,CAACG,IAAI,CAACL,IAAI,CAACG,CAAC,CAAC,CAAC;IACnB,CAAC,MAAM;MACL;IACF;EACF;EACA,OAAOD,GAAG,CAACI,IAAI,CAAC,EAAE,CAAC;AACrB,CAAC;;AAED;AACA,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,GAAG,EAAEC,GAAG,EAAE;EACjC,IAAIC,MAAM,GAAGX,WAAW,CAACS,GAAG,EAAEC,GAAG,CAAC;EAClC,IAAIC,MAAM,CAACN,MAAM,GAAG,CAAC,EAAE;IACrB,OAAOK,GAAG;EACZ;EACA,IAAIE,GAAG,GAAGD,MAAM,CAACN,MAAM,GAAGK,GAAG,CAACG,MAAM,CAACF,MAAM,CAACN,MAAM,CAAC;EACnD,OAAOO,GAAG;AACZ,CAAC;AAED,eAAeJ,QAAQ;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}