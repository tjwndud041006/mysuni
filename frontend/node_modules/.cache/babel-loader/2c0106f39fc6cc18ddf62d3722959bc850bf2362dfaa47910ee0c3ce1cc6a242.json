{"ast":null,"code":"/*\n   Set of transformation rules\n   Copyright (C) 2019 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict ';\n\nconst TFParser = require('./TF_Parser');\nconst dutchRuleSet = require('../data/Dutch/brill_CONTEXTRULES.json');\nconst englishRuleSet = require('../data/English/tr_from_posjs.json');\nconst DEBUG = false;\nclass RuleSet {\n  // Constructor takes a language abbreviation and loads the right rule set\n  constructor(language) {\n    let data = englishRuleSet;\n    DEBUG && console.log(data);\n    switch (language) {\n      case 'EN':\n        data = englishRuleSet;\n        break;\n      case 'DU':\n        data = dutchRuleSet;\n        break;\n    }\n    if (data.rules) {\n      this.rules = {};\n      const that = this;\n      data.rules.forEach(function (ruleString) {\n        that.addRule(TFParser.parse(ruleString));\n      });\n    }\n    DEBUG && console.log(this.rules);\n    DEBUG && console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + Object.keys(this.rules).length);\n  }\n  addRule(rule) {\n    // this.rules.push(rule);\n    if (!this.rules[rule.key()]) {\n      this.rules[rule.key()] = rule;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  removeRule(rule) {\n    if (this.rules[rule.key()]) {\n      delete this.rules[rule.key()];\n    }\n  }\n  getRules() {\n    const that = this;\n    return Object.keys(this.rules).map(function (key) {\n      return that.rules[key];\n    });\n  }\n  nrRules() {\n    return Object.keys(this.rules).length;\n  }\n  hasRule(rule) {\n    if (this.rules[rule.key()]) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  prettyPrint() {\n    let result = '';\n    const that = this;\n    Object.keys(this.rules).forEach(function (key) {\n      const rule = that.rules[key];\n      result += rule.prettyPrint() + '\\n';\n    });\n    return result;\n  }\n}\nmodule.exports = RuleSet;","map":{"version":3,"names":["TFParser","require","dutchRuleSet","englishRuleSet","DEBUG","RuleSet","constructor","language","data","console","log","rules","that","forEach","ruleString","addRule","parse","Object","keys","length","rule","key","removeRule","getRules","map","nrRules","hasRule","prettyPrint","result","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/brill_pos_tagger/lib/RuleSet.js"],"sourcesContent":["/*\n   Set of transformation rules\n   Copyright (C) 2019 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict '\n\nconst TFParser = require('./TF_Parser')\n\nconst dutchRuleSet = require('../data/Dutch/brill_CONTEXTRULES.json')\nconst englishRuleSet = require('../data/English/tr_from_posjs.json')\n\nconst DEBUG = false\n\nclass RuleSet {\n  // Constructor takes a language abbreviation and loads the right rule set\n  constructor (language) {\n    let data = englishRuleSet\n    DEBUG && console.log(data)\n    switch (language) {\n      case 'EN':\n        data = englishRuleSet\n        break\n      case 'DU':\n        data = dutchRuleSet\n        break\n    }\n    if (data.rules) {\n      this.rules = {}\n      const that = this\n      data.rules.forEach(function (ruleString) {\n        that.addRule(TFParser.parse(ruleString))\n      })\n    }\n    DEBUG && console.log(this.rules)\n    DEBUG && console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + Object.keys(this.rules).length)\n  }\n\n  addRule (rule) {\n    // this.rules.push(rule);\n    if (!this.rules[rule.key()]) {\n      this.rules[rule.key()] = rule\n      return true\n    } else {\n      return false\n    }\n  }\n\n  removeRule (rule) {\n    if (this.rules[rule.key()]) {\n      delete this.rules[rule.key()]\n    }\n  }\n\n  getRules () {\n    const that = this\n    return Object.keys(this.rules).map(function (key) {\n      return that.rules[key]\n    })\n  }\n\n  nrRules () {\n    return Object.keys(this.rules).length\n  }\n\n  hasRule (rule) {\n    if (this.rules[rule.key()]) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  prettyPrint () {\n    let result = ''\n    const that = this\n    Object.keys(this.rules).forEach(function (key) {\n      const rule = that.rules[key]\n      result += rule.prettyPrint() + '\\n'\n    })\n    return result\n  }\n}\n\nmodule.exports = RuleSet\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}