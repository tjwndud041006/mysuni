{"ast":null,"code":"// generate all the possible prefixes up-front\nconst getPrefixes = function (arr, opts, world) {\n  let index = {};\n  let collisions = [];\n  let existing = world.prefixes || {};\n  arr.forEach(str => {\n    str = str.toLowerCase().trim();\n    let max = str.length;\n    if (opts.max && max > opts.max) {\n      max = opts.max;\n    }\n    for (let size = opts.min; size < max; size += 1) {\n      let prefix = str.substring(0, size);\n      // ensure prefix is not a word\n      if (opts.safe && world.model.one.lexicon.hasOwnProperty(prefix)) {\n        continue;\n      }\n      // does it already exist?\n      if (existing.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix);\n        continue;\n      }\n      if (index.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix);\n        continue;\n      }\n      index[prefix] = str;\n    }\n  });\n  // merge with existing prefixes\n  index = Object.assign({}, existing, index);\n  // remove ambiguous-prefixes\n  collisions.forEach(str => {\n    delete index[str];\n  });\n  return index;\n};\nexport default getPrefixes;","map":{"version":3,"names":["getPrefixes","arr","opts","world","index","collisions","existing","prefixes","forEach","str","toLowerCase","trim","max","length","size","min","prefix","substring","safe","model","one","lexicon","hasOwnProperty","push","Object","assign"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/typeahead/lib/allPrefixes.js"],"sourcesContent":["// generate all the possible prefixes up-front\nconst getPrefixes = function (arr, opts, world) {\n  let index = {}\n  let collisions = []\n  let existing = world.prefixes || {}\n  arr.forEach((str) => {\n    str = str.toLowerCase().trim()\n    let max = str.length\n    if (opts.max && max > opts.max) {\n      max = opts.max\n    }\n    for (let size = opts.min; size < max; size += 1) {\n      let prefix = str.substring(0, size)\n      // ensure prefix is not a word\n      if (opts.safe && world.model.one.lexicon.hasOwnProperty(prefix)) {\n        continue\n      }\n      // does it already exist?\n      if (existing.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix)\n        continue\n      }\n      if (index.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix)\n        continue\n      }\n      index[prefix] = str\n    }\n  })\n  // merge with existing prefixes\n  index = Object.assign({}, existing, index)\n  // remove ambiguous-prefixes\n  collisions.forEach((str) => {\n    delete index[str]\n  })\n  return index\n}\n\nexport default getPrefixes\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,SAAAA,CAAUC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC9C,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,QAAQ,GAAGH,KAAK,CAACI,QAAQ,IAAI,CAAC,CAAC;EACnCN,GAAG,CAACO,OAAO,CAAEC,GAAG,IAAK;IACnBA,GAAG,GAAGA,GAAG,CAACC,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAC9B,IAAIC,GAAG,GAAGH,GAAG,CAACI,MAAM;IACpB,IAAIX,IAAI,CAACU,GAAG,IAAIA,GAAG,GAAGV,IAAI,CAACU,GAAG,EAAE;MAC9BA,GAAG,GAAGV,IAAI,CAACU,GAAG;IAChB;IACA,KAAK,IAAIE,IAAI,GAAGZ,IAAI,CAACa,GAAG,EAAED,IAAI,GAAGF,GAAG,EAAEE,IAAI,IAAI,CAAC,EAAE;MAC/C,IAAIE,MAAM,GAAGP,GAAG,CAACQ,SAAS,CAAC,CAAC,EAAEH,IAAI,CAAC;MACnC;MACA,IAAIZ,IAAI,CAACgB,IAAI,IAAIf,KAAK,CAACgB,KAAK,CAACC,GAAG,CAACC,OAAO,CAACC,cAAc,CAACN,MAAM,CAAC,EAAE;QAC/D;MACF;MACA;MACA,IAAIV,QAAQ,CAACgB,cAAc,CAACN,MAAM,CAAC,KAAK,IAAI,EAAE;QAC5CX,UAAU,CAACkB,IAAI,CAACP,MAAM,CAAC;QACvB;MACF;MACA,IAAIZ,KAAK,CAACkB,cAAc,CAACN,MAAM,CAAC,KAAK,IAAI,EAAE;QACzCX,UAAU,CAACkB,IAAI,CAACP,MAAM,CAAC;QACvB;MACF;MACAZ,KAAK,CAACY,MAAM,CAAC,GAAGP,GAAG;IACrB;EACF,CAAC,CAAC;EACF;EACAL,KAAK,GAAGoB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnB,QAAQ,EAAEF,KAAK,CAAC;EAC1C;EACAC,UAAU,CAACG,OAAO,CAAEC,GAAG,IAAK;IAC1B,OAAOL,KAAK,CAACK,GAAG,CAAC;EACnB,CAAC,CAAC;EACF,OAAOL,KAAK;AACd,CAAC;AAED,eAAeJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}