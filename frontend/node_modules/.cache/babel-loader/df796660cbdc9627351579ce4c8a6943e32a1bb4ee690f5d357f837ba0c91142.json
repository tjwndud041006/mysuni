{"ast":null,"code":"import convert from './_convert.js';\nconst getPercent = (part, total) => {\n  if (total === 0) {\n    return 100;\n  }\n  let num = part / total * 100;\n  num = Math.round(num * 10) / 10;\n  return num;\n};\n\n// decide whether this rule performs well or not\nconst considerRule = function (rule, pairs) {\n  let total = 0;\n  let clear = new Set();\n  if (!rule) {\n    return {\n      total,\n      percent: 0,\n      rule,\n      clear,\n      count: 0\n    };\n  }\n  if (pairs.length === 0) {\n    return {\n      total,\n      percent: 100,\n      rule,\n      clear,\n      count: 0\n    };\n  }\n  pairs.forEach(pair => {\n    let res = convert(pair[0], rule);\n    if (res !== null) {\n      total += 1;\n      if (res === pair[1]) {\n        clear.add(pair[0]);\n      }\n    }\n  });\n  return {\n    total,\n    count: clear.size,\n    percent: getPercent(clear.size, total),\n    rule,\n    clear\n  };\n};\nexport default considerRule;","map":{"version":3,"names":["convert","getPercent","part","total","num","Math","round","considerRule","rule","pairs","clear","Set","percent","count","length","forEach","pair","res","add","size"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/suffix-thumb/src/learn/find/01-consider.js"],"sourcesContent":["import convert from './_convert.js'\n\nconst getPercent = (part, total) => {\n  if (total === 0) {\n    return 100\n  }\n  let num = (part / total) * 100;\n  num = Math.round(num * 10) / 10;\n  return num;\n};\n\n// decide whether this rule performs well or not\nconst considerRule = function (rule, pairs) {\n  let total = 0\n  let clear = new Set()\n  if (!rule) {\n    return { total, percent: 0, rule, clear, count: 0 }\n  }\n  if (pairs.length === 0) {\n    return { total, percent: 100, rule, clear, count: 0 }\n  }\n  pairs.forEach(pair => {\n    let res = convert(pair[0], rule)\n    if (res !== null) {\n      total += 1\n      if (res === pair[1]) {\n        clear.add(pair[0])\n      }\n    }\n  })\n  return {\n    total,\n    count: clear.size,\n    percent: getPercent(clear.size, total),\n    rule,\n    clear\n  }\n}\nexport default considerRule"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AAEnC,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EAClC,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,GAAG;EACZ;EACA,IAAIC,GAAG,GAAIF,IAAI,GAAGC,KAAK,GAAI,GAAG;EAC9BC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE;EAC/B,OAAOA,GAAG;AACZ,CAAC;;AAED;AACA,MAAMG,YAAY,GAAG,SAAAA,CAAUC,IAAI,EAAEC,KAAK,EAAE;EAC1C,IAAIN,KAAK,GAAG,CAAC;EACb,IAAIO,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,IAAI,CAACH,IAAI,EAAE;IACT,OAAO;MAAEL,KAAK;MAAES,OAAO,EAAE,CAAC;MAAEJ,IAAI;MAAEE,KAAK;MAAEG,KAAK,EAAE;IAAE,CAAC;EACrD;EACA,IAAIJ,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO;MAAEX,KAAK;MAAES,OAAO,EAAE,GAAG;MAAEJ,IAAI;MAAEE,KAAK;MAAEG,KAAK,EAAE;IAAE,CAAC;EACvD;EACAJ,KAAK,CAACM,OAAO,CAACC,IAAI,IAAI;IACpB,IAAIC,GAAG,GAAGjB,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC,EAAER,IAAI,CAAC;IAChC,IAAIS,GAAG,KAAK,IAAI,EAAE;MAChBd,KAAK,IAAI,CAAC;MACV,IAAIc,GAAG,KAAKD,IAAI,CAAC,CAAC,CAAC,EAAE;QACnBN,KAAK,CAACQ,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;MACpB;IACF;EACF,CAAC,CAAC;EACF,OAAO;IACLb,KAAK;IACLU,KAAK,EAAEH,KAAK,CAACS,IAAI;IACjBP,OAAO,EAAEX,UAAU,CAACS,KAAK,CAACS,IAAI,EAAEhB,KAAK,CAAC;IACtCK,IAAI;IACJE;EACF,CAAC;AACH,CAAC;AACD,eAAeH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}