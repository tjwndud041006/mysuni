{"ast":null,"code":"const hasHyphen = function (str, model) {\n  let parts = str.split(/[-–—]/);\n  if (parts.length <= 1) {\n    return false;\n  }\n  const {\n    prefixes,\n    suffixes\n  } = model.one;\n\n  // l-theanine, x-ray\n  if (parts[0].length === 1 && /[a-z]/i.test(parts[0])) {\n    return false;\n  }\n  //dont split 're-do'\n  if (prefixes.hasOwnProperty(parts[0])) {\n    return false;\n  }\n  //dont split 'flower-like'\n  parts[1] = parts[1].trim().replace(/[.?!]$/, '');\n  if (suffixes.hasOwnProperty(parts[1])) {\n    return false;\n  }\n  //letter-number 'aug-20'\n  let reg = /^([a-z\\u00C0-\\u00FF`\"'/]+)[-–—]([a-z0-9\\u00C0-\\u00FF].*)/i;\n  if (reg.test(str) === true) {\n    return true;\n  }\n  //number-letter '20-aug'\n  let reg2 = /^[('\"]?([0-9]{1,4})[-–—]([a-z\\u00C0-\\u00FF`\"'/-]+[)'\"]?$)/i;\n  if (reg2.test(str) === true) {\n    return true;\n  }\n  return false;\n};\nconst splitHyphens = function (word) {\n  let arr = [];\n  //support multiple-hyphenated-terms\n  const hyphens = word.split(/[-–—]/);\n  let whichDash = '-';\n  let found = word.match(/[-–—]/);\n  if (found && found[0]) {\n    whichDash = found;\n  }\n  for (let o = 0; o < hyphens.length; o++) {\n    if (o === hyphens.length - 1) {\n      arr.push(hyphens[o]);\n    } else {\n      arr.push(hyphens[o] + whichDash);\n    }\n  }\n  return arr;\n};\nexport { splitHyphens, hasHyphen };","map":{"version":3,"names":["hasHyphen","str","model","parts","split","length","prefixes","suffixes","one","test","hasOwnProperty","trim","replace","reg","reg2","splitHyphens","word","arr","hyphens","whichDash","found","match","o","push"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/methods/02-terms/01-hyphens.js"],"sourcesContent":["const hasHyphen = function (str, model) {\n  let parts = str.split(/[-–—]/)\n  if (parts.length <= 1) {\n    return false\n  }\n  const { prefixes, suffixes } = model.one\n\n  // l-theanine, x-ray\n  if (parts[0].length === 1 && /[a-z]/i.test(parts[0])) {\n    return false\n  }\n  //dont split 're-do'\n  if (prefixes.hasOwnProperty(parts[0])) {\n    return false\n  }\n  //dont split 'flower-like'\n  parts[1] = parts[1].trim().replace(/[.?!]$/, '')\n  if (suffixes.hasOwnProperty(parts[1])) {\n    return false\n  }\n  //letter-number 'aug-20'\n  let reg = /^([a-z\\u00C0-\\u00FF`\"'/]+)[-–—]([a-z0-9\\u00C0-\\u00FF].*)/i\n  if (reg.test(str) === true) {\n    return true\n  }\n  //number-letter '20-aug'\n  let reg2 = /^[('\"]?([0-9]{1,4})[-–—]([a-z\\u00C0-\\u00FF`\"'/-]+[)'\"]?$)/i\n  if (reg2.test(str) === true) {\n    return true\n  }\n  return false\n}\n\nconst splitHyphens = function (word) {\n  let arr = []\n  //support multiple-hyphenated-terms\n  const hyphens = word.split(/[-–—]/)\n  let whichDash = '-'\n  let found = word.match(/[-–—]/)\n  if (found && found[0]) {\n    whichDash = found\n  }\n  for (let o = 0; o < hyphens.length; o++) {\n    if (o === hyphens.length - 1) {\n      arr.push(hyphens[o])\n    } else {\n      arr.push(hyphens[o] + whichDash)\n    }\n  }\n  return arr\n}\n\nexport { splitHyphens, hasHyphen }\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,SAAAA,CAAUC,GAAG,EAAEC,KAAK,EAAE;EACtC,IAAIC,KAAK,GAAGF,GAAG,CAACG,KAAK,CAAC,OAAO,CAAC;EAC9B,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IACrB,OAAO,KAAK;EACd;EACA,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGL,KAAK,CAACM,GAAG;;EAExC;EACA,IAAIL,KAAK,CAAC,CAAC,CAAC,CAACE,MAAM,KAAK,CAAC,IAAI,QAAQ,CAACI,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;IACpD,OAAO,KAAK;EACd;EACA;EACA,IAAIG,QAAQ,CAACI,cAAc,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;IACrC,OAAO,KAAK;EACd;EACA;EACAA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAChD,IAAIL,QAAQ,CAACG,cAAc,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;IACrC,OAAO,KAAK;EACd;EACA;EACA,IAAIU,GAAG,GAAG,2DAA2D;EACrE,IAAIA,GAAG,CAACJ,IAAI,CAACR,GAAG,CAAC,KAAK,IAAI,EAAE;IAC1B,OAAO,IAAI;EACb;EACA;EACA,IAAIa,IAAI,GAAG,4DAA4D;EACvE,IAAIA,IAAI,CAACL,IAAI,CAACR,GAAG,CAAC,KAAK,IAAI,EAAE;IAC3B,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;AAED,MAAMc,YAAY,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACnC,IAAIC,GAAG,GAAG,EAAE;EACZ;EACA,MAAMC,OAAO,GAAGF,IAAI,CAACZ,KAAK,CAAC,OAAO,CAAC;EACnC,IAAIe,SAAS,GAAG,GAAG;EACnB,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAK,CAAC,OAAO,CAAC;EAC/B,IAAID,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;IACrBD,SAAS,GAAGC,KAAK;EACnB;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACb,MAAM,EAAEiB,CAAC,EAAE,EAAE;IACvC,IAAIA,CAAC,KAAKJ,OAAO,CAACb,MAAM,GAAG,CAAC,EAAE;MAC5BY,GAAG,CAACM,IAAI,CAACL,OAAO,CAACI,CAAC,CAAC,CAAC;IACtB,CAAC,MAAM;MACLL,GAAG,CAACM,IAAI,CAACL,OAAO,CAACI,CAAC,CAAC,GAAGH,SAAS,CAAC;IAClC;EACF;EACA,OAAOF,GAAG;AACZ,CAAC;AAED,SAASF,YAAY,EAAEf,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}