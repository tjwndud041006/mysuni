{"ast":null,"code":"import { textFromTerms } from './_text.js';\nimport fmts from './_fmts.js';\nimport hash from '../methods/hash.js';\nconst defaults = {\n  text: true,\n  terms: true\n};\nlet opts = {\n  case: 'none',\n  unicode: 'some',\n  form: 'machine',\n  punctuation: 'some'\n};\nconst merge = function (a, b) {\n  return Object.assign({}, a, b);\n};\nconst fns = {\n  text: terms => textFromTerms(terms, {\n    keepPunct: true\n  }, false),\n  normal: terms => textFromTerms(terms, merge(fmts.normal, {\n    keepPunct: true\n  }), false),\n  implicit: terms => textFromTerms(terms, merge(fmts.implicit, {\n    keepPunct: true\n  }), false),\n  machine: terms => textFromTerms(terms, opts, false),\n  root: terms => textFromTerms(terms, merge(opts, {\n    form: 'root'\n  }), false),\n  hash: terms => hash(textFromTerms(terms, {\n    keepPunct: true\n  }, false)),\n  offset: terms => {\n    let len = fns.text(terms).length;\n    return {\n      index: terms[0].offset.index,\n      start: terms[0].offset.start,\n      length: len\n    };\n  },\n  terms: terms => {\n    return terms.map(t => {\n      let term = Object.assign({}, t);\n      term.tags = Array.from(t.tags);\n      return term;\n    });\n  },\n  confidence: (_terms, view, i) => view.eq(i).confidence(),\n  syllables: (_terms, view, i) => view.eq(i).syllables(),\n  sentence: (_terms, view, i) => view.eq(i).fullSentence().text(),\n  dirty: terms => terms.some(t => t.dirty === true)\n};\nfns.sentences = fns.sentence;\nfns.clean = fns.normal;\nfns.reduced = fns.root;\nconst toJSON = function (view, option) {\n  option = option || {};\n  if (typeof option === 'string') {\n    option = {};\n  }\n  option = Object.assign({}, defaults, option);\n  // run any necessary upfront steps\n  if (option.offset) {\n    view.compute('offset');\n  }\n  return view.docs.map((terms, i) => {\n    let res = {};\n    Object.keys(option).forEach(k => {\n      if (option[k] && fns[k]) {\n        res[k] = fns[k](terms, view, i);\n      }\n    });\n    return res;\n  });\n};\nconst methods = {\n  /** return data */\n  json: function (n) {\n    let res = toJSON(this, n);\n    if (typeof n === 'number') {\n      return res[n];\n    }\n    return res;\n  }\n};\nmethods.data = methods.json;\nexport default methods;","map":{"version":3,"names":["textFromTerms","fmts","hash","defaults","text","terms","opts","case","unicode","form","punctuation","merge","a","b","Object","assign","fns","keepPunct","normal","implicit","machine","root","offset","len","length","index","start","map","t","term","tags","Array","from","confidence","_terms","view","i","eq","syllables","sentence","fullSentence","dirty","some","sentences","clean","reduced","toJSON","option","compute","docs","res","keys","forEach","k","methods","json","n","data"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/output/api/json.js"],"sourcesContent":["import { textFromTerms } from './_text.js'\nimport fmts from './_fmts.js'\nimport hash from '../methods/hash.js'\n\nconst defaults = {\n  text: true,\n  terms: true,\n}\n\nlet opts = { case: 'none', unicode: 'some', form: 'machine', punctuation: 'some' }\n\nconst merge = function (a, b) {\n  return Object.assign({}, a, b)\n}\n\nconst fns = {\n  text: terms => textFromTerms(terms, { keepPunct: true }, false),\n  normal: terms => textFromTerms(terms, merge(fmts.normal, { keepPunct: true }), false),\n  implicit: terms => textFromTerms(terms, merge(fmts.implicit, { keepPunct: true }), false),\n\n  machine: terms => textFromTerms(terms, opts, false),\n  root: terms => textFromTerms(terms, merge(opts, { form: 'root' }), false),\n\n  hash: terms => hash(textFromTerms(terms, { keepPunct: true }, false)),\n\n  offset: terms => {\n    let len = fns.text(terms).length\n    return {\n      index: terms[0].offset.index,\n      start: terms[0].offset.start,\n      length: len,\n    }\n  },\n  terms: terms => {\n    return terms.map(t => {\n      let term = Object.assign({}, t)\n      term.tags = Array.from(t.tags)\n      return term\n    })\n  },\n  confidence: (_terms, view, i) => view.eq(i).confidence(),\n  syllables: (_terms, view, i) => view.eq(i).syllables(),\n  sentence: (_terms, view, i) => view.eq(i).fullSentence().text(),\n  dirty: terms => terms.some(t => t.dirty === true),\n}\nfns.sentences = fns.sentence\nfns.clean = fns.normal\nfns.reduced = fns.root\n\nconst toJSON = function (view, option) {\n  option = option || {}\n  if (typeof option === 'string') {\n    option = {}\n  }\n  option = Object.assign({}, defaults, option)\n  // run any necessary upfront steps\n  if (option.offset) {\n    view.compute('offset')\n  }\n  return view.docs.map((terms, i) => {\n    let res = {}\n    Object.keys(option).forEach(k => {\n      if (option[k] && fns[k]) {\n        res[k] = fns[k](terms, view, i)\n      }\n    })\n    return res\n  })\n}\n\nconst methods = {\n  /** return data */\n  json: function (n) {\n    let res = toJSON(this, n)\n    if (typeof n === 'number') {\n      return res[n]\n    }\n    return res\n  },\n}\nmethods.data = methods.json\nexport default methods\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}