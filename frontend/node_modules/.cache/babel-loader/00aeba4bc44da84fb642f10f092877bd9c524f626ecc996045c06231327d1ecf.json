{"ast":null,"code":"import encoding from '../encoding.js';\nconst symbols = function (t) {\n  //... process these lines\n  const reSymbol = new RegExp('([0-9A-Z]+):([0-9A-Z]+)');\n  for (let i = 0; i < t.nodes.length; i++) {\n    const m = reSymbol.exec(t.nodes[i]);\n    if (!m) {\n      t.symCount = i;\n      break;\n    }\n    t.syms[encoding.fromAlphaCode(m[1])] = encoding.fromAlphaCode(m[2]);\n  }\n  //remove from main node list\n  t.nodes = t.nodes.slice(t.symCount, t.nodes.length);\n};\nexport default symbols;","map":{"version":3,"names":["encoding","symbols","t","reSymbol","RegExp","i","nodes","length","m","exec","symCount","syms","fromAlphaCode","slice"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/efrt/src/unpack/symbols.js"],"sourcesContent":["import encoding from '../encoding.js'\n\nconst symbols = function (t) {\n  //... process these lines\n  const reSymbol = new RegExp('([0-9A-Z]+):([0-9A-Z]+)')\n  for (let i = 0; i < t.nodes.length; i++) {\n    const m = reSymbol.exec(t.nodes[i])\n    if (!m) {\n      t.symCount = i\n      break\n    }\n    t.syms[encoding.fromAlphaCode(m[1])] = encoding.fromAlphaCode(m[2])\n  }\n  //remove from main node list\n  t.nodes = t.nodes.slice(t.symCount, t.nodes.length)\n}\nexport default symbols\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gBAAgB;AAErC,MAAMC,OAAO,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAC3B;EACA,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CAAC,yBAAyB,CAAC;EACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACI,KAAK,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IACvC,MAAMG,CAAC,GAAGL,QAAQ,CAACM,IAAI,CAACP,CAAC,CAACI,KAAK,CAACD,CAAC,CAAC,CAAC;IACnC,IAAI,CAACG,CAAC,EAAE;MACNN,CAAC,CAACQ,QAAQ,GAAGL,CAAC;MACd;IACF;IACAH,CAAC,CAACS,IAAI,CAACX,QAAQ,CAACY,aAAa,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGR,QAAQ,CAACY,aAAa,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrE;EACA;EACAN,CAAC,CAACI,KAAK,GAAGJ,CAAC,CAACI,KAAK,CAACO,KAAK,CAACX,CAAC,CAACQ,QAAQ,EAAER,CAAC,CAACI,KAAK,CAACC,MAAM,CAAC;AACrD,CAAC;AACD,eAAeN,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}