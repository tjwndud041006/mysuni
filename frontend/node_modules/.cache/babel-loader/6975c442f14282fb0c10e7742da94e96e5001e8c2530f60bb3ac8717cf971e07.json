{"ast":null,"code":"import maybeMatch from './maybeMatch.js';\n\n// tokenize first, then only tag sentences required\nconst lazyParse = function (input, reg) {\n  let net = reg;\n  if (typeof reg === 'string') {\n    net = this.buildNet([{\n      match: reg\n    }]);\n  }\n  let doc = this.tokenize(input);\n  let m = maybeMatch(doc, net);\n  if (m.found) {\n    m.compute(['index', 'tagger']);\n    return m.match(reg);\n  }\n  return doc.none();\n};\nexport default lazyParse;","map":{"version":3,"names":["maybeMatch","lazyParse","input","reg","net","buildNet","match","doc","tokenize","m","found","compute","none"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/lazy/lazyParse.js"],"sourcesContent":["import maybeMatch from './maybeMatch.js'\n\n// tokenize first, then only tag sentences required\nconst lazyParse = function (input, reg) {\n  let net = reg\n  if (typeof reg === 'string') {\n    net = this.buildNet([{ match: reg }])\n  }\n  let doc = this.tokenize(input)\n  let m = maybeMatch(doc, net)\n  if (m.found) {\n    m.compute(['index', 'tagger'])\n    return m.match(reg)\n  }\n  return doc.none()\n}\nexport default lazyParse"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;;AAExC;AACA,MAAMC,SAAS,GAAG,SAAAA,CAAUC,KAAK,EAAEC,GAAG,EAAE;EACtC,IAAIC,GAAG,GAAGD,GAAG;EACb,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3BC,GAAG,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;MAAEC,KAAK,EAAEH;IAAI,CAAC,CAAC,CAAC;EACvC;EACA,IAAII,GAAG,GAAG,IAAI,CAACC,QAAQ,CAACN,KAAK,CAAC;EAC9B,IAAIO,CAAC,GAAGT,UAAU,CAACO,GAAG,EAAEH,GAAG,CAAC;EAC5B,IAAIK,CAAC,CAACC,KAAK,EAAE;IACXD,CAAC,CAACE,OAAO,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC9B,OAAOF,CAAC,CAACH,KAAK,CAACH,GAAG,CAAC;EACrB;EACA,OAAOI,GAAG,CAACK,IAAI,CAAC,CAAC;AACnB,CAAC;AACD,eAAeX,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}