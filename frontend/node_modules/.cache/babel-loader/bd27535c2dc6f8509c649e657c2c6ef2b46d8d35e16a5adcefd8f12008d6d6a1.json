{"ast":null,"code":"// Copyright (c) 2011, Chris Umbel, James Coglan\n// This file is required in order for any other classes to work. Some Vector methods work with the\n// other Sylvester classes and are useless unless they are included. Other classes such as Line and\n// Plane will not function at all without Vector being loaded first.\n\nvar Sylvester = require('./sylvester'),\n  Matrix = require('./matrix');\nfunction Vector() {}\nVector.prototype = {\n  norm: function () {\n    var n = this.elements.length;\n    var sum = 0;\n    while (n--) {\n      sum += Math.pow(this.elements[n], 2);\n    }\n    return Math.sqrt(sum);\n  },\n  // Returns element i of the vector\n  e: function (i) {\n    return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n  },\n  // Returns the number of rows/columns the vector has\n  dimensions: function () {\n    return {\n      rows: 1,\n      cols: this.elements.length\n    };\n  },\n  // Returns the number of rows in the vector\n  rows: function () {\n    return 1;\n  },\n  // Returns the number of columns in the vector\n  cols: function () {\n    return this.elements.length;\n  },\n  // Returns the modulus ('length') of the vector\n  modulus: function () {\n    return Math.sqrt(this.dot(this));\n  },\n  // Returns true iff the vector is equal to the argument\n  eql: function (vector) {\n    var n = this.elements.length;\n    var V = vector.elements || vector;\n    if (n != V.length) {\n      return false;\n    }\n    while (n--) {\n      if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) {\n        return false;\n      }\n    }\n    return true;\n  },\n  // Returns a copy of the vector\n  dup: function () {\n    return Vector.create(this.elements);\n  },\n  // Maps the vector to another vector according to the given function\n  map: function (fn) {\n    var elements = [];\n    this.each(function (x, i) {\n      elements.push(fn(x, i));\n    });\n    return Vector.create(elements);\n  },\n  // Calls the iterator for each element of the vector in turn\n  each: function (fn) {\n    var n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      fn(this.elements[i], i + 1);\n    }\n  },\n  // Returns a new vector created by normalizing the receiver\n  toUnitVector: function () {\n    var r = this.modulus();\n    if (r === 0) {\n      return this.dup();\n    }\n    return this.map(function (x) {\n      return x / r;\n    });\n  },\n  // Returns the angle between the vector and the argument (also a vector)\n  angleFrom: function (vector) {\n    var V = vector.elements || vector;\n    var n = this.elements.length,\n      k = n,\n      i;\n    if (n != V.length) {\n      return null;\n    }\n    var dot = 0,\n      mod1 = 0,\n      mod2 = 0;\n    // Work things out in parallel to save time\n    this.each(function (x, i) {\n      dot += x * V[i - 1];\n      mod1 += x * x;\n      mod2 += V[i - 1] * V[i - 1];\n    });\n    mod1 = Math.sqrt(mod1);\n    mod2 = Math.sqrt(mod2);\n    if (mod1 * mod2 === 0) {\n      return null;\n    }\n    var theta = dot / (mod1 * mod2);\n    if (theta < -1) {\n      theta = -1;\n    }\n    if (theta > 1) {\n      theta = 1;\n    }\n    return Math.acos(theta);\n  },\n  // Returns true iff the vector is parallel to the argument\n  isParallelTo: function (vector) {\n    var angle = this.angleFrom(vector);\n    return angle === null ? null : angle <= Sylvester.precision;\n  },\n  // Returns true iff the vector is antiparallel to the argument\n  isAntiparallelTo: function (vector) {\n    var angle = this.angleFrom(vector);\n    return angle === null ? null : Math.abs(angle - Math.PI) <= Sylvester.precision;\n  },\n  // Returns true iff the vector is perpendicular to the argument\n  isPerpendicularTo: function (vector) {\n    var dot = this.dot(vector);\n    return dot === null ? null : Math.abs(dot) <= Sylvester.precision;\n  },\n  // Returns the result of adding the argument to the vector\n  add: function (value) {\n    var V = value.elements || value;\n    if (this.elements.length != V.length) return this.map(function (v) {\n      return v + value;\n    });else return this.map(function (x, i) {\n      return x + V[i - 1];\n    });\n  },\n  // Returns the result of subtracting the argument from the vector\n  subtract: function (v) {\n    if (typeof v == 'number') return this.map(function (k) {\n      return k - v;\n    });\n    var V = v.elements || v;\n    if (this.elements.length != V.length) {\n      return null;\n    }\n    return this.map(function (x, i) {\n      return x - V[i - 1];\n    });\n  },\n  // Returns the result of multiplying the elements of the vector by the argument\n  multiply: function (k) {\n    return this.map(function (x) {\n      return x * k;\n    });\n  },\n  elementMultiply: function (v) {\n    return this.map(function (k, i) {\n      return v.e(i) * k;\n    });\n  },\n  sum: function () {\n    var sum = 0;\n    this.map(function (x) {\n      sum += x;\n    });\n    return sum;\n  },\n  chomp: function (n) {\n    var elements = [];\n    for (var i = n; i < this.elements.length; i++) {\n      elements.push(this.elements[i]);\n    }\n    return Vector.create(elements);\n  },\n  top: function (n) {\n    var elements = [];\n    for (var i = 0; i < n; i++) {\n      elements.push(this.elements[i]);\n    }\n    return Vector.create(elements);\n  },\n  augment: function (elements) {\n    var newElements = this.elements;\n    for (var i = 0; i < elements.length; i++) {\n      newElements.push(elements[i]);\n    }\n    return Vector.create(newElements);\n  },\n  x: function (k) {\n    return this.multiply(k);\n  },\n  log: function () {\n    return Vector.log(this);\n  },\n  elementDivide: function (vector) {\n    return this.map(function (v, i) {\n      return v / vector.e(i);\n    });\n  },\n  product: function () {\n    var p = 1;\n    this.map(function (v) {\n      p *= v;\n    });\n    return p;\n  },\n  // Returns the scalar product of the vector with the argument\n  // Both vectors must have equal dimensionality\n  dot: function (vector) {\n    var V = vector.elements || vector;\n    var i,\n      product = 0,\n      n = this.elements.length;\n    if (n != V.length) {\n      return null;\n    }\n    while (n--) {\n      product += this.elements[n] * V[n];\n    }\n    return product;\n  },\n  // Returns the vector product of the vector with the argument\n  // Both vectors must have dimensionality 3\n  cross: function (vector) {\n    var B = vector.elements || vector;\n    if (this.elements.length != 3 || B.length != 3) {\n      return null;\n    }\n    var A = this.elements;\n    return Vector.create([A[1] * B[2] - A[2] * B[1], A[2] * B[0] - A[0] * B[2], A[0] * B[1] - A[1] * B[0]]);\n  },\n  // Returns the (absolute) largest element of the vector\n  max: function () {\n    var m = 0,\n      i = this.elements.length;\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) {\n        m = this.elements[i];\n      }\n    }\n    return m;\n  },\n  maxIndex: function () {\n    var m = 0,\n      i = this.elements.length;\n    var maxIndex = -1;\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) {\n        m = this.elements[i];\n        maxIndex = i + 1;\n      }\n    }\n    return maxIndex;\n  },\n  // Returns the index of the first match found\n  indexOf: function (x) {\n    var index = null,\n      n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      if (index === null && this.elements[i] == x) {\n        index = i + 1;\n      }\n    }\n    return index;\n  },\n  // Returns a diagonal matrix with the vector's elements as its diagonal elements\n  toDiagonalMatrix: function () {\n    return Matrix.Diagonal(this.elements);\n  },\n  // Returns the result of rounding the elements of the vector\n  round: function () {\n    return this.map(function (x) {\n      return Math.round(x);\n    });\n  },\n  // Transpose a Vector, return a 1xn Matrix\n  transpose: function () {\n    var rows = this.elements.length;\n    var elements = [];\n    for (var i = 0; i < rows; i++) {\n      elements.push([this.elements[i]]);\n    }\n    return Matrix.create(elements);\n  },\n  // Returns a copy of the vector with elements set to the given value if they\n  // differ from it by less than Sylvester.precision\n  snapTo: function (x) {\n    return this.map(function (y) {\n      return Math.abs(y - x) <= Sylvester.precision ? x : y;\n    });\n  },\n  // Returns the vector's distance from the argument, when considered as a point in space\n  distanceFrom: function (obj) {\n    if (obj.anchor || obj.start && obj.end) {\n      return obj.distanceFrom(this);\n    }\n    var V = obj.elements || obj;\n    if (V.length != this.elements.length) {\n      return null;\n    }\n    var sum = 0,\n      part;\n    this.each(function (x, i) {\n      part = x - V[i - 1];\n      sum += part * part;\n    });\n    return Math.sqrt(sum);\n  },\n  // Returns true if the vector is point on the given line\n  liesOn: function (line) {\n    return line.contains(this);\n  },\n  // Return true iff the vector is a point in the given plane\n  liesIn: function (plane) {\n    return plane.contains(this);\n  },\n  // Rotates the vector about the given object. The object should be a\n  // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!\n  rotate: function (t, obj) {\n    var V,\n      R = null,\n      x,\n      y,\n      z;\n    if (t.determinant) {\n      R = t.elements;\n    }\n    switch (this.elements.length) {\n      case 2:\n        V = obj.elements || obj;\n        if (V.length != 2) {\n          return null;\n        }\n        if (!R) {\n          R = Matrix.Rotation(t).elements;\n        }\n        x = this.elements[0] - V[0];\n        y = this.elements[1] - V[1];\n        return Vector.create([V[0] + R[0][0] * x + R[0][1] * y, V[1] + R[1][0] * x + R[1][1] * y]);\n        break;\n      case 3:\n        if (!obj.direction) {\n          return null;\n        }\n        var C = obj.pointClosestTo(this).elements;\n        if (!R) {\n          R = Matrix.Rotation(t, obj.direction).elements;\n        }\n        x = this.elements[0] - C[0];\n        y = this.elements[1] - C[1];\n        z = this.elements[2] - C[2];\n        return Vector.create([C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z, C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z, C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z]);\n        break;\n      default:\n        return null;\n    }\n  },\n  // Returns the result of reflecting the point in the given point, line or plane\n  reflectionIn: function (obj) {\n    if (obj.anchor) {\n      // obj is a plane or line\n      var P = this.elements.slice();\n      var C = obj.pointClosestTo(P).elements;\n      return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\n    } else {\n      // obj is a point\n      var Q = obj.elements || obj;\n      if (this.elements.length != Q.length) {\n        return null;\n      }\n      return this.map(function (x, i) {\n        return Q[i - 1] + (Q[i - 1] - x);\n      });\n    }\n  },\n  // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added\n  to3D: function () {\n    var V = this.dup();\n    switch (V.elements.length) {\n      case 3:\n        break;\n      case 2:\n        V.elements.push(0);\n        break;\n      default:\n        return null;\n    }\n    return V;\n  },\n  // Returns a string representation of the vector\n  inspect: function () {\n    return '[' + this.elements.join(', ') + ']';\n  },\n  // Set vector's elements from an array\n  setElements: function (els) {\n    this.elements = (els.elements || els).slice();\n    return this;\n  }\n};\n\n// Constructor function\nVector.create = function (elements) {\n  var V = new Vector();\n  return V.setElements(elements);\n};\n\n// i, j, k unit vectors\nVector.i = Vector.create([1, 0, 0]);\nVector.j = Vector.create([0, 1, 0]);\nVector.k = Vector.create([0, 0, 1]);\n\n// Random vector of size n\nVector.Random = function (n) {\n  var elements = [];\n  while (n--) {\n    elements.push(Math.random());\n  }\n  return Vector.create(elements);\n};\nVector.Fill = function (n, v) {\n  var elements = [];\n  while (n--) {\n    elements.push(v);\n  }\n  return Vector.create(elements);\n};\n\n// Vector filled with zeros\nVector.Zero = function (n) {\n  return Vector.Fill(n, 0);\n};\nVector.One = function (n) {\n  return Vector.Fill(n, 1);\n};\nVector.log = function (v) {\n  return v.map(function (x) {\n    return Math.log(x);\n  });\n};\nmodule.exports = Vector;","map":{"version":3,"names":["Sylvester","require","Matrix","Vector","prototype","norm","n","elements","length","sum","Math","pow","sqrt","e","i","dimensions","rows","cols","modulus","dot","eql","vector","V","abs","precision","dup","create","map","fn","each","x","push","toUnitVector","r","angleFrom","k","mod1","mod2","theta","acos","isParallelTo","angle","isAntiparallelTo","PI","isPerpendicularTo","add","value","v","subtract","multiply","elementMultiply","chomp","top","augment","newElements","log","elementDivide","product","p","cross","B","A","max","m","maxIndex","indexOf","index","toDiagonalMatrix","Diagonal","round","transpose","snapTo","y","distanceFrom","obj","anchor","start","end","part","liesOn","line","contains","liesIn","plane","rotate","t","R","z","determinant","Rotation","direction","C","pointClosestTo","reflectionIn","P","slice","Q","to3D","inspect","join","setElements","els","j","Random","random","Fill","Zero","One","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/sylvester/lib/node-sylvester/vector.js"],"sourcesContent":["// Copyright (c) 2011, Chris Umbel, James Coglan\n// This file is required in order for any other classes to work. Some Vector methods work with the\n// other Sylvester classes and are useless unless they are included. Other classes such as Line and\n// Plane will not function at all without Vector being loaded first.\n\nvar Sylvester = require('./sylvester'),\nMatrix = require('./matrix');\n\nfunction Vector() {}\nVector.prototype = {\n\n    norm: function() {\n\tvar n = this.elements.length;\n\tvar sum = 0;\n\n\twhile (n--) {\n\t    sum += Math.pow(this.elements[n], 2);\n\t}\n\n\treturn Math.sqrt(sum);\n    },\n\n    // Returns element i of the vector\n    e: function(i) {\n      return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\n    },\n\n    // Returns the number of rows/columns the vector has\n    dimensions: function() {\n      return {rows: 1, cols: this.elements.length};\n    },\n\n    // Returns the number of rows in the vector\n    rows: function() {\n      return 1;\n    },\n\n    // Returns the number of columns in the vector\n    cols: function() {\n      return this.elements.length;\n    },\n\n    // Returns the modulus ('length') of the vector\n    modulus: function() {\n      return Math.sqrt(this.dot(this));\n    },\n\n    // Returns true iff the vector is equal to the argument\n    eql: function(vector) {\n    \tvar n = this.elements.length;\n    \tvar V = vector.elements || vector;\n    \tif (n != V.length) { return false; }\n    \twhile (n--) {\n    \t    if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }\n    \t}\n    \treturn true;\n    },\n\n    // Returns a copy of the vector\n    dup: function() {\n\t    return Vector.create(this.elements);\n    },\n\n    // Maps the vector to another vector according to the given function\n    map: function(fn) {\n\tvar elements = [];\n\tthis.each(function(x, i) {\n\t    elements.push(fn(x, i));\n\t});\n\treturn Vector.create(elements);\n    },\n\n    // Calls the iterator for each element of the vector in turn\n    each: function(fn) {\n\tvar n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    fn(this.elements[i], i + 1);\n\t}\n    },\n\n    // Returns a new vector created by normalizing the receiver\n    toUnitVector: function() {\n\tvar r = this.modulus();\n\tif (r === 0) { return this.dup(); }\n\treturn this.map(function(x) { return x / r; });\n    },\n\n    // Returns the angle between the vector and the argument (also a vector)\n    angleFrom: function(vector) {\n\tvar V = vector.elements || vector;\n\tvar n = this.elements.length, k = n, i;\n\tif (n != V.length) { return null; }\n\tvar dot = 0, mod1 = 0, mod2 = 0;\n\t// Work things out in parallel to save time\n\tthis.each(function(x, i) {\n\t    dot += x * V[i - 1];\n\t    mod1 += x * x;\n\t    mod2 += V[i - 1] * V[i - 1];\n\t});\n\tmod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);\n\tif (mod1 * mod2 === 0) { return null; }\n\tvar theta = dot / (mod1 * mod2);\n\tif (theta < -1) { theta = -1; }\n\tif (theta > 1) { theta = 1; }\n\treturn Math.acos(theta);\n    },\n\n    // Returns true iff the vector is parallel to the argument\n    isParallelTo: function(vector) {\n\tvar angle = this.angleFrom(vector);\n\treturn (angle === null) ? null : (angle <= Sylvester.precision);\n    },\n\n    // Returns true iff the vector is antiparallel to the argument\n    isAntiparallelTo: function(vector) {\n\tvar angle = this.angleFrom(vector);\n\treturn (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);\n    },\n\n    // Returns true iff the vector is perpendicular to the argument\n    isPerpendicularTo: function(vector) {\n\tvar dot = this.dot(vector);\n\treturn (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);\n    },\n\n    // Returns the result of adding the argument to the vector\n    add: function(value) {\n\tvar V = value.elements || value;\n\n\tif (this.elements.length != V.length) \n\t    return this.map(function(v) { return v + value });\n\telse\n\t    return this.map(function(x, i) { return x + V[i - 1]; });\n    },\n\n    // Returns the result of subtracting the argument from the vector\n    subtract: function(v) {\n\tif (typeof(v) == 'number')\n\t    return this.map(function(k) { return k - v; });\n\n\tvar V = v.elements || v;\n\tif (this.elements.length != V.length) { return null; }\n\treturn this.map(function(x, i) { return x - V[i - 1]; });\n    },\n\n    // Returns the result of multiplying the elements of the vector by the argument\n    multiply: function(k) {\n\treturn this.map(function(x) { return x * k; });\n    },\n\n    elementMultiply: function(v) {\n\treturn this.map(function(k, i) {\n\t    return v.e(i) * k;\n\t});\n    },\n\n    sum: function() {\n\tvar sum = 0;\n\tthis.map(function(x) { sum += x;});\n\treturn sum;\n    },\n\n    chomp: function(n) {\n\tvar elements = [];\n\n\tfor (var i = n; i < this.elements.length; i++) {\n\t    elements.push(this.elements[i]);\n\t}\n\n\treturn Vector.create(elements);\n    },\n\n    top: function(n) {\n\tvar elements = [];\n\n\tfor (var i = 0; i < n; i++) {\n\t    elements.push(this.elements[i]);\n\t}\n\n\treturn Vector.create(elements);\n    },\n\n    augment: function(elements) {\n\tvar newElements = this.elements;\n\n\tfor (var i = 0; i < elements.length; i++) {\n\t    newElements.push(elements[i]);\n\t}\n\n\treturn Vector.create(newElements);\n    },\n\n    x: function(k) { return this.multiply(k); },\n\n    log: function() {\n\treturn Vector.log(this);\n    },\n\n    elementDivide: function(vector) {\n\treturn this.map(function(v, i) {\n\t    return v / vector.e(i);\n\t});\n    },\n\n    product: function() {\n\tvar p = 1;\n\n\tthis.map(function(v) {\n\t    p *= v;\n\t});\n\n\treturn p;\n    },\n\n    // Returns the scalar product of the vector with the argument\n    // Both vectors must have equal dimensionality\n    dot: function(vector) {\n\tvar V = vector.elements || vector;\n\tvar i, product = 0, n = this.elements.length;\t\n\tif (n != V.length) { return null; }\n\twhile (n--) { product += this.elements[n] * V[n]; }\n\treturn product;\n    },\n\n    // Returns the vector product of the vector with the argument\n    // Both vectors must have dimensionality 3\n    cross: function(vector) {\n\tvar B = vector.elements || vector;\n\tif (this.elements.length != 3 || B.length != 3) { return null; }\n\tvar A = this.elements;\n\treturn Vector.create([\n\t    (A[1] * B[2]) - (A[2] * B[1]),\n\t    (A[2] * B[0]) - (A[0] * B[2]),\n\t    (A[0] * B[1]) - (A[1] * B[0])\n\t]);\n    },\n\n    // Returns the (absolute) largest element of the vector\n    max: function() {\n\tvar m = 0, i = this.elements.length;\n\twhile (i--) {\n\t    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }\n\t}\n\treturn m;\n    },\n\n\n    maxIndex: function() {\n\tvar m = 0, i = this.elements.length;\n\tvar maxIndex = -1;\n\n\twhile (i--) {\n\t    if (Math.abs(this.elements[i]) > Math.abs(m)) { \n\t\tm = this.elements[i]; \n\t\tmaxIndex = i + 1;\n\t    }\n\t}\n\n\treturn maxIndex;\n    },\n\n\n    // Returns the index of the first match found\n    indexOf: function(x) {\n\tvar index = null, n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    if (index === null && this.elements[i] == x) {\n\t\tindex = i + 1;\n\t    }\n\t}\n\treturn index;\n    },\n\n    // Returns a diagonal matrix with the vector's elements as its diagonal elements\n    toDiagonalMatrix: function() {\n\treturn Matrix.Diagonal(this.elements);\n    },\n\n    // Returns the result of rounding the elements of the vector\n    round: function() {\n\treturn this.map(function(x) { return Math.round(x); });\n    },\n\n    // Transpose a Vector, return a 1xn Matrix\n    transpose: function() {\n\tvar rows = this.elements.length;\n\tvar elements = [];\n\n\tfor (var i = 0; i < rows; i++) {\n\t    elements.push([this.elements[i]]);\n\t}\n\treturn Matrix.create(elements);\n    },\n\n    // Returns a copy of the vector with elements set to the given value if they\n    // differ from it by less than Sylvester.precision\n    snapTo: function(x) {\n\treturn this.map(function(y) {\n\t    return (Math.abs(y - x) <= Sylvester.precision) ? x : y;\n\t});\n    },\n\n    // Returns the vector's distance from the argument, when considered as a point in space\n    distanceFrom: function(obj) {\n\tif (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }\n\tvar V = obj.elements || obj;\n\tif (V.length != this.elements.length) { return null; }\n\tvar sum = 0, part;\n\tthis.each(function(x, i) {\n\t    part = x - V[i - 1];\n\t    sum += part * part;\n\t});\n\treturn Math.sqrt(sum);\n    },\n\n    // Returns true if the vector is point on the given line\n    liesOn: function(line) {\n\treturn line.contains(this);\n    },\n\n    // Return true iff the vector is a point in the given plane\n    liesIn: function(plane) {\n\treturn plane.contains(this);\n    },\n\n    // Rotates the vector about the given object. The object should be a\n    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!\n    rotate: function(t, obj) {\n\tvar V, R = null, x, y, z;\n\tif (t.determinant) { R = t.elements; }\n\tswitch (this.elements.length) {\n\tcase 2:\n            V = obj.elements || obj;\n            if (V.length != 2) { return null; }\n            if (!R) { R = Matrix.Rotation(t).elements; }\n            x = this.elements[0] - V[0];\n            y = this.elements[1] - V[1];\n            return Vector.create([\n\t\tV[0] + R[0][0] * x + R[0][1] * y,\n\t\tV[1] + R[1][0] * x + R[1][1] * y\n            ]);\n            break;\n\tcase 3:\n            if (!obj.direction) { return null; }\n            var C = obj.pointClosestTo(this).elements;\n            if (!R) { R = Matrix.Rotation(t, obj.direction).elements; }\n            x = this.elements[0] - C[0];\n            y = this.elements[1] - C[1];\n            z = this.elements[2] - C[2];\n            return Vector.create([\n\t\tC[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n\t\tC[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n\t\tC[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z\n            ]);\n            break;\n\tdefault:\n            return null;\n\t}\n    },\n\n    // Returns the result of reflecting the point in the given point, line or plane\n    reflectionIn: function(obj) {\n\tif (obj.anchor) {\n\t    // obj is a plane or line\n\t    var P = this.elements.slice();\n\t    var C = obj.pointClosestTo(P).elements;\n\t    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\n\t} else {\n\t    // obj is a point\n\t    var Q = obj.elements || obj;\n\t    if (this.elements.length != Q.length) { return null; }\n\t    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });\n\t}\n    },\n\n    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added\n    to3D: function() {\n\tvar V = this.dup();\n\tswitch (V.elements.length) {\n\tcase 3: break;\n\tcase 2: V.elements.push(0); break;\n\tdefault: return null;\n\t}\n\treturn V;\n    },\n\n    // Returns a string representation of the vector\n    inspect: function() {\n\treturn '[' + this.elements.join(', ') + ']';\n    },\n\n    // Set vector's elements from an array\n    setElements: function(els) {\n\tthis.elements = (els.elements || els).slice();\n\treturn this;\n    }\n};\n\n// Constructor function\nVector.create = function(elements) {\n    var V = new Vector();\n    return V.setElements(elements);\n};\n\n// i, j, k unit vectors\nVector.i = Vector.create([1, 0, 0]);\nVector.j = Vector.create([0, 1, 0]);\nVector.k = Vector.create([0, 0, 1]);\n\n// Random vector of size n\nVector.Random = function(n) {\n    var elements = [];\n    while (n--) { elements.push(Math.random()); }\n    return Vector.create(elements);\n};\n\nVector.Fill = function(n, v) {\n    var elements = [];\n    while (n--) { elements.push(v); }\n    return Vector.create(elements);\n};\n\n// Vector filled with zeros\nVector.Zero = function(n) {\n    return Vector.Fill(n, 0);\n};\n\nVector.One = function(n) {\n    return Vector.Fill(n, 1);\n};\n\nVector.log = function(v) {\n    return v.map(function(x) {\n\treturn Math.log(x);\n    });\n};\n\nmodule.exports = Vector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}