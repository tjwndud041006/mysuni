{"ast":null,"code":"import methods from './methods.js';\n/*\n A JavaScript implementation of a Trie search datastructure.\nEach node of the Trie is an Object that can contain the following properties:\n      '' - If present (with value == 1), the node is a Terminal Node - the prefix\n          leading to this node is a word in the dictionary.\n      numeric properties (value == 1) - the property name is a terminal string\n          so that the prefix + string is a word in the dictionary.\n      Object properties - the property name is one or more characters to be consumed\n          from the prefix of the test string, with the remainder to be checked in\n          the child node.\n      '_c': A unique name for the node (starting from 1), used in combining Suffixes.\n      '_n': Created when packing the Trie, the sequential node number\n          (in pre-order traversal).\n      '_d': The number of times a node is shared (it's in-degree from other nodes).\n      '_v': Visited in DFS.\n      '_g': For singleton nodes, the name of it's single property.\n */\nconst Trie = function (words) {\n  this.root = {};\n  this.lastWord = '';\n  this.suffixes = {};\n  this.suffixCounts = {};\n  this.cNext = 1;\n  this.wordCount = 0;\n  this.insertWords(words);\n  this.vCur = 0;\n};\nObject.keys(methods).forEach(function (k) {\n  Trie.prototype[k] = methods[k];\n});\nexport default Trie;","map":{"version":3,"names":["methods","Trie","words","root","lastWord","suffixes","suffixCounts","cNext","wordCount","insertWords","vCur","Object","keys","forEach","k","prototype"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/efrt/src/pack/trie.js"],"sourcesContent":["import methods from './methods.js'\n/*\n A JavaScript implementation of a Trie search datastructure.\nEach node of the Trie is an Object that can contain the following properties:\n      '' - If present (with value == 1), the node is a Terminal Node - the prefix\n          leading to this node is a word in the dictionary.\n      numeric properties (value == 1) - the property name is a terminal string\n          so that the prefix + string is a word in the dictionary.\n      Object properties - the property name is one or more characters to be consumed\n          from the prefix of the test string, with the remainder to be checked in\n          the child node.\n      '_c': A unique name for the node (starting from 1), used in combining Suffixes.\n      '_n': Created when packing the Trie, the sequential node number\n          (in pre-order traversal).\n      '_d': The number of times a node is shared (it's in-degree from other nodes).\n      '_v': Visited in DFS.\n      '_g': For singleton nodes, the name of it's single property.\n */\nconst Trie = function (words) {\n  this.root = {}\n  this.lastWord = ''\n  this.suffixes = {}\n  this.suffixCounts = {}\n  this.cNext = 1\n  this.wordCount = 0\n  this.insertWords(words)\n  this.vCur = 0\n}\n\nObject.keys(methods).forEach(function (k) {\n  Trie.prototype[k] = methods[k]\n})\n\nexport default Trie\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC5B,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;EACd,IAAI,CAACC,QAAQ,GAAG,EAAE;EAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAClB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;EACtB,IAAI,CAACC,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,SAAS,GAAG,CAAC;EAClB,IAAI,CAACC,WAAW,CAACP,KAAK,CAAC;EACvB,IAAI,CAACQ,IAAI,GAAG,CAAC;AACf,CAAC;AAEDC,MAAM,CAACC,IAAI,CAACZ,OAAO,CAAC,CAACa,OAAO,CAAC,UAAUC,CAAC,EAAE;EACxCb,IAAI,CAACc,SAAS,CAACD,CAAC,CAAC,GAAGd,OAAO,CAACc,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,eAAeb,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}