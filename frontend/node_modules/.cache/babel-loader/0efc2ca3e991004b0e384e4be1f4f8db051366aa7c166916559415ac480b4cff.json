{"ast":null,"code":"const present = {\n  tense: 'PresentTense'\n};\nconst conditional = {\n  conditional: true\n};\nconst future = {\n  tense: 'FutureTense'\n};\nconst prog = {\n  progressive: true\n};\nconst past = {\n  tense: 'PastTense'\n};\nconst complete = {\n  complete: true,\n  progressive: false\n};\nconst passive = {\n  passive: true\n};\nconst plural = {\n  plural: true\n};\nconst singular = {\n  plural: false\n};\nconst getData = function (tags) {\n  let data = {};\n  tags.forEach(o => {\n    Object.assign(data, o);\n  });\n  return data;\n};\nconst verbForms = {\n  // === Simple ===\n  'imperative': [\n  // walk!\n  ['#Imperative', []]],\n  'want-infinitive': [['^(want|wants|wanted) to #Infinitive$', [present]], ['^wanted to #Infinitive$', [past]], ['^will want to #Infinitive$', [future]]],\n  'gerund-phrase': [\n  // started looking\n  ['^#PastTense #Gerund$', [past]],\n  // starts looking\n  ['^#PresentTense #Gerund$', [present]],\n  // start looking\n  ['^#Infinitive #Gerund$', [present]],\n  // will start looking\n  ['^will #Infinitive #Gerund$', [future]],\n  // have started looking\n  ['^have #PastTense #Gerund$', [past]],\n  // will have started looking\n  ['^will have #PastTense #Gerund$', [past]]],\n  'simple-present': [\n  // he walks',\n  ['^#PresentTense$', [present]],\n  // we walk\n  ['^#Infinitive$', [present]]],\n  'simple-past': [\n  // he walked',\n  ['^#PastTense$', [past]]],\n  'simple-future': [\n  // he will walk\n  ['^will #Adverb? #Infinitive', [future]]],\n  // === Progressive ===\n  'present-progressive': [\n  // he is walking\n  ['^(is|are|am) #Gerund$', [present, prog]]],\n  'past-progressive': [\n  // he was walking\n  ['^(was|were) #Gerund$', [past, prog]]],\n  'future-progressive': [\n  // he will be\n  ['^will be #Gerund$', [future, prog]]],\n  // === Perfect ===\n  'present-perfect': [\n  // he has walked\n  ['^(has|have) #PastTense$', [past, complete]] //past?\n  ],\n  'past-perfect': [\n  // he had walked\n  ['^had #PastTense$', [past, complete]],\n  // had been to see\n  ['^had #PastTense to #Infinitive', [past, complete]]],\n  'future-perfect': [\n  // he will have\n  ['^will have #PastTense$', [future, complete]]],\n  // === Progressive-perfect ===\n  'present-perfect-progressive': [\n  // he has been walking\n  ['^(has|have) been #Gerund$', [past, prog]] //present?\n  ],\n  'past-perfect-progressive': [\n  // he had been\n  ['^had been #Gerund$', [past, prog]]],\n  'future-perfect-progressive': [\n  // will have been\n  ['^will have been #Gerund$', [future, prog]]],\n  // ==== Passive ===\n  'passive-past': [\n  // got walked, was walked, were walked\n  ['(got|were|was) #Passive', [past, passive]],\n  // was being walked\n  ['^(was|were) being #Passive', [past, passive]],\n  // had been walked, have been eaten\n  ['^(had|have) been #Passive', [past, passive]]],\n  'passive-present': [\n  // is walked, are stolen\n  ['^(is|are|am) #Passive', [present, passive]],\n  // is being walked\n  ['^(is|are|am) being #Passive', [present, passive]],\n  // has been cleaned\n  ['^has been #Passive', [present, passive]]],\n  'passive-future': [\n  // will have been walked\n  ['will have been #Passive', [future, passive, conditional]],\n  // will be cleaned\n  ['will be being? #Passive', [future, passive, conditional]]],\n  // === Conditional ===\n  'present-conditional': [\n  // would be walked\n  ['would be #PastTense', [present, conditional]]],\n  'past-conditional': [\n  // would have been walked\n  ['would have been #PastTense', [past, conditional]]],\n  // ==== Auxiliary ===\n  'auxiliary-future': [\n  // going to drink\n  ['(is|are|am|was) going to (#Infinitive|#PresentTense)', [future]]],\n  'auxiliary-past': [\n  // he did walk\n  ['^did #Infinitive$', [past, singular]],\n  // used to walk\n  ['^used to #Infinitive$', [past, complete]]],\n  'auxiliary-present': [\n  // we do walk\n  ['^(does|do) #Infinitive$', [present, complete, plural]]],\n  // === modals ===\n  'modal-past': [\n  // he could have walked\n  ['^(could|must|should|shall) have #PastTense$', [past]]],\n  'modal-infinitive': [\n  // he can walk\n  ['^#Modal #Infinitive$', []]],\n  'infinitive': [\n  // walk\n  ['^#Infinitive$', []]]\n};\nlet list = [];\nObject.keys(verbForms).map(k => {\n  verbForms[k].forEach(a => {\n    list.push({\n      name: k,\n      match: a[0],\n      data: getData(a[1])\n    });\n  });\n});\nexport default list;","map":{"version":3,"names":["present","tense","conditional","future","prog","progressive","past","complete","passive","plural","singular","getData","tags","data","forEach","o","Object","assign","verbForms","list","keys","map","k","a","push","name","match"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/verbs/api/parse/grammar/forms.js"],"sourcesContent":["const present = { tense: 'PresentTense' }\nconst conditional = { conditional: true }\nconst future = { tense: 'FutureTense' }\nconst prog = { progressive: true }\nconst past = { tense: 'PastTense' }\nconst complete = { complete: true, progressive: false }\nconst passive = { passive: true }\nconst plural = { plural: true }\nconst singular = { plural: false }\n\nconst getData = function (tags) {\n  let data = {}\n  tags.forEach(o => {\n    Object.assign(data, o)\n  })\n  return data\n}\n\nconst verbForms = {\n  // === Simple ===\n  'imperative': [\n    // walk!\n    ['#Imperative', []],\n  ],\n\n  'want-infinitive': [\n    ['^(want|wants|wanted) to #Infinitive$', [present]],\n    ['^wanted to #Infinitive$', [past]],\n    ['^will want to #Infinitive$', [future]],\n  ],\n\n  'gerund-phrase': [\n    // started looking\n    ['^#PastTense #Gerund$', [past]],\n    // starts looking\n    ['^#PresentTense #Gerund$', [present]],\n    // start looking\n    ['^#Infinitive #Gerund$', [present]],\n    // will start looking\n    ['^will #Infinitive #Gerund$', [future]],\n    // have started looking\n    ['^have #PastTense #Gerund$', [past]],\n    // will have started looking\n    ['^will have #PastTense #Gerund$', [past]],\n  ],\n\n  'simple-present': [\n    // he walks',\n    ['^#PresentTense$', [present]],\n    // we walk\n    ['^#Infinitive$', [present]],\n  ],\n  'simple-past': [\n    // he walked',\n    ['^#PastTense$', [past]],\n  ],\n  'simple-future': [\n    // he will walk\n    ['^will #Adverb? #Infinitive', [future]],\n  ],\n\n  // === Progressive ===\n  'present-progressive': [\n    // he is walking\n    ['^(is|are|am) #Gerund$', [present, prog]],\n  ],\n  'past-progressive': [\n    // he was walking\n    ['^(was|were) #Gerund$', [past, prog]],\n  ],\n  'future-progressive': [\n    // he will be\n    ['^will be #Gerund$', [future, prog]],\n  ],\n\n  // === Perfect ===\n  'present-perfect': [\n    // he has walked\n    ['^(has|have) #PastTense$', [past, complete]], //past?\n  ],\n  'past-perfect': [\n    // he had walked\n    ['^had #PastTense$', [past, complete]],\n    // had been to see\n    ['^had #PastTense to #Infinitive', [past, complete]],\n  ],\n  'future-perfect': [\n    // he will have\n    ['^will have #PastTense$', [future, complete]],\n  ],\n\n  // === Progressive-perfect ===\n  'present-perfect-progressive': [\n    // he has been walking\n    ['^(has|have) been #Gerund$', [past, prog]], //present?\n  ],\n  'past-perfect-progressive': [\n    // he had been\n    ['^had been #Gerund$', [past, prog]],\n  ],\n  'future-perfect-progressive': [\n    // will have been\n    ['^will have been #Gerund$', [future, prog]],\n  ],\n\n  // ==== Passive ===\n  'passive-past': [\n    // got walked, was walked, were walked\n    ['(got|were|was) #Passive', [past, passive]],\n    // was being walked\n    ['^(was|were) being #Passive', [past, passive]],\n    // had been walked, have been eaten\n    ['^(had|have) been #Passive', [past, passive]],\n  ],\n  'passive-present': [\n    // is walked, are stolen\n    ['^(is|are|am) #Passive', [present, passive]],\n    // is being walked\n    ['^(is|are|am) being #Passive', [present, passive]],\n    // has been cleaned\n    ['^has been #Passive', [present, passive]],\n  ],\n  'passive-future': [\n    // will have been walked\n    ['will have been #Passive', [future, passive, conditional]],\n    // will be cleaned\n    ['will be being? #Passive', [future, passive, conditional]],\n  ],\n\n  // === Conditional ===\n  'present-conditional': [\n    // would be walked\n    ['would be #PastTense', [present, conditional]],\n  ],\n  'past-conditional': [\n    // would have been walked\n    ['would have been #PastTense', [past, conditional]],\n  ],\n\n  // ==== Auxiliary ===\n  'auxiliary-future': [\n    // going to drink\n    ['(is|are|am|was) going to (#Infinitive|#PresentTense)', [future]],\n  ],\n  'auxiliary-past': [\n    // he did walk\n    ['^did #Infinitive$', [past, singular]],\n    // used to walk\n    ['^used to #Infinitive$', [past, complete]],\n  ],\n  'auxiliary-present': [\n    // we do walk\n    ['^(does|do) #Infinitive$', [present, complete, plural]],\n  ],\n\n  // === modals ===\n  'modal-past': [\n    // he could have walked\n    ['^(could|must|should|shall) have #PastTense$', [past]],\n  ],\n  'modal-infinitive': [\n    // he can walk\n    ['^#Modal #Infinitive$', []],\n  ],\n\n  'infinitive': [\n    // walk\n    ['^#Infinitive$', []],\n  ],\n}\n\nlet list = []\nObject.keys(verbForms).map(k => {\n  verbForms[k].forEach(a => {\n    list.push({\n      name: k,\n      match: a[0],\n      data: getData(a[1]),\n    })\n  })\n})\n\nexport default list\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EAAEC,KAAK,EAAE;AAAe,CAAC;AACzC,MAAMC,WAAW,GAAG;EAAEA,WAAW,EAAE;AAAK,CAAC;AACzC,MAAMC,MAAM,GAAG;EAAEF,KAAK,EAAE;AAAc,CAAC;AACvC,MAAMG,IAAI,GAAG;EAAEC,WAAW,EAAE;AAAK,CAAC;AAClC,MAAMC,IAAI,GAAG;EAAEL,KAAK,EAAE;AAAY,CAAC;AACnC,MAAMM,QAAQ,GAAG;EAAEA,QAAQ,EAAE,IAAI;EAAEF,WAAW,EAAE;AAAM,CAAC;AACvD,MAAMG,OAAO,GAAG;EAAEA,OAAO,EAAE;AAAK,CAAC;AACjC,MAAMC,MAAM,GAAG;EAAEA,MAAM,EAAE;AAAK,CAAC;AAC/B,MAAMC,QAAQ,GAAG;EAAED,MAAM,EAAE;AAAM,CAAC;AAElC,MAAME,OAAO,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC9B,IAAIC,IAAI,GAAG,CAAC,CAAC;EACbD,IAAI,CAACE,OAAO,CAACC,CAAC,IAAI;IAChBC,MAAM,CAACC,MAAM,CAACJ,IAAI,EAAEE,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,OAAOF,IAAI;AACb,CAAC;AAED,MAAMK,SAAS,GAAG;EAChB;EACA,YAAY,EAAE;EACZ;EACA,CAAC,aAAa,EAAE,EAAE,CAAC,CACpB;EAED,iBAAiB,EAAE,CACjB,CAAC,sCAAsC,EAAE,CAAClB,OAAO,CAAC,CAAC,EACnD,CAAC,yBAAyB,EAAE,CAACM,IAAI,CAAC,CAAC,EACnC,CAAC,4BAA4B,EAAE,CAACH,MAAM,CAAC,CAAC,CACzC;EAED,eAAe,EAAE;EACf;EACA,CAAC,sBAAsB,EAAE,CAACG,IAAI,CAAC,CAAC;EAChC;EACA,CAAC,yBAAyB,EAAE,CAACN,OAAO,CAAC,CAAC;EACtC;EACA,CAAC,uBAAuB,EAAE,CAACA,OAAO,CAAC,CAAC;EACpC;EACA,CAAC,4BAA4B,EAAE,CAACG,MAAM,CAAC,CAAC;EACxC;EACA,CAAC,2BAA2B,EAAE,CAACG,IAAI,CAAC,CAAC;EACrC;EACA,CAAC,gCAAgC,EAAE,CAACA,IAAI,CAAC,CAAC,CAC3C;EAED,gBAAgB,EAAE;EAChB;EACA,CAAC,iBAAiB,EAAE,CAACN,OAAO,CAAC,CAAC;EAC9B;EACA,CAAC,eAAe,EAAE,CAACA,OAAO,CAAC,CAAC,CAC7B;EACD,aAAa,EAAE;EACb;EACA,CAAC,cAAc,EAAE,CAACM,IAAI,CAAC,CAAC,CACzB;EACD,eAAe,EAAE;EACf;EACA,CAAC,4BAA4B,EAAE,CAACH,MAAM,CAAC,CAAC,CACzC;EAED;EACA,qBAAqB,EAAE;EACrB;EACA,CAAC,uBAAuB,EAAE,CAACH,OAAO,EAAEI,IAAI,CAAC,CAAC,CAC3C;EACD,kBAAkB,EAAE;EAClB;EACA,CAAC,sBAAsB,EAAE,CAACE,IAAI,EAAEF,IAAI,CAAC,CAAC,CACvC;EACD,oBAAoB,EAAE;EACpB;EACA,CAAC,mBAAmB,EAAE,CAACD,MAAM,EAAEC,IAAI,CAAC,CAAC,CACtC;EAED;EACA,iBAAiB,EAAE;EACjB;EACA,CAAC,yBAAyB,EAAE,CAACE,IAAI,EAAEC,QAAQ,CAAC,CAAC,CAAE;EAAA,CAChD;EACD,cAAc,EAAE;EACd;EACA,CAAC,kBAAkB,EAAE,CAACD,IAAI,EAAEC,QAAQ,CAAC,CAAC;EACtC;EACA,CAAC,gCAAgC,EAAE,CAACD,IAAI,EAAEC,QAAQ,CAAC,CAAC,CACrD;EACD,gBAAgB,EAAE;EAChB;EACA,CAAC,wBAAwB,EAAE,CAACJ,MAAM,EAAEI,QAAQ,CAAC,CAAC,CAC/C;EAED;EACA,6BAA6B,EAAE;EAC7B;EACA,CAAC,2BAA2B,EAAE,CAACD,IAAI,EAAEF,IAAI,CAAC,CAAC,CAAE;EAAA,CAC9C;EACD,0BAA0B,EAAE;EAC1B;EACA,CAAC,oBAAoB,EAAE,CAACE,IAAI,EAAEF,IAAI,CAAC,CAAC,CACrC;EACD,4BAA4B,EAAE;EAC5B;EACA,CAAC,0BAA0B,EAAE,CAACD,MAAM,EAAEC,IAAI,CAAC,CAAC,CAC7C;EAED;EACA,cAAc,EAAE;EACd;EACA,CAAC,yBAAyB,EAAE,CAACE,IAAI,EAAEE,OAAO,CAAC,CAAC;EAC5C;EACA,CAAC,4BAA4B,EAAE,CAACF,IAAI,EAAEE,OAAO,CAAC,CAAC;EAC/C;EACA,CAAC,2BAA2B,EAAE,CAACF,IAAI,EAAEE,OAAO,CAAC,CAAC,CAC/C;EACD,iBAAiB,EAAE;EACjB;EACA,CAAC,uBAAuB,EAAE,CAACR,OAAO,EAAEQ,OAAO,CAAC,CAAC;EAC7C;EACA,CAAC,6BAA6B,EAAE,CAACR,OAAO,EAAEQ,OAAO,CAAC,CAAC;EACnD;EACA,CAAC,oBAAoB,EAAE,CAACR,OAAO,EAAEQ,OAAO,CAAC,CAAC,CAC3C;EACD,gBAAgB,EAAE;EAChB;EACA,CAAC,yBAAyB,EAAE,CAACL,MAAM,EAAEK,OAAO,EAAEN,WAAW,CAAC,CAAC;EAC3D;EACA,CAAC,yBAAyB,EAAE,CAACC,MAAM,EAAEK,OAAO,EAAEN,WAAW,CAAC,CAAC,CAC5D;EAED;EACA,qBAAqB,EAAE;EACrB;EACA,CAAC,qBAAqB,EAAE,CAACF,OAAO,EAAEE,WAAW,CAAC,CAAC,CAChD;EACD,kBAAkB,EAAE;EAClB;EACA,CAAC,4BAA4B,EAAE,CAACI,IAAI,EAAEJ,WAAW,CAAC,CAAC,CACpD;EAED;EACA,kBAAkB,EAAE;EAClB;EACA,CAAC,sDAAsD,EAAE,CAACC,MAAM,CAAC,CAAC,CACnE;EACD,gBAAgB,EAAE;EAChB;EACA,CAAC,mBAAmB,EAAE,CAACG,IAAI,EAAEI,QAAQ,CAAC,CAAC;EACvC;EACA,CAAC,uBAAuB,EAAE,CAACJ,IAAI,EAAEC,QAAQ,CAAC,CAAC,CAC5C;EACD,mBAAmB,EAAE;EACnB;EACA,CAAC,yBAAyB,EAAE,CAACP,OAAO,EAAEO,QAAQ,EAAEE,MAAM,CAAC,CAAC,CACzD;EAED;EACA,YAAY,EAAE;EACZ;EACA,CAAC,6CAA6C,EAAE,CAACH,IAAI,CAAC,CAAC,CACxD;EACD,kBAAkB,EAAE;EAClB;EACA,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAC7B;EAED,YAAY,EAAE;EACZ;EACA,CAAC,eAAe,EAAE,EAAE,CAAC;AAEzB,CAAC;AAED,IAAIa,IAAI,GAAG,EAAE;AACbH,MAAM,CAACI,IAAI,CAACF,SAAS,CAAC,CAACG,GAAG,CAACC,CAAC,IAAI;EAC9BJ,SAAS,CAACI,CAAC,CAAC,CAACR,OAAO,CAACS,CAAC,IAAI;IACxBJ,IAAI,CAACK,IAAI,CAAC;MACRC,IAAI,EAAEH,CAAC;MACPI,KAAK,EAAEH,CAAC,CAAC,CAAC,CAAC;MACXV,IAAI,EAAEF,OAAO,CAACY,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAeJ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}