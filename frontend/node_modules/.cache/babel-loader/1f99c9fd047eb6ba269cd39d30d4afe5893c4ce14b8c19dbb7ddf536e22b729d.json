{"ast":null,"code":"import find from './find.js';\nimport parse from './parse.js';\nimport toCardinal from './convert/toCardinal.js';\nimport toOrdinal from './convert/toOrdinal.js';\nconst plugin = function (View) {\n  /**\n   */\n  class Fractions extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Fractions';\n    }\n    parse(n) {\n      return this.getNth(n).map(parse);\n    }\n    get(n) {\n      return this.getNth(n).map(parse);\n    }\n    json(n) {\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(n)[0];\n        let parsed = parse(p);\n        json.fraction = parsed;\n        return json;\n      }, []);\n    }\n    // become 0.5\n    toDecimal(n) {\n      this.getNth(n).forEach(m => {\n        let {\n          decimal\n        } = parse(m);\n        m = m.replaceWith(String(decimal), true);\n        m.tag('NumericValue');\n        m.unTag('Fraction');\n      });\n      return this;\n    }\n    toFraction(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m);\n        if (obj && typeof obj.numerator === 'number' && typeof obj.denominator === 'number') {\n          let str = `${obj.numerator}/${obj.denominator}`;\n          this.replace(m, str);\n        }\n      });\n      return this;\n    }\n    toOrdinal(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m);\n        let str = toOrdinal(obj);\n        if (m.after('^#Noun').found) {\n          str += ' of'; // three fifths of dentists\n        }\n        m.replaceWith(str);\n      });\n      return this;\n    }\n    toCardinal(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m);\n        let str = toCardinal(obj);\n        m.replaceWith(str);\n      });\n      return this;\n    }\n    toPercentage(n) {\n      this.getNth(n).forEach(m => {\n        let {\n          decimal\n        } = parse(m);\n        let percent = decimal * 100;\n        percent = Math.round(percent * 100) / 100; // round it\n        m.replaceWith(`${percent}%`);\n      });\n      return this;\n    }\n  }\n  View.prototype.fractions = function (n) {\n    let m = find(this);\n    m = m.getNth(n);\n    return new Fractions(this.document, m.pointer);\n  };\n};\nexport default plugin;","map":{"version":3,"names":["find","parse","toCardinal","toOrdinal","plugin","View","Fractions","constructor","document","pointer","groups","viewType","n","getNth","map","get","json","p","toView","parsed","fraction","toDecimal","forEach","m","decimal","replaceWith","String","tag","unTag","toFraction","obj","numerator","denominator","str","replace","after","found","toPercentage","percent","Math","round","prototype","fractions"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/numbers/fractions/api.js"],"sourcesContent":["import find from './find.js'\nimport parse from './parse.js'\nimport toCardinal from './convert/toCardinal.js'\nimport toOrdinal from './convert/toOrdinal.js'\n\nconst plugin = function (View) {\n  /**\n   */\n  class Fractions extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Fractions'\n    }\n    parse(n) {\n      return this.getNth(n).map(parse)\n    }\n    get(n) {\n      return this.getNth(n).map(parse)\n    }\n    json(n) {\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(n)[0]\n        let parsed = parse(p)\n        json.fraction = parsed\n        return json\n      }, [])\n    }\n    // become 0.5\n    toDecimal(n) {\n      this.getNth(n).forEach(m => {\n        let { decimal } = parse(m)\n        m = m.replaceWith(String(decimal), true)\n        m.tag('NumericValue')\n        m.unTag('Fraction')\n      })\n      return this\n    }\n    toFraction(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m)\n        if (obj && typeof obj.numerator === 'number' && typeof obj.denominator === 'number') {\n          let str = `${obj.numerator}/${obj.denominator}`\n          this.replace(m, str)\n        }\n      })\n      return this\n    }\n    toOrdinal(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m)\n        let str = toOrdinal(obj)\n        if (m.after('^#Noun').found) {\n          str += ' of' // three fifths of dentists\n        }\n        m.replaceWith(str)\n      })\n      return this\n    }\n    toCardinal(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m)\n        let str = toCardinal(obj)\n        m.replaceWith(str)\n      })\n      return this\n    }\n    toPercentage(n) {\n      this.getNth(n).forEach(m => {\n        let { decimal } = parse(m)\n        let percent = decimal * 100\n        percent = Math.round(percent * 100) / 100 // round it\n        m.replaceWith(`${percent}%`)\n      })\n      return this\n    }\n  }\n\n  View.prototype.fractions = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Fractions(this.document, m.pointer)\n  }\n}\n\nexport default plugin\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}