{"ast":null,"code":"// transfer sentence-ending punctuation\nconst repairPunct = function (terms, len) {\n  let last = terms.length - 1;\n  let from = terms[last];\n  let to = terms[last - len];\n  if (to && from) {\n    to.post += from.post; //this isn't perfect.\n    to.post = to.post.replace(/ +([.?!,;:])/, '$1');\n    // don't allow any silly punctuation outcomes like ',!'\n    to.post = to.post.replace(/[,;:]+([.?!])/, '$1');\n  }\n};\n\n// remove terms from document json\nconst pluckOut = function (document, nots) {\n  nots.forEach(ptr => {\n    let [n, start, end] = ptr;\n    let len = end - start;\n    if (!document[n]) {\n      return; // weird!\n    }\n    if (end === document[n].length && end > 1) {\n      repairPunct(document[n], len);\n    }\n    document[n].splice(start, len); // replaces len terms at index start\n  });\n  // remove any now-empty sentences\n  // (foreach + splice = 'mutable filter')\n  for (let i = document.length - 1; i >= 0; i -= 1) {\n    if (document[i].length === 0) {\n      document.splice(i, 1);\n      // remove any trailing whitespace before our removed sentence\n      if (i === document.length && document[i - 1]) {\n        let terms = document[i - 1];\n        let lastTerm = terms[terms.length - 1];\n        if (lastTerm) {\n          lastTerm.post = lastTerm.post.trimEnd();\n        }\n      }\n      // repair any downstream indexes\n      // for (let k = i; k < document.length; k += 1) {\n      //   document[k].forEach(term => term.index[0] -= 1)\n      // }\n    }\n  }\n  return document;\n};\nexport default pluckOut;","map":{"version":3,"names":["repairPunct","terms","len","last","length","from","to","post","replace","pluckOut","document","nots","forEach","ptr","n","start","end","splice","i","lastTerm","trimEnd"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/change/api/lib/remove.js"],"sourcesContent":["\n// transfer sentence-ending punctuation\nconst repairPunct = function (terms, len) {\n  let last = terms.length - 1\n  let from = terms[last]\n  let to = terms[last - len]\n  if (to && from) {\n    to.post += from.post //this isn't perfect.\n    to.post = to.post.replace(/ +([.?!,;:])/, '$1')\n    // don't allow any silly punctuation outcomes like ',!'\n    to.post = to.post.replace(/[,;:]+([.?!])/, '$1')\n  }\n}\n\n// remove terms from document json\nconst pluckOut = function (document, nots) {\n  nots.forEach(ptr => {\n    let [n, start, end] = ptr\n    let len = end - start\n    if (!document[n]) {\n      return // weird!\n    }\n    if (end === document[n].length && end > 1) {\n      repairPunct(document[n], len)\n    }\n    document[n].splice(start, len) // replaces len terms at index start\n  })\n  // remove any now-empty sentences\n  // (foreach + splice = 'mutable filter')\n  for (let i = document.length - 1; i >= 0; i -= 1) {\n    if (document[i].length === 0) {\n      document.splice(i, 1)\n      // remove any trailing whitespace before our removed sentence\n      if (i === document.length && document[i - 1]) {\n        let terms = document[i - 1]\n        let lastTerm = terms[terms.length - 1]\n        if (lastTerm) {\n          lastTerm.post = lastTerm.post.trimEnd()\n        }\n      }\n      // repair any downstream indexes\n      // for (let k = i; k < document.length; k += 1) {\n      //   document[k].forEach(term => term.index[0] -= 1)\n      // }\n    }\n  }\n  return document\n}\n\nexport default pluckOut"],"mappings":"AACA;AACA,MAAMA,WAAW,GAAG,SAAAA,CAAUC,KAAK,EAAEC,GAAG,EAAE;EACxC,IAAIC,IAAI,GAAGF,KAAK,CAACG,MAAM,GAAG,CAAC;EAC3B,IAAIC,IAAI,GAAGJ,KAAK,CAACE,IAAI,CAAC;EACtB,IAAIG,EAAE,GAAGL,KAAK,CAACE,IAAI,GAAGD,GAAG,CAAC;EAC1B,IAAII,EAAE,IAAID,IAAI,EAAE;IACdC,EAAE,CAACC,IAAI,IAAIF,IAAI,CAACE,IAAI,EAAC;IACrBD,EAAE,CAACC,IAAI,GAAGD,EAAE,CAACC,IAAI,CAACC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;IAC/C;IACAF,EAAE,CAACC,IAAI,GAAGD,EAAE,CAACC,IAAI,CAACC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;EAClD;AACF,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,IAAI,EAAE;EACzCA,IAAI,CAACC,OAAO,CAACC,GAAG,IAAI;IAClB,IAAI,CAACC,CAAC,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGH,GAAG;IACzB,IAAIX,GAAG,GAAGc,GAAG,GAAGD,KAAK;IACrB,IAAI,CAACL,QAAQ,CAACI,CAAC,CAAC,EAAE;MAChB,OAAM,CAAC;IACT;IACA,IAAIE,GAAG,KAAKN,QAAQ,CAACI,CAAC,CAAC,CAACV,MAAM,IAAIY,GAAG,GAAG,CAAC,EAAE;MACzChB,WAAW,CAACU,QAAQ,CAACI,CAAC,CAAC,EAAEZ,GAAG,CAAC;IAC/B;IACAQ,QAAQ,CAACI,CAAC,CAAC,CAACG,MAAM,CAACF,KAAK,EAAEb,GAAG,CAAC,EAAC;EACjC,CAAC,CAAC;EACF;EACA;EACA,KAAK,IAAIgB,CAAC,GAAGR,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAEc,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAChD,IAAIR,QAAQ,CAACQ,CAAC,CAAC,CAACd,MAAM,KAAK,CAAC,EAAE;MAC5BM,QAAQ,CAACO,MAAM,CAACC,CAAC,EAAE,CAAC,CAAC;MACrB;MACA,IAAIA,CAAC,KAAKR,QAAQ,CAACN,MAAM,IAAIM,QAAQ,CAACQ,CAAC,GAAG,CAAC,CAAC,EAAE;QAC5C,IAAIjB,KAAK,GAAGS,QAAQ,CAACQ,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAIC,QAAQ,GAAGlB,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;QACtC,IAAIe,QAAQ,EAAE;UACZA,QAAQ,CAACZ,IAAI,GAAGY,QAAQ,CAACZ,IAAI,CAACa,OAAO,CAAC,CAAC;QACzC;MACF;MACA;MACA;MACA;MACA;IACF;EACF;EACA,OAAOV,QAAQ;AACjB,CAAC;AAED,eAAeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}