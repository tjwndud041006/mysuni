{"ast":null,"code":"/*\nCopyright (c) 2014, Lee Wenzhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict';\n\n/**\n * a topo sort for a digraph\n * @param {Digraph}\n */\nclass Topological {\n  constructor(g) {\n    this.isDag = true;\n    this.sorted = topoSort(uniqueVertexs(g.edges()), g.edges());\n  }\n  isDAG() {\n    return this.isDag;\n  }\n\n  /**\n   * get ordered vertexs of digraph\n   */\n  order() {\n    return this.sorted.slice();\n  }\n}\n\n/**\n * @param {Array} all vertex in digraph\n * @param {Object} all edges in the digraph\n */\nfunction topoSort(vertexs, edges) {\n  const sorted = [];\n  let cursor = vertexs.length;\n  const visited = {};\n  let i = cursor;\n  while (i--) {\n    if (!visited[i]) visit(vertexs[i], i, []);\n  }\n  return sorted.reverse();\n  function visit(vertex, i, predecessors) {\n    if (predecessors.indexOf(vertex) >= 0) {\n      throw new Error('Cyclic dependency:' + JSON.stringify(vertex));\n    }\n    if (visited[i]) return;\n    visited[i] = true;\n    const outgoing = edges.filter(function (edge) {\n      return edge.to() === vertex;\n    });\n    let preds = [];\n    if (outgoing.length > 0) {\n      preds = predecessors.concat(vertex);\n    }\n    let from;\n    outgoing.forEach(function (edge) {\n      from = edge.from();\n      visit(from, vertexs.indexOf(from), preds);\n    });\n    sorted[--cursor] = vertex;\n  }\n}\nfunction uniqueVertexs(edges) {\n  const vertexs = [];\n  let from, to;\n  edges.forEach(function (edge) {\n    from = edge.from();\n    to = edge.to();\n    if (vertexs.indexOf(from) < 0) vertexs.push(from);\n    if (vertexs.indexOf(to) < 0) vertexs.push(to);\n  });\n  return vertexs;\n}\nmodule.exports = Topological;","map":{"version":3,"names":["Topological","constructor","g","isDag","sorted","topoSort","uniqueVertexs","edges","isDAG","order","slice","vertexs","cursor","length","visited","i","visit","reverse","vertex","predecessors","indexOf","Error","JSON","stringify","outgoing","filter","edge","to","preds","concat","from","forEach","push","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/util/topological.js"],"sourcesContent":["/*\nCopyright (c) 2014, Lee Wenzhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\n/**\n * a topo sort for a digraph\n * @param {Digraph}\n */\nclass Topological {\n  constructor (g) {\n    this.isDag = true\n    this.sorted = topoSort(uniqueVertexs(g.edges()), g.edges())\n  }\n\n  isDAG () {\n    return this.isDag\n  }\n\n  /**\n   * get ordered vertexs of digraph\n   */\n  order () {\n    return this.sorted.slice()\n  }\n}\n\n/**\n * @param {Array} all vertex in digraph\n * @param {Object} all edges in the digraph\n */\nfunction topoSort (vertexs, edges) {\n  const sorted = []\n  let cursor = vertexs.length\n  const visited = {}\n  let i = cursor\n  while (i--) {\n    if (!visited[i]) visit(vertexs[i], i, [])\n  }\n\n  return sorted.reverse()\n\n  function visit (vertex, i, predecessors) {\n    if (predecessors.indexOf(vertex) >= 0) {\n      throw new Error('Cyclic dependency:' + JSON.stringify(vertex))\n    }\n\n    if (visited[i]) return\n    visited[i] = true\n\n    const outgoing = edges.filter(function (edge) {\n      return edge.to() === vertex\n    })\n\n    let preds = []\n    if (outgoing.length > 0) {\n      preds = predecessors.concat(vertex)\n    }\n    let from\n    outgoing.forEach(function (edge) {\n      from = edge.from()\n      visit(from, vertexs.indexOf(from), preds)\n    })\n\n    sorted[--cursor] = vertex\n  }\n}\n\nfunction uniqueVertexs (edges) {\n  const vertexs = []\n  let from, to\n  edges.forEach(function (edge) {\n    from = edge.from()\n    to = edge.to()\n    if (vertexs.indexOf(from) < 0) vertexs.push(from)\n    if (vertexs.indexOf(to) < 0) vertexs.push(to)\n  })\n  return vertexs\n}\n\nmodule.exports = Topological\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}