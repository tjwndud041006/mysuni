{"ast":null,"code":"/*\n  Brill's POS Tagger\n  Copyright (C) 2019 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict';\n\nconst Sentence = require('./Sentence');\nconst DEBUG = false;\nclass BrillPOSTagger {\n  constructor(lexicon, ruleSet) {\n    this.lexicon = lexicon;\n    this.ruleSet = ruleSet;\n  }\n\n  // Tags a sentence, sentence is an array of words\n  // Returns an array of tagged words; a tagged words is an array consisting of\n  // the word itself followed by its lexical category\n  tag(sentence) {\n    const taggedSentence = this.tagWithLexicon(sentence);\n    DEBUG && console.log(taggedSentence);\n    return this.applyRules(taggedSentence);\n  }\n  tagWithLexicon(sentence) {\n    const taggedSentence = new Sentence();\n    const that = this;\n    sentence.forEach(function (word, index) {\n      const categories = that.lexicon.tagWord(word);\n      taggedSentence.addTaggedWord(word, categories[0]);\n    });\n    return taggedSentence;\n  }\n\n  // Applies the transformation rules to an initially tagged sentence.\n  // taggedSentence is an array of tagged words.\n  // A tagged word is an array consisting of the word itself followed by its lexical category.\n  // Returns an array of tagged words as well\n  applyRules(sentence) {\n    for (let i = 0, size = sentence.taggedWords.length; i < size; i++) {\n      this.ruleSet.getRules().forEach(function (rule) {\n        rule.apply(sentence, i);\n      });\n    }\n    return sentence;\n  }\n}\nmodule.exports = BrillPOSTagger;","map":{"version":3,"names":["Sentence","require","DEBUG","BrillPOSTagger","constructor","lexicon","ruleSet","tag","sentence","taggedSentence","tagWithLexicon","console","log","applyRules","that","forEach","word","index","categories","tagWord","addTaggedWord","i","size","taggedWords","length","getRules","rule","apply","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/brill_pos_tagger/lib/Brill_POS_Tagger.js"],"sourcesContent":["/*\n  Brill's POS Tagger\n  Copyright (C) 2019 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict'\n\nconst Sentence = require('./Sentence')\n\nconst DEBUG = false\n\nclass BrillPOSTagger {\n  constructor (lexicon, ruleSet) {\n    this.lexicon = lexicon\n    this.ruleSet = ruleSet\n  }\n\n  // Tags a sentence, sentence is an array of words\n  // Returns an array of tagged words; a tagged words is an array consisting of\n  // the word itself followed by its lexical category\n  tag (sentence) {\n    const taggedSentence = this.tagWithLexicon(sentence)\n    DEBUG && console.log(taggedSentence)\n    return this.applyRules(taggedSentence)\n  }\n\n  tagWithLexicon (sentence) {\n    const taggedSentence = new Sentence()\n\n    const that = this\n    sentence.forEach(function (word, index) {\n      const categories = that.lexicon.tagWord(word)\n      taggedSentence.addTaggedWord(word, categories[0])\n    })\n    return (taggedSentence)\n  }\n\n  // Applies the transformation rules to an initially tagged sentence.\n  // taggedSentence is an array of tagged words.\n  // A tagged word is an array consisting of the word itself followed by its lexical category.\n  // Returns an array of tagged words as well\n  applyRules (sentence) {\n    for (let i = 0, size = sentence.taggedWords.length; i < size; i++) {\n      this.ruleSet.getRules().forEach(function (rule) {\n        rule.apply(sentence, i)\n      })\n    }\n    return sentence\n  }\n}\n\nmodule.exports = BrillPOSTagger\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEtC,MAAMC,KAAK,GAAG,KAAK;AAEnB,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAAEC,OAAO,EAAEC,OAAO,EAAE;IAC7B,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;EAEA;EACA;EACA;EACAC,GAAGA,CAAEC,QAAQ,EAAE;IACb,MAAMC,cAAc,GAAG,IAAI,CAACC,cAAc,CAACF,QAAQ,CAAC;IACpDN,KAAK,IAAIS,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;IACpC,OAAO,IAAI,CAACI,UAAU,CAACJ,cAAc,CAAC;EACxC;EAEAC,cAAcA,CAAEF,QAAQ,EAAE;IACxB,MAAMC,cAAc,GAAG,IAAIT,QAAQ,CAAC,CAAC;IAErC,MAAMc,IAAI,GAAG,IAAI;IACjBN,QAAQ,CAACO,OAAO,CAAC,UAAUC,IAAI,EAAEC,KAAK,EAAE;MACtC,MAAMC,UAAU,GAAGJ,IAAI,CAACT,OAAO,CAACc,OAAO,CAACH,IAAI,CAAC;MAC7CP,cAAc,CAACW,aAAa,CAACJ,IAAI,EAAEE,UAAU,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IACF,OAAQT,cAAc;EACxB;;EAEA;EACA;EACA;EACA;EACAI,UAAUA,CAAEL,QAAQ,EAAE;IACpB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAGd,QAAQ,CAACe,WAAW,CAACC,MAAM,EAAEH,CAAC,GAAGC,IAAI,EAAED,CAAC,EAAE,EAAE;MACjE,IAAI,CAACf,OAAO,CAACmB,QAAQ,CAAC,CAAC,CAACV,OAAO,CAAC,UAAUW,IAAI,EAAE;QAC9CA,IAAI,CAACC,KAAK,CAACnB,QAAQ,EAAEa,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ;IACA,OAAOb,QAAQ;EACjB;AACF;AAEAoB,MAAM,CAACC,OAAO,GAAG1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}