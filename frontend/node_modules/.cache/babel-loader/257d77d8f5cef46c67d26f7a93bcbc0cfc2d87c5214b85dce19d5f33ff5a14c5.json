{"ast":null,"code":"/*\nCopyright (c) 2024, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst postgres = require('pg');\nrequire('dotenv').config();\nclass PostgresPlugin {\n  constructor() {\n    this.postgresClient = null;\n  }\n  async configPostgres() {\n    // Initialize connection to Postgres\n    const client = new postgres.Client({\n      user: process.env.POSTGRES_USER,\n      host: process.env.POSTGRES_HOST,\n      database: process.env.POSTGRES_DB,\n      password: process.env.POSTGRES_PASSWORD,\n      port: process.env.POSTGRES_PORT\n    });\n    this.postgresClient = client;\n    this.postgresTableName = process.env.POSTGRES_TABLE;\n\n    // Connect to the database\n    await client.connect();\n\n    // Call the function to create the table\n    await this.createTableIfNotExists(client, this.postgresTableName);\n\n    // Don't forget to close the connection when done\n    // await client.end()\n  }\n\n  // Function to create the table\n  async createTableIfNotExists(client, tableName) {\n    // Check if the table exists\n    const query = `SELECT to_regclass('${tableName}')`;\n    const result = await client.query(query);\n    if (result.rows[0].to_regclass === null) {\n      // Table does not exist, create it\n      const createTableQuery = `\n        CREATE TABLE ${tableName} (\n          id SERIAL PRIMARY KEY,\n          data JSONB\n        );\n      `;\n      await client.query(createTableQuery);\n      console.log('table created');\n    }\n  }\n\n  // Function to insert a JavaScript object by key\n  // Returns the id generated by the database\n  async store(object, options) {\n    try {\n      const query = `INSERT INTO ${this.postgresTableName} (data) VALUES ($1)  RETURNING id;`;\n      const result = await this.postgresClient.query(query, [object]);\n      if (result.rowCount > 0) {\n        return result.rows[0].id;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Error inserting object:', error);\n    }\n  }\n\n  // Function to retrieve a JavaScript object by key\n  async retrieve(key, options) {\n    try {\n      const query = `SELECT data FROM ${this.postgresTableName} WHERE id = $1`;\n      const result = await this.postgresClient.query(query, [key]);\n      if (result.rows.length > 0) {\n        return result.rows[0].data;\n      } else {\n        console.log('No object found with the specified key');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error retrieving object:', error);\n      return null;\n    }\n  }\n}\nmodule.exports = PostgresPlugin;","map":{"version":3,"names":["postgres","require","config","PostgresPlugin","constructor","postgresClient","configPostgres","client","Client","user","process","env","POSTGRES_USER","host","POSTGRES_HOST","database","POSTGRES_DB","password","POSTGRES_PASSWORD","port","POSTGRES_PORT","postgresTableName","POSTGRES_TABLE","connect","createTableIfNotExists","tableName","query","result","rows","to_regclass","createTableQuery","console","log","store","object","options","rowCount","id","error","retrieve","key","length","data","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/util/storage/Postgres.js"],"sourcesContent":["/*\nCopyright (c) 2024, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst postgres = require('pg')\nrequire('dotenv').config()\n\nclass PostgresPlugin {\n  constructor () {\n    this.postgresClient = null\n  }\n\n  async configPostgres () {\n    // Initialize connection to Postgres\n    const client = new postgres.Client({\n      user: process.env.POSTGRES_USER,\n      host: process.env.POSTGRES_HOST,\n      database: process.env.POSTGRES_DB,\n      password: process.env.POSTGRES_PASSWORD,\n      port: process.env.POSTGRES_PORT\n    })\n    this.postgresClient = client\n    this.postgresTableName = process.env.POSTGRES_TABLE\n\n    // Connect to the database\n    await client.connect()\n\n    // Call the function to create the table\n    await this.createTableIfNotExists(client, this.postgresTableName)\n\n    // Don't forget to close the connection when done\n    // await client.end()\n  }\n\n  // Function to create the table\n  async createTableIfNotExists (client, tableName) {\n    // Check if the table exists\n    const query = `SELECT to_regclass('${tableName}')`\n    const result = await client.query(query)\n\n    if (result.rows[0].to_regclass === null) {\n      // Table does not exist, create it\n      const createTableQuery = `\n        CREATE TABLE ${tableName} (\n          id SERIAL PRIMARY KEY,\n          data JSONB\n        );\n      `\n      await client.query(createTableQuery)\n      console.log('table created')\n    }\n  }\n\n  // Function to insert a JavaScript object by key\n  // Returns the id generated by the database\n  async store (object, options) {\n    try {\n      const query = `INSERT INTO ${this.postgresTableName} (data) VALUES ($1)  RETURNING id;`\n      const result = await this.postgresClient.query(query, [object])\n      if (result.rowCount > 0) {\n        return result.rows[0].id\n      } else {\n        return null\n      }\n    } catch (error) {\n      console.error('Error inserting object:', error)\n    }\n  }\n\n  // Function to retrieve a JavaScript object by key\n  async retrieve (key, options) {\n    try {\n      const query = `SELECT data FROM ${this.postgresTableName} WHERE id = $1`\n      const result = await this.postgresClient.query(query, [key])\n      if (result.rows.length > 0) {\n        return result.rows[0].data\n      } else {\n        console.log('No object found with the specified key')\n        return null\n      }\n    } catch (error) {\n      console.error('Error retrieving object:', error)\n      return null\n    }\n  }\n}\n\nmodule.exports = PostgresPlugin\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}