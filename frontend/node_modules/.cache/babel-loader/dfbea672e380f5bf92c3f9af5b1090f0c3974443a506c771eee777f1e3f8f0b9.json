{"ast":null,"code":"import simpleSplit from './01-simple-split.js';\nimport simpleMerge from './02-simple-merge.js';\nimport smartMerge from './03-smart-merge.js';\nimport quoteMerge from './04-quote-merge.js';\nimport parensMerge from './05-parens-merge.js';\n//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.\n// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.\n//regs-\nconst hasSomething = /\\S/;\nconst startWhitespace = /^\\s+/;\nconst splitSentences = function (text, world) {\n  text = text || '';\n  text = String(text);\n  // Ensure it 'smells like' a sentence\n  if (!text || typeof text !== 'string' || hasSomething.test(text) === false) {\n    return [];\n  }\n  // cleanup unicode-spaces\n  text = text.replace('\\xa0', ' ');\n  // First do a greedy-split..\n  let splits = simpleSplit(text);\n  // Filter-out the crap ones\n  let sentences = simpleMerge(splits);\n  //detection of non-sentence chunks:\n  sentences = smartMerge(sentences, world);\n  // allow 'he said \"no sir.\" and left.'\n  sentences = quoteMerge(sentences);\n  // allow 'i thought (no way!) and left.'\n  sentences = parensMerge(sentences);\n  //if we never got a sentence, return the given text\n  if (sentences.length === 0) {\n    return [text];\n  }\n  //move whitespace to the ends of sentences, when possible\n  //['hello',' world'] -> ['hello ','world']\n  for (let i = 1; i < sentences.length; i += 1) {\n    let ws = sentences[i].match(startWhitespace);\n    if (ws !== null) {\n      sentences[i - 1] += ws[0];\n      sentences[i] = sentences[i].replace(startWhitespace, '');\n    }\n  }\n  return sentences;\n};\nexport default splitSentences;","map":{"version":3,"names":["simpleSplit","simpleMerge","smartMerge","quoteMerge","parensMerge","hasSomething","startWhitespace","splitSentences","text","world","String","test","replace","splits","sentences","length","i","ws","match"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/methods/01-sentences/index.js"],"sourcesContent":["import simpleSplit from './01-simple-split.js'\nimport simpleMerge from './02-simple-merge.js'\nimport smartMerge from './03-smart-merge.js'\nimport quoteMerge from './04-quote-merge.js'\nimport parensMerge from './05-parens-merge.js'\n//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.\n// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.\n//regs-\nconst hasSomething = /\\S/\nconst startWhitespace = /^\\s+/\n\nconst splitSentences = function (text, world) {\n  text = text || ''\n  text = String(text)\n  // Ensure it 'smells like' a sentence\n  if (!text || typeof text !== 'string' || hasSomething.test(text) === false) {\n    return []\n  }\n  // cleanup unicode-spaces\n  text = text.replace('\\xa0', ' ')\n  // First do a greedy-split..\n  let splits = simpleSplit(text)\n  // Filter-out the crap ones\n  let sentences = simpleMerge(splits)\n  //detection of non-sentence chunks:\n  sentences = smartMerge(sentences, world)\n  // allow 'he said \"no sir.\" and left.'\n  sentences = quoteMerge(sentences)\n  // allow 'i thought (no way!) and left.'\n  sentences = parensMerge(sentences)\n  //if we never got a sentence, return the given text\n  if (sentences.length === 0) {\n    return [text]\n  }\n  //move whitespace to the ends of sentences, when possible\n  //['hello',' world'] -> ['hello ','world']\n  for (let i = 1; i < sentences.length; i += 1) {\n    let ws = sentences[i].match(startWhitespace)\n    if (ws !== null) {\n      sentences[i - 1] += ws[0]\n      sentences[i] = sentences[i].replace(startWhitespace, '')\n    }\n  }\n  return sentences\n}\nexport default splitSentences\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C;AACA;AACA;AACA,MAAMC,YAAY,GAAG,IAAI;AACzB,MAAMC,eAAe,GAAG,MAAM;AAE9B,MAAMC,cAAc,GAAG,SAAAA,CAAUC,IAAI,EAAEC,KAAK,EAAE;EAC5CD,IAAI,GAAGA,IAAI,IAAI,EAAE;EACjBA,IAAI,GAAGE,MAAM,CAACF,IAAI,CAAC;EACnB;EACA,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIH,YAAY,CAACM,IAAI,CAACH,IAAI,CAAC,KAAK,KAAK,EAAE;IAC1E,OAAO,EAAE;EACX;EACA;EACAA,IAAI,GAAGA,IAAI,CAACI,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EAChC;EACA,IAAIC,MAAM,GAAGb,WAAW,CAACQ,IAAI,CAAC;EAC9B;EACA,IAAIM,SAAS,GAAGb,WAAW,CAACY,MAAM,CAAC;EACnC;EACAC,SAAS,GAAGZ,UAAU,CAACY,SAAS,EAAEL,KAAK,CAAC;EACxC;EACAK,SAAS,GAAGX,UAAU,CAACW,SAAS,CAAC;EACjC;EACAA,SAAS,GAAGV,WAAW,CAACU,SAAS,CAAC;EAClC;EACA,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,CAACP,IAAI,CAAC;EACf;EACA;EACA;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACC,MAAM,EAAEC,CAAC,IAAI,CAAC,EAAE;IAC5C,IAAIC,EAAE,GAAGH,SAAS,CAACE,CAAC,CAAC,CAACE,KAAK,CAACZ,eAAe,CAAC;IAC5C,IAAIW,EAAE,KAAK,IAAI,EAAE;MACfH,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIC,EAAE,CAAC,CAAC,CAAC;MACzBH,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,CAAC,CAACJ,OAAO,CAACN,eAAe,EAAE,EAAE,CAAC;IAC1D;EACF;EACA,OAAOQ,SAAS;AAClB,CAAC;AACD,eAAeP,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}