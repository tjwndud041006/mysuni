{"ast":null,"code":"import toString from '../../_toString.js';\nimport { sequence, ones_mapping, tens_mapping } from './data.js';\n/**\n * turns an integer/float into.ber, like 'fifty-five'\n */\n\n//turn number into an array of magnitudes, like [[5, million], [2, hundred]]\nconst breakdown_magnitudes = function (num) {\n  let working = num;\n  let have = [];\n  sequence.forEach(a => {\n    if (num >= a[0]) {\n      let howmany = Math.floor(working / a[0]);\n      working -= howmany * a[0];\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany\n        });\n      }\n    }\n  });\n  return have;\n};\n\n//turn numbers from 100-0 into their text\nconst breakdown_hundred = function (num) {\n  let arr = [];\n  if (num > 100) {\n    return arr; //something bad happened..\n  }\n  for (let i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1];\n      arr.push(tens_mapping[i][0]);\n    }\n  }\n  //(hopefully) we should only have 20-0 now\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num]);\n  }\n  return arr;\n};\n\n/** print-out 'point eight nine'*/\nconst handle_decimal = num => {\n  const names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  let arr = [];\n  //parse it out like a string, because js math is such shit\n  let str = toString(num);\n  let decimal = str.match(/\\.([0-9]+)/);\n  if (!decimal || !decimal[0]) {\n    return arr;\n  }\n  arr.push('point');\n  let decimals = decimal[0].split('');\n  for (let i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]]);\n  }\n  return arr;\n};\n\n/** turns an integer into a textual number */\nconst toText = function (obj) {\n  let num = obj.num;\n  // handle zero, quickly\n  if (num === 0 || num === '0') {\n    return 'zero'; // no?\n  }\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    num = toString(num);\n  }\n  let arr = [];\n  //handle negative numbers\n  if (num < 0) {\n    arr.push('minus');\n    num = Math.abs(num);\n  }\n  //break-down into units, counts\n  let units = breakdown_magnitudes(num);\n  //build-up the string from its components\n  for (let i = 0; i < units.length; i++) {\n    let unit_name = units[i].unit;\n    if (unit_name === 'one') {\n      unit_name = '';\n      //put an 'and' in here\n      if (arr.length > 1) {\n        arr.push('and');\n      }\n    }\n    arr = arr.concat(breakdown_hundred(units[i].count));\n    arr.push(unit_name);\n  }\n  //also support decimals - 'point eight'\n  arr = arr.concat(handle_decimal(num));\n  //remove empties\n  arr = arr.filter(s => s);\n  if (arr.length === 0) {\n    arr[0] = '';\n  }\n  return arr.join(' ');\n};\nexport default toText;\n\n// console.log(to_text(-1000.8));","map":{"version":3,"names":["toString","sequence","ones_mapping","tens_mapping","breakdown_magnitudes","num","working","have","forEach","a","howmany","Math","floor","push","unit","count","breakdown_hundred","arr","i","length","handle_decimal","names","str","decimal","match","decimals","split","toText","obj","abs","units","unit_name","concat","filter","s","join"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/numbers/numbers/format/toText/index.js"],"sourcesContent":["import toString from '../../_toString.js'\nimport { sequence, ones_mapping, tens_mapping } from './data.js'\n/**\n * turns an integer/float into.ber, like 'fifty-five'\n */\n\n//turn number into an array of magnitudes, like [[5, million], [2, hundred]]\nconst breakdown_magnitudes = function (num) {\n  let working = num\n  let have = []\n  sequence.forEach(a => {\n    if (num >= a[0]) {\n      let howmany = Math.floor(working / a[0])\n      working -= howmany * a[0]\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany,\n        })\n      }\n    }\n  })\n  return have\n}\n\n//turn numbers from 100-0 into their text\nconst breakdown_hundred = function (num) {\n  let arr = []\n  if (num > 100) {\n    return arr //something bad happened..\n  }\n  for (let i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1]\n      arr.push(tens_mapping[i][0])\n    }\n  }\n  //(hopefully) we should only have 20-0 now\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num])\n  }\n  return arr\n}\n\n/** print-out 'point eight nine'*/\nconst handle_decimal = num => {\n  const names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  let arr = []\n  //parse it out like a string, because js math is such shit\n  let str = toString(num)\n  let decimal = str.match(/\\.([0-9]+)/)\n  if (!decimal || !decimal[0]) {\n    return arr\n  }\n  arr.push('point')\n  let decimals = decimal[0].split('')\n  for (let i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]])\n  }\n  return arr\n}\n\n/** turns an integer into a textual number */\nconst toText = function (obj) {\n  let num = obj.num\n  // handle zero, quickly\n  if (num === 0 || num === '0') {\n    return 'zero' // no?\n  }\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    num = toString(num)\n  }\n  let arr = []\n  //handle negative numbers\n  if (num < 0) {\n    arr.push('minus')\n    num = Math.abs(num)\n  }\n  //break-down into units, counts\n  let units = breakdown_magnitudes(num)\n  //build-up the string from its components\n  for (let i = 0; i < units.length; i++) {\n    let unit_name = units[i].unit\n    if (unit_name === 'one') {\n      unit_name = ''\n      //put an 'and' in here\n      if (arr.length > 1) {\n        arr.push('and')\n      }\n    }\n    arr = arr.concat(breakdown_hundred(units[i].count))\n    arr.push(unit_name)\n  }\n  //also support decimals - 'point eight'\n  arr = arr.concat(handle_decimal(num))\n  //remove empties\n  arr = arr.filter(s => s)\n  if (arr.length === 0) {\n    arr[0] = ''\n  }\n  return arr.join(' ')\n}\n\nexport default toText\n\n// console.log(to_text(-1000.8));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}