{"ast":null,"code":"import { findChained } from './lib.js';\n\n// only filter if we know a gender\n// ambiguous names like 'jamie smith' will refer to either he or she\nconst byGender = function (ppl, gender) {\n  if (gender === 'm') {\n    return ppl.filter(m => !m.presumedFemale().found);\n  } else if (gender === 'f') {\n    return ppl.filter(m => !m.presumedMale().found);\n  }\n  return ppl;\n};\nconst getPerson = function (s, gender) {\n  // look at current sentence\n  let people = s.people();\n  people = byGender(people, gender);\n  if (people.found) {\n    return people.last();\n  }\n  // non-named people, like 'the cowboy'\n  people = s.nouns('#Actor');\n  if (people.found) {\n    return people.last();\n  }\n  // existing pronouns\n  if (gender === 'f') {\n    return findChained('(she|her|hers)', s);\n  }\n  if (gender === 'm') {\n    return findChained('(he|him|his)', s);\n  }\n  return s.none();\n};\nexport default getPerson;","map":{"version":3,"names":["findChained","byGender","ppl","gender","filter","m","presumedFemale","found","presumedMale","getPerson","s","people","last","nouns","none"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/coreference/compute/findPerson.js"],"sourcesContent":["import { findChained } from './lib.js'\n\n// only filter if we know a gender\n// ambiguous names like 'jamie smith' will refer to either he or she\nconst byGender = function (ppl, gender) {\n  if (gender === 'm') {\n    return ppl.filter(m => !m.presumedFemale().found)\n  } else if (gender === 'f') {\n    return ppl.filter(m => !m.presumedMale().found)\n  }\n  return ppl\n}\n\n\nconst getPerson = function (s, gender) {\n  // look at current sentence\n  let people = s.people()\n  people = byGender(people, gender)\n  if (people.found) {\n    return people.last()\n  }\n  // non-named people, like 'the cowboy'\n  people = s.nouns('#Actor')\n  if (people.found) {\n    return people.last()\n  }\n  // existing pronouns\n  if (gender === 'f') {\n    return findChained('(she|her|hers)', s)\n  }\n  if (gender === 'm') {\n    return findChained('(he|him|his)', s)\n  }\n  return s.none()\n}\n\nexport default getPerson\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,UAAU;;AAEtC;AACA;AACA,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,GAAG,EAAEC,MAAM,EAAE;EACtC,IAAIA,MAAM,KAAK,GAAG,EAAE;IAClB,OAAOD,GAAG,CAACE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,cAAc,CAAC,CAAC,CAACC,KAAK,CAAC;EACnD,CAAC,MAAM,IAAIJ,MAAM,KAAK,GAAG,EAAE;IACzB,OAAOD,GAAG,CAACE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACG,YAAY,CAAC,CAAC,CAACD,KAAK,CAAC;EACjD;EACA,OAAOL,GAAG;AACZ,CAAC;AAGD,MAAMO,SAAS,GAAG,SAAAA,CAAUC,CAAC,EAAEP,MAAM,EAAE;EACrC;EACA,IAAIQ,MAAM,GAAGD,CAAC,CAACC,MAAM,CAAC,CAAC;EACvBA,MAAM,GAAGV,QAAQ,CAACU,MAAM,EAAER,MAAM,CAAC;EACjC,IAAIQ,MAAM,CAACJ,KAAK,EAAE;IAChB,OAAOI,MAAM,CAACC,IAAI,CAAC,CAAC;EACtB;EACA;EACAD,MAAM,GAAGD,CAAC,CAACG,KAAK,CAAC,QAAQ,CAAC;EAC1B,IAAIF,MAAM,CAACJ,KAAK,EAAE;IAChB,OAAOI,MAAM,CAACC,IAAI,CAAC,CAAC;EACtB;EACA;EACA,IAAIT,MAAM,KAAK,GAAG,EAAE;IAClB,OAAOH,WAAW,CAAC,gBAAgB,EAAEU,CAAC,CAAC;EACzC;EACA,IAAIP,MAAM,KAAK,GAAG,EAAE;IAClB,OAAOH,WAAW,CAAC,cAAc,EAAEU,CAAC,CAAC;EACvC;EACA,OAAOA,CAAC,CAACI,IAAI,CAAC,CAAC;AACjB,CAAC;AAED,eAAeL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}