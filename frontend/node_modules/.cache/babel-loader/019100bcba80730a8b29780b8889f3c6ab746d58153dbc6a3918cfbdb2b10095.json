{"ast":null,"code":"const isArray = arr => Object.prototype.toString.call(arr) === '[object Array]';\n\n// append a new document, somehow\nconst combineDocs = function (homeDocs, inputDocs) {\n  if (homeDocs.length > 0) {\n    // add a space\n    let end = homeDocs[homeDocs.length - 1];\n    let last = end[end.length - 1];\n    if (/ /.test(last.post) === false) {\n      last.post += ' ';\n    }\n  }\n  homeDocs = homeDocs.concat(inputDocs);\n  return homeDocs;\n};\nconst combineViews = function (home, input) {\n  // is it a view from the same document?\n  if (home.document === input.document) {\n    let ptrs = home.fullPointer.concat(input.fullPointer);\n    return home.toView(ptrs).compute('index');\n  }\n  // update n of new pointer, to end of our pointer\n  let ptrs = input.fullPointer;\n  ptrs.forEach(a => {\n    a[0] += home.document.length;\n  });\n  home.document = combineDocs(home.document, input.docs);\n  return home.all();\n};\nexport default {\n  // add string as new match/sentence\n  concat: function (input) {\n    // parse and splice-in new terms\n    if (typeof input === 'string') {\n      let more = this.fromText(input);\n      // easy concat\n      if (!this.found || !this.ptrs) {\n        this.document = this.document.concat(more.document);\n      } else {\n        // if we are in the middle, this is actually a splice operation\n        let ptrs = this.fullPointer;\n        let at = ptrs[ptrs.length - 1][0];\n        this.document.splice(at, 0, ...more.document);\n      }\n      // put the docs\n      return this.all().compute('index');\n    }\n    // plop some view objects together\n    if (typeof input === 'object' && input.isView) {\n      return combineViews(this, input);\n    }\n    // assume it's an array of terms\n    if (isArray(input)) {\n      let docs = combineDocs(this.document, input);\n      this.document = docs;\n      return this.all();\n    }\n    return this;\n  }\n};","map":{"version":3,"names":["isArray","arr","Object","prototype","toString","call","combineDocs","homeDocs","inputDocs","length","end","last","test","post","concat","combineViews","home","input","document","ptrs","fullPointer","toView","compute","forEach","a","docs","all","more","fromText","found","at","splice","isView"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/change/api/concat.js"],"sourcesContent":["const isArray = (arr) => Object.prototype.toString.call(arr) === '[object Array]'\n\n// append a new document, somehow\nconst combineDocs = function (homeDocs, inputDocs) {\n  if (homeDocs.length > 0) {\n    // add a space\n    let end = homeDocs[homeDocs.length - 1]\n    let last = end[end.length - 1]\n    if (/ /.test(last.post) === false) {\n      last.post += ' '\n    }\n  }\n  homeDocs = homeDocs.concat(inputDocs)\n  return homeDocs\n}\n\nconst combineViews = function (home, input) {\n  // is it a view from the same document?\n  if (home.document === input.document) {\n    let ptrs = home.fullPointer.concat(input.fullPointer)\n    return home.toView(ptrs).compute('index')\n  }\n  // update n of new pointer, to end of our pointer\n  let ptrs = input.fullPointer\n  ptrs.forEach(a => {\n    a[0] += home.document.length\n  })\n  home.document = combineDocs(home.document, input.docs)\n  return home.all()\n}\n\nexport default {\n  // add string as new match/sentence\n  concat: function (input) {\n    // parse and splice-in new terms\n    if (typeof input === 'string') {\n      let more = this.fromText(input)\n      // easy concat\n      if (!this.found || !this.ptrs) {\n        this.document = this.document.concat(more.document)\n      } else {\n        // if we are in the middle, this is actually a splice operation\n        let ptrs = this.fullPointer\n        let at = ptrs[ptrs.length - 1][0]\n        this.document.splice(at, 0, ...more.document)\n      }\n      // put the docs\n      return this.all().compute('index')\n    }\n    // plop some view objects together\n    if (typeof input === 'object' && input.isView) {\n      return combineViews(this, input)\n    }\n    // assume it's an array of terms\n    if (isArray(input)) {\n      let docs = combineDocs(this.document, input)\n      this.document = docs\n      return this.all()\n    }\n    return this\n  },\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}