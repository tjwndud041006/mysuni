{"ast":null,"code":"// verbose-mode tagger debuging\nconst log = (term, tag, reason = '') => {\n  const yellow = str => '\\x1b[33m\\x1b[3m' + str + '\\x1b[0m';\n  const i = str => '\\x1b[3m' + str + '\\x1b[0m';\n  let word = term.text || '[' + term.implicit + ']';\n  if (typeof tag !== 'string' && tag.length > 2) {\n    tag = tag.slice(0, 2).join(', #') + ' +'; //truncate the list of tags\n  }\n  tag = typeof tag !== 'string' ? tag.join(', #') : tag;\n  console.log(` ${yellow(word).padEnd(24)} \\x1b[32m→\\x1b[0m #${tag.padEnd(22)}  ${i(reason)}`); // eslint-disable-line\n};\n\n// a faster version than the user-facing one in ./methods\nconst fastTag = function (term, tag, reason) {\n  if (!tag || tag.length === 0) {\n    return;\n  }\n  if (term.frozen === true) {\n    return;\n  }\n  // some logging for debugging\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;\n  if (env && env.DEBUG_TAGS) {\n    log(term, tag, reason);\n  }\n  term.tags = term.tags || new Set();\n  if (typeof tag === 'string') {\n    term.tags.add(tag);\n  } else {\n    tag.forEach(tg => term.tags.add(tg));\n  }\n};\nexport default fastTag;","map":{"version":3,"names":["log","term","tag","reason","yellow","str","i","word","text","implicit","length","slice","join","console","padEnd","fastTag","frozen","env","process","self","DEBUG_TAGS","tags","Set","add","forEach","tg"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js"],"sourcesContent":["// verbose-mode tagger debuging\nconst log = (term, tag, reason = '') => {\n  const yellow = str => '\\x1b[33m\\x1b[3m' + str + '\\x1b[0m'\n  const i = str => '\\x1b[3m' + str + '\\x1b[0m'\n  let word = term.text || '[' + term.implicit + ']'\n  if (typeof tag !== 'string' && tag.length > 2) {\n    tag = tag.slice(0, 2).join(', #') + ' +' //truncate the list of tags\n  }\n  tag = typeof tag !== 'string' ? tag.join(', #') : tag\n  console.log(` ${yellow(word).padEnd(24)} \\x1b[32m→\\x1b[0m #${tag.padEnd(22)}  ${i(reason)}`) // eslint-disable-line\n}\n\n// a faster version than the user-facing one in ./methods\nconst fastTag = function (term, tag, reason) {\n  if (!tag || tag.length === 0) {\n    return\n  }\n  if (term.frozen === true) {\n    return\n  }\n  // some logging for debugging\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env\n  if (env && env.DEBUG_TAGS) {\n    log(term, tag, reason)\n  }\n  term.tags = term.tags || new Set()\n  if (typeof tag === 'string') {\n    term.tags.add(tag)\n  } else {\n    tag.forEach(tg => term.tags.add(tg))\n  }\n}\n\nexport default fastTag\n"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAGA,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,GAAG,EAAE,KAAK;EACtC,MAAMC,MAAM,GAAGC,GAAG,IAAI,iBAAiB,GAAGA,GAAG,GAAG,SAAS;EACzD,MAAMC,CAAC,GAAGD,GAAG,IAAI,SAAS,GAAGA,GAAG,GAAG,SAAS;EAC5C,IAAIE,IAAI,GAAGN,IAAI,CAACO,IAAI,IAAI,GAAG,GAAGP,IAAI,CAACQ,QAAQ,GAAG,GAAG;EACjD,IAAI,OAAOP,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACQ,MAAM,GAAG,CAAC,EAAE;IAC7CR,GAAG,GAAGA,GAAG,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,EAAC;EAC3C;EACAV,GAAG,GAAG,OAAOA,GAAG,KAAK,QAAQ,GAAGA,GAAG,CAACU,IAAI,CAAC,KAAK,CAAC,GAAGV,GAAG;EACrDW,OAAO,CAACb,GAAG,CAAC,IAAII,MAAM,CAACG,IAAI,CAAC,CAACO,MAAM,CAAC,EAAE,CAAC,sBAAsBZ,GAAG,CAACY,MAAM,CAAC,EAAE,CAAC,KAAKR,CAAC,CAACH,MAAM,CAAC,EAAE,CAAC,EAAC;AAC/F,CAAC;;AAED;AACA,MAAMY,OAAO,GAAG,SAAAA,CAAUd,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAE;EAC3C,IAAI,CAACD,GAAG,IAAIA,GAAG,CAACQ,MAAM,KAAK,CAAC,EAAE;IAC5B;EACF;EACA,IAAIT,IAAI,CAACe,MAAM,KAAK,IAAI,EAAE;IACxB;EACF;EACA;EACA,MAAMC,GAAG,GAAG,OAAOC,OAAO,KAAK,WAAW,IAAI,CAACA,OAAO,CAACD,GAAG,GAAGE,IAAI,CAACF,GAAG,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACD,GAAG;EACzF,IAAIA,GAAG,IAAIA,GAAG,CAACG,UAAU,EAAE;IACzBpB,GAAG,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;EACxB;EACAF,IAAI,CAACoB,IAAI,GAAGpB,IAAI,CAACoB,IAAI,IAAI,IAAIC,GAAG,CAAC,CAAC;EAClC,IAAI,OAAOpB,GAAG,KAAK,QAAQ,EAAE;IAC3BD,IAAI,CAACoB,IAAI,CAACE,GAAG,CAACrB,GAAG,CAAC;EACpB,CAAC,MAAM;IACLA,GAAG,CAACsB,OAAO,CAACC,EAAE,IAAIxB,IAAI,CAACoB,IAAI,CAACE,GAAG,CAACE,EAAE,CAAC,CAAC;EACtC;AACF,CAAC;AAED,eAAeV,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}