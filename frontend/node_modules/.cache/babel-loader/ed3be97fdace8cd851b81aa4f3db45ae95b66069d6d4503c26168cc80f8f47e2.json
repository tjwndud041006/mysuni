{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst word_matrix_1 = require(\"./data_structures/word_matrix\");\nconst parser_1 = require(\"./tools/parser\");\nconst preprocessor_1 = require(\"./tools/preprocessor\");\nconst stemmer_1 = require(\"./tools/stemmer\");\nconst stoplist_1 = require(\"./tools/stoplist\");\nfunction rake(params) {\n  const preprocessor = new preprocessor_1.default(params.delimiters);\n  const wordArray = preprocessor.process(params.corpus);\n  const stemmer = new stemmer_1.default(params.language);\n  const stopwords = stoplist_1.default(params.language);\n  const parser = new parser_1.default(stemmer, stopwords).process(wordArray);\n  const stemList = stemmer.getStems();\n  const matrix = new word_matrix_1.default(stemList);\n  for (const phrase of parser.phrases) {\n    matrix.process(phrase.stems);\n  }\n  const stemScores = matrix.calculateScores();\n  for (const phrase of parser.phrases) {\n    phrase.calculateScore(stemScores);\n  }\n  parser.joinDuplicates();\n  return parser.bestPhrases();\n}\nexports.rake = rake;","map":{"version":3,"names":["word_matrix_1","require","parser_1","preprocessor_1","stemmer_1","stoplist_1","rake","params","preprocessor","default","delimiters","wordArray","process","corpus","stemmer","language","stopwords","parser","stemList","getStems","matrix","phrase","phrases","stems","stemScores","calculateScores","calculateScore","joinDuplicates","bestPhrases","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/rake-js/src/lib/rake.ts"],"sourcesContent":["import { map } from 'lodash'\nimport Matrix from './data_structures/word_matrix'\nimport { languageName } from './tools/guess_language'\nimport Parser from './tools/parser'\nimport Preprocessor from './tools/preprocessor'\nimport Stemmer from './tools/stemmer'\nimport load from './tools/stoplist'\n\n// can be used to tweak the algorithm or to use it without the defaults\nexport interface IOptions {\n  delimiters: string[]\n  language: languageName\n}\n\n// the actual parameters for the RAKE algorithm\nexport interface IParameters extends IOptions {\n  corpus: string\n}\n\nexport function rake(params: IParameters): string[] {\n  // step 1: split the corpus text into a word array on `delimiters`\n  const preprocessor = new Preprocessor(params.delimiters)\n  const wordArray = preprocessor.process(params.corpus)\n\n  // step 2: loop through all words, generate ngrams/stems/phrases/metrics\n  const stemmer = new Stemmer(params.language)\n  const stopwords = load(params.language)\n  const parser = new Parser(stemmer, stopwords).process(wordArray)\n\n  // step 3: build a co-occurence matrix for all words (-> stems)\n  const stemList = stemmer.getStems()\n  const matrix = new Matrix(stemList)\n  for (const phrase of parser.phrases) {\n    matrix.process(phrase.stems)\n  }\n  const stemScores = matrix.calculateScores()\n\n  // step 4: examine the phrases with the best combined scores\n  for (const phrase of parser.phrases) {\n    phrase.calculateScore(stemScores)\n  }\n  parser.joinDuplicates()\n  return parser.bestPhrases()\n}\n"],"mappings":";;;;;AACA,MAAAA,aAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AAaA,SAAAK,KAAqBC,MAAmB;EAEtC,MAAMC,YAAY,GAAG,IAAIL,cAAA,CAAAM,OAAY,CAACF,MAAM,CAACG,UAAU,CAAC;EACxD,MAAMC,SAAS,GAAGH,YAAY,CAACI,OAAO,CAACL,MAAM,CAACM,MAAM,CAAC;EAGrD,MAAMC,OAAO,GAAG,IAAIV,SAAA,CAAAK,OAAO,CAACF,MAAM,CAACQ,QAAQ,CAAC;EAC5C,MAAMC,SAAS,GAAGX,UAAA,CAAAI,OAAI,CAACF,MAAM,CAACQ,QAAQ,CAAC;EACvC,MAAME,MAAM,GAAG,IAAIf,QAAA,CAAAO,OAAM,CAACK,OAAO,EAAEE,SAAS,CAAC,CAACJ,OAAO,CAACD,SAAS,CAAC;EAGhE,MAAMO,QAAQ,GAAGJ,OAAO,CAACK,QAAQ,EAAE;EACnC,MAAMC,MAAM,GAAG,IAAIpB,aAAA,CAAAS,OAAM,CAACS,QAAQ,CAAC;EACnC,KAAK,MAAMG,MAAM,IAAIJ,MAAM,CAACK,OAAO,EAAE;IACnCF,MAAM,CAACR,OAAO,CAACS,MAAM,CAACE,KAAK,CAAC;EAC9B;EACA,MAAMC,UAAU,GAAGJ,MAAM,CAACK,eAAe,EAAE;EAG3C,KAAK,MAAMJ,MAAM,IAAIJ,MAAM,CAACK,OAAO,EAAE;IACnCD,MAAM,CAACK,cAAc,CAACF,UAAU,CAAC;EACnC;EACAP,MAAM,CAACU,cAAc,EAAE;EACvB,OAAOV,MAAM,CAACW,WAAW,EAAE;AAC7B;AAxBAC,OAAA,CAAAvB,IAAA,GAAAA,IAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}