{"ast":null,"code":"//all punctuation marks, from https://en.wikipedia.org/wiki/Punctuation\n\n//we have slightly different rules for start/end - like #hashtags.\nconst isLetter = /\\p{Letter}/u;\nconst isNumber = /[\\p{Number}\\p{Currency_Symbol}]/u;\nconst hasAcronym = /^[a-z]\\.([a-z]\\.)+/i;\nconst chillin = /[sn]['’]$/;\nconst normalizePunctuation = function (str, model) {\n  // quick lookup for allowed pre/post punctuation\n  let {\n    prePunctuation,\n    postPunctuation,\n    emoticons\n  } = model.one;\n  let original = str;\n  let pre = '';\n  let post = '';\n  let chars = Array.from(str);\n\n  // punctuation-only words, like '<3'\n  if (emoticons.hasOwnProperty(str.trim())) {\n    return {\n      str: str.trim(),\n      pre,\n      post: ' '\n    }; //not great\n  }\n\n  // pop any punctuation off of the start\n  let len = chars.length;\n  for (let i = 0; i < len; i += 1) {\n    let c = chars[0];\n    // keep any declared chars\n    if (prePunctuation[c] === true) {\n      continue; //keep it\n    }\n    // keep '+' or '-' only before a number\n    if ((c === '+' || c === '-') && isNumber.test(chars[1])) {\n      break; //done\n    }\n    // '97 - year short-form\n    if (c === \"'\" && c.length === 3 && isNumber.test(chars[1])) {\n      break; //done\n    }\n    // start of word\n    if (isLetter.test(c) || isNumber.test(c)) {\n      break; //done\n    }\n    // punctuation\n    pre += chars.shift(); //keep going\n  }\n\n  // pop any punctuation off of the end\n  len = chars.length;\n  for (let i = 0; i < len; i += 1) {\n    let c = chars[chars.length - 1];\n    // keep any declared chars\n    if (postPunctuation[c] === true) {\n      continue; //keep it\n    }\n    // start of word\n    if (isLetter.test(c) || isNumber.test(c)) {\n      break; //done\n    }\n    // F.B.I.\n    if (c === '.' && hasAcronym.test(original) === true) {\n      continue; //keep it\n    }\n    //  keep s-apostrophe - \"flanders'\" or \"chillin'\"\n    if (c === \"'\" && chillin.test(original) === true) {\n      continue; //keep it\n    }\n    // punctuation\n    post = chars.pop() + post; //keep going\n  }\n  str = chars.join('');\n  //we went too far..\n  if (str === '') {\n    // do a very mild parse, and hope for the best.\n    original = original.replace(/ *$/, after => {\n      post = after || '';\n      return '';\n    });\n    str = original;\n    pre = '';\n  }\n  return {\n    str,\n    pre,\n    post\n  };\n};\nexport default normalizePunctuation;","map":{"version":3,"names":["isLetter","isNumber","hasAcronym","chillin","normalizePunctuation","str","model","prePunctuation","postPunctuation","emoticons","one","original","pre","post","chars","Array","from","hasOwnProperty","trim","len","length","i","c","test","shift","pop","join","replace","after"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/methods/03-whitespace/tokenize.js"],"sourcesContent":["//all punctuation marks, from https://en.wikipedia.org/wiki/Punctuation\n\n//we have slightly different rules for start/end - like #hashtags.\nconst isLetter = /\\p{Letter}/u\nconst isNumber = /[\\p{Number}\\p{Currency_Symbol}]/u\nconst hasAcronym = /^[a-z]\\.([a-z]\\.)+/i\nconst chillin = /[sn]['’]$/\n\nconst normalizePunctuation = function (str, model) {\n  // quick lookup for allowed pre/post punctuation\n  let { prePunctuation, postPunctuation, emoticons } = model.one\n  let original = str\n  let pre = ''\n  let post = ''\n  let chars = Array.from(str)\n\n  // punctuation-only words, like '<3'\n  if (emoticons.hasOwnProperty(str.trim())) {\n    return { str: str.trim(), pre, post: ' ' } //not great\n  }\n\n  // pop any punctuation off of the start\n  let len = chars.length\n  for (let i = 0; i < len; i += 1) {\n    let c = chars[0]\n    // keep any declared chars\n    if (prePunctuation[c] === true) {\n      continue//keep it\n    }\n    // keep '+' or '-' only before a number\n    if ((c === '+' || c === '-') && isNumber.test(chars[1])) {\n      break//done\n    }\n    // '97 - year short-form\n    if (c === \"'\" && c.length === 3 && isNumber.test(chars[1])) {\n      break//done\n    }\n    // start of word\n    if (isLetter.test(c) || isNumber.test(c)) {\n      break //done\n    }\n    // punctuation\n    pre += chars.shift()//keep going\n  }\n\n  // pop any punctuation off of the end\n  len = chars.length\n  for (let i = 0; i < len; i += 1) {\n    let c = chars[chars.length - 1]\n    // keep any declared chars\n    if (postPunctuation[c] === true) {\n      continue//keep it\n    }\n    // start of word\n    if (isLetter.test(c) || isNumber.test(c)) {\n      break //done\n    }\n    // F.B.I.\n    if (c === '.' && hasAcronym.test(original) === true) {\n      continue//keep it\n    }\n    //  keep s-apostrophe - \"flanders'\" or \"chillin'\"\n    if (c === \"'\" && chillin.test(original) === true) {\n      continue//keep it\n    }\n    // punctuation\n    post = chars.pop() + post//keep going\n  }\n  str = chars.join('')\n  //we went too far..\n  if (str === '') {\n    // do a very mild parse, and hope for the best.\n    original = original.replace(/ *$/, after => {\n      post = after || ''\n      return ''\n    })\n    str = original\n    pre = ''\n  }\n  return { str, pre, post }\n}\nexport default normalizePunctuation\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}