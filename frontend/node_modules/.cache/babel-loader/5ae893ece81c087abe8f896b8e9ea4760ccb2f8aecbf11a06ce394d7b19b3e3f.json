{"ast":null,"code":"const banList = {\n  that: true,\n  there: true,\n  let: true,\n  here: true,\n  everywhere: true\n};\nconst beforePossessive = {\n  in: true,\n  //in sunday's\n  by: true,\n  //by sunday's\n  for: true //for sunday's\n};\nlet adjLike = new Set(['too', 'also', 'enough', 'about']);\nlet nounLike = new Set(['is', 'are', 'did', 'were', 'could', 'should', 'must', 'had', 'have']);\nconst isPossessive = (terms, i) => {\n  let term = terms[i];\n  // these can't be possessive\n  if (banList.hasOwnProperty(term.machine || term.normal)) {\n    return false;\n  }\n  // if we already know it\n  if (term.tags.has('Possessive')) {\n    return true;\n  }\n  // who's\n  if (term.tags.has('QuestionWord')) {\n    return false;\n  }\n  // some pronouns are never possessive\n  if (term.normal === `he's` || term.normal === `she's`) {\n    return false;\n  }\n  //if end of sentence, it is possessive - \"was spencer's\"\n  let nextTerm = terms[i + 1];\n  if (!nextTerm) {\n    return true;\n  }\n  // \"it's a life\" vs \"run it's business\"\n  if (term.normal === `it's`) {\n    if (nextTerm.tags.has('#Noun')) {\n      return true;\n    }\n    return false;\n  }\n  // the sun's setting vs the artist's painting\n  // gerund = is,  noun = possessive\n  // (we are doing some dupe-work of the switch classifier here)\n  if (nextTerm.switch == 'Noun|Gerund') {\n    let next2 = terms[i + 2];\n    // the artist's painting.\n    if (!next2) {\n      if (term.tags.has('Actor') || term.tags.has('ProperNoun')) {\n        return true;\n      }\n      return false;\n    }\n    // the artist's painting is..\n    if (next2.tags.has('Copula')) {\n      return true;\n    }\n    // the cat's sleeping on ..\n    if (next2.normal === 'on' || next2.normal === 'in') {\n      return false;\n    }\n    return false;\n  }\n  //a gerund suggests 'is walking'\n  if (nextTerm.tags.has('Verb')) {\n    //fix 'jamie's bite'\n    if (nextTerm.tags.has('Infinitive')) {\n      return true;\n    }\n    //'jamaica's growing'\n    if (nextTerm.tags.has('Gerund')) {\n      return false;\n    }\n    //fix 'spencer's runs'\n    if (nextTerm.tags.has('PresentTense')) {\n      return true;\n    }\n    return false;\n  }\n\n  // john's nuts\n  if (nextTerm.switch === 'Adj|Noun') {\n    let twoTerm = terms[i + 2];\n    if (!twoTerm) {\n      return false; //adj\n    }\n    // john's nuts were..\n    if (nounLike.has(twoTerm.normal)) {\n      return true;\n    }\n    // john's nuts about..\n    if (adjLike.has(twoTerm.normal)) {\n      return false; //adj\n    }\n  }\n  //spencer's house\n  if (nextTerm.tags.has('Noun')) {\n    let nextStr = nextTerm.machine || nextTerm.normal;\n    // 'spencer's here'\n    if (nextStr === 'here' || nextStr === 'there' || nextStr === 'everywhere') {\n      return false;\n    }\n    // the chair's his\n    if (nextTerm.tags.has('Possessive')) {\n      return false;\n    }\n    // the captain's John\n    if (nextTerm.tags.has('ProperNoun') && !term.tags.has('ProperNoun')) {\n      return false;\n    }\n    return true;\n  }\n\n  // by sunday's final\n  if (terms[i - 1] && beforePossessive[terms[i - 1].normal] === true) {\n    return true;\n  }\n\n  // spencer's tired\n  if (nextTerm.tags.has('Adjective')) {\n    let twoTerm = terms[i + 2];\n    //the rocket's red\n    if (!twoTerm) {\n      return false;\n    }\n    // rocket's red nozzle\n    if (twoTerm.tags.has('Noun') && !twoTerm.tags.has('Pronoun')) {\n      //project's behind schedule\n      let str = nextTerm.normal;\n      if (str === 'above' || str === 'below' || str === 'behind') {\n        return false;\n      }\n      return true;\n    }\n    // rocket's red glare\n    if (twoTerm.switch === 'Noun|Verb') {\n      return true;\n    }\n    //othwerwise, an adjective suggests 'is good'\n    return false;\n  }\n  // baby's first steps\n  if (nextTerm.tags.has('Value')) {\n    return true;\n  }\n  // otherwise not possessive\n  return false;\n};\nexport default isPossessive;","map":{"version":3,"names":["banList","that","there","let","here","everywhere","beforePossessive","in","by","for","adjLike","Set","nounLike","isPossessive","terms","i","term","hasOwnProperty","machine","normal","tags","has","nextTerm","switch","next2","twoTerm","nextStr","str"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/contraction-two/compute/isPossessive.js"],"sourcesContent":["const banList = {\n  that: true,\n  there: true,\n  let: true,\n  here: true,\n  everywhere: true,\n}\n\nconst beforePossessive = {\n  in: true, //in sunday's\n  by: true, //by sunday's\n  for: true, //for sunday's\n}\nlet adjLike = new Set(['too', 'also', 'enough', 'about'])\nlet nounLike = new Set(['is', 'are', 'did', 'were', 'could', 'should', 'must', 'had', 'have'])\n\nconst isPossessive = (terms, i) => {\n  let term = terms[i]\n  // these can't be possessive\n  if (banList.hasOwnProperty(term.machine || term.normal)) {\n    return false\n  }\n  // if we already know it\n  if (term.tags.has('Possessive')) {\n    return true\n  }\n  // who's\n  if (term.tags.has('QuestionWord')) {\n    return false\n  }\n  // some pronouns are never possessive\n  if (term.normal === `he's` || term.normal === `she's`) {\n    return false\n  }\n  //if end of sentence, it is possessive - \"was spencer's\"\n  let nextTerm = terms[i + 1]\n  if (!nextTerm) {\n    return true\n  }\n  // \"it's a life\" vs \"run it's business\"\n  if (term.normal === `it's`) {\n    if (nextTerm.tags.has('#Noun')) {\n      return true\n    }\n    return false\n  }\n  // the sun's setting vs the artist's painting\n  // gerund = is,  noun = possessive\n  // (we are doing some dupe-work of the switch classifier here)\n  if (nextTerm.switch == 'Noun|Gerund') {\n    let next2 = terms[i + 2]\n    // the artist's painting.\n    if (!next2) {\n      if (term.tags.has('Actor') || term.tags.has('ProperNoun')) {\n        return true\n      }\n      return false\n    }\n    // the artist's painting is..\n    if (next2.tags.has('Copula')) {\n      return true\n    }\n    // the cat's sleeping on ..\n    if (next2.normal === 'on' || next2.normal === 'in') {\n      return false\n    }\n    return false\n  }\n  //a gerund suggests 'is walking'\n  if (nextTerm.tags.has('Verb')) {\n    //fix 'jamie's bite'\n    if (nextTerm.tags.has('Infinitive')) {\n      return true\n    }\n    //'jamaica's growing'\n    if (nextTerm.tags.has('Gerund')) {\n      return false\n    }\n    //fix 'spencer's runs'\n    if (nextTerm.tags.has('PresentTense')) {\n      return true\n    }\n    return false\n  }\n\n  // john's nuts\n  if (nextTerm.switch === 'Adj|Noun') {\n    let twoTerm = terms[i + 2]\n    if (!twoTerm) {\n      return false //adj\n    }\n    // john's nuts were..\n    if (nounLike.has(twoTerm.normal)) {\n      return true\n    }\n    // john's nuts about..\n    if (adjLike.has(twoTerm.normal)) {\n      return false //adj\n    }\n  }\n  //spencer's house\n  if (nextTerm.tags.has('Noun')) {\n    let nextStr = nextTerm.machine || nextTerm.normal\n    // 'spencer's here'\n    if (nextStr === 'here' || nextStr === 'there' || nextStr === 'everywhere') {\n      return false\n    }\n    // the chair's his\n    if (nextTerm.tags.has('Possessive')) {\n      return false\n    }\n    // the captain's John\n    if (nextTerm.tags.has('ProperNoun') && !term.tags.has('ProperNoun')) {\n      return false\n    }\n    return true\n  }\n\n  // by sunday's final\n  if (terms[i - 1] && beforePossessive[terms[i - 1].normal] === true) {\n    return true\n  }\n\n  // spencer's tired\n  if (nextTerm.tags.has('Adjective')) {\n    let twoTerm = terms[i + 2]\n    //the rocket's red\n    if (!twoTerm) {\n      return false\n    }\n    // rocket's red nozzle\n    if (twoTerm.tags.has('Noun') && !twoTerm.tags.has('Pronoun')) {\n      //project's behind schedule\n      let str = nextTerm.normal\n      if (str === 'above' || str === 'below' || str === 'behind') {\n        return false\n      }\n      return true\n    }\n    // rocket's red glare\n    if (twoTerm.switch === 'Noun|Verb') {\n      return true\n    }\n    //othwerwise, an adjective suggests 'is good'\n    return false\n  }\n  // baby's first steps\n  if (nextTerm.tags.has('Value')) {\n    return true\n  }\n  // otherwise not possessive\n  return false\n}\nexport default isPossessive\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}