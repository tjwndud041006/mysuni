{"ast":null,"code":"// return the nth elem of a doc\nconst apostropheS = /'s$/;\nconst find = function (doc) {\n  let m = doc.match('#Possessive+');\n  // expand it to include 'john smith's'\n  if (m.has('#Person')) {\n    m = m.growLeft('#Person+');\n  }\n  if (m.has('#Place')) {\n    m = m.growLeft('#Place+');\n  }\n  if (m.has('#Organization')) {\n    m = m.growLeft('#Organization+');\n  }\n  return m;\n};\nconst api = function (View) {\n  class Possessives extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Possessives';\n    }\n    strip() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(apostropheS, '');\n          term.normal = term.normal.replace(apostropheS, '');\n        });\n      });\n      return this;\n    }\n  }\n  View.prototype.possessives = function (n) {\n    let m = find(this);\n    m = m.getNth(n);\n    return new Possessives(m.document, m.pointer);\n  };\n};\nexport default api;","map":{"version":3,"names":["apostropheS","find","doc","m","match","has","growLeft","api","View","Possessives","constructor","document","pointer","groups","viewType","strip","docs","forEach","terms","term","text","replace","normal","prototype","possessives","n","getNth"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/misc/possessives/index.js"],"sourcesContent":["// return the nth elem of a doc\nconst apostropheS = /'s$/\n\nconst find = function (doc) {\n  let m = doc.match('#Possessive+')\n  // expand it to include 'john smith's'\n  if (m.has('#Person')) {\n    m = m.growLeft('#Person+')\n  }\n  if (m.has('#Place')) {\n    m = m.growLeft('#Place+')\n  }\n  if (m.has('#Organization')) {\n    m = m.growLeft('#Organization+')\n  }\n  return m\n}\n\n\nconst api = function (View) {\n\n  class Possessives extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Possessives'\n    }\n    strip() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(apostropheS, '')\n          term.normal = term.normal.replace(apostropheS, '')\n        })\n      })\n      return this\n    }\n  }\n\n  View.prototype.possessives = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Possessives(m.document, m.pointer)\n  }\n}\nexport default api\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,KAAK;AAEzB,MAAMC,IAAI,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC1B,IAAIC,CAAC,GAAGD,GAAG,CAACE,KAAK,CAAC,cAAc,CAAC;EACjC;EACA,IAAID,CAAC,CAACE,GAAG,CAAC,SAAS,CAAC,EAAE;IACpBF,CAAC,GAAGA,CAAC,CAACG,QAAQ,CAAC,UAAU,CAAC;EAC5B;EACA,IAAIH,CAAC,CAACE,GAAG,CAAC,QAAQ,CAAC,EAAE;IACnBF,CAAC,GAAGA,CAAC,CAACG,QAAQ,CAAC,SAAS,CAAC;EAC3B;EACA,IAAIH,CAAC,CAACE,GAAG,CAAC,eAAe,CAAC,EAAE;IAC1BF,CAAC,GAAGA,CAAC,CAACG,QAAQ,CAAC,gBAAgB,CAAC;EAClC;EACA,OAAOH,CAAC;AACV,CAAC;AAGD,MAAMI,GAAG,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAE1B,MAAMC,WAAW,SAASD,IAAI,CAAC;IAC7BE,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;MACrC,KAAK,CAACF,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;MAChC,IAAI,CAACC,QAAQ,GAAG,aAAa;IAC/B;IACAC,KAAKA,CAAA,EAAG;MACN,IAAI,CAACC,IAAI,CAACC,OAAO,CAACC,KAAK,IAAI;QACzBA,KAAK,CAACD,OAAO,CAACE,IAAI,IAAI;UACpBA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,CAACC,OAAO,CAACrB,WAAW,EAAE,EAAE,CAAC;UAC9CmB,IAAI,CAACG,MAAM,GAAGH,IAAI,CAACG,MAAM,CAACD,OAAO,CAACrB,WAAW,EAAE,EAAE,CAAC;QACpD,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAO,IAAI;IACb;EACF;EAEAQ,IAAI,CAACe,SAAS,CAACC,WAAW,GAAG,UAAUC,CAAC,EAAE;IACxC,IAAItB,CAAC,GAAGF,IAAI,CAAC,IAAI,CAAC;IAClBE,CAAC,GAAGA,CAAC,CAACuB,MAAM,CAACD,CAAC,CAAC;IACf,OAAO,IAAIhB,WAAW,CAACN,CAAC,CAACQ,QAAQ,EAAER,CAAC,CAACS,OAAO,CAAC;EAC/C,CAAC;AACH,CAAC;AACD,eAAeL,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}