{"ast":null,"code":"const findNouns = function (doc) {\n  let m = doc.clauses().match('<Noun>');\n  let commas = m.match('@hasComma');\n  // allow toronto, ontario\n  commas = commas.not('#Place');\n  if (commas.found) {\n    m = m.splitAfter(commas);\n  }\n  // yo there\n  m = m.splitOn('#Expression');\n  // these are individual nouns\n  m = m.splitOn('(he|she|we|you|they|i)');\n  // a client i saw\n  m = m.splitOn('(#Noun|#Adjective) [(he|him|she|it)]', 0);\n  // give him the best\n  m = m.splitOn('[(he|him|she|it)] (#Determiner|#Value)', 0);\n  // the noise the slide makes\n  m = m.splitBefore('#Noun [(the|a|an)] #Adjective? #Noun', 0);\n  // here spencer slept\n  m = m.splitOn('[(here|there)] #Noun', 0);\n  // put it there\n  m = m.splitOn('[#Noun] (here|there)', 0);\n  // its great purposes\n  // give [parents] [our money]\n  m = m.splitBefore('(our|my|their|your)');\n  // tell my friend that he\n  m = m.splitOn('#Noun [#Determiner]', 0);\n  // his excuses\n  // m = m.splitAfter('(his|hers|yours|ours|theirs)')\n  // m = m.not('^#Determiner')\n  //ensure there's actually a noun\n  m = m.if('#Noun');\n  return m;\n};\nexport default findNouns;","map":{"version":3,"names":["findNouns","doc","m","clauses","match","commas","not","found","splitAfter","splitOn","splitBefore","if"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/nouns/find.js"],"sourcesContent":["const findNouns = function (doc) {\n  let m = doc.clauses().match('<Noun>')\n  let commas = m.match('@hasComma')\n  // allow toronto, ontario\n  commas = commas.not('#Place')\n  if (commas.found) {\n    m = m.splitAfter(commas)\n  }\n  // yo there\n  m = m.splitOn('#Expression')\n  // these are individual nouns\n  m = m.splitOn('(he|she|we|you|they|i)')\n  // a client i saw\n  m = m.splitOn('(#Noun|#Adjective) [(he|him|she|it)]', 0)\n  // give him the best\n  m = m.splitOn('[(he|him|she|it)] (#Determiner|#Value)', 0)\n  // the noise the slide makes\n  m = m.splitBefore('#Noun [(the|a|an)] #Adjective? #Noun', 0)\n  // here spencer slept\n  m = m.splitOn('[(here|there)] #Noun', 0)\n  // put it there\n  m = m.splitOn('[#Noun] (here|there)', 0)\n  // its great purposes\n  // give [parents] [our money]\n  m = m.splitBefore('(our|my|their|your)')\n  // tell my friend that he\n  m = m.splitOn('#Noun [#Determiner]', 0)\n  // his excuses\n  // m = m.splitAfter('(his|hers|yours|ours|theirs)')\n  // m = m.not('^#Determiner')\n  //ensure there's actually a noun\n  m = m.if('#Noun')\n  return m\n}\nexport default findNouns\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC/B,IAAIC,CAAC,GAAGD,GAAG,CAACE,OAAO,CAAC,CAAC,CAACC,KAAK,CAAC,QAAQ,CAAC;EACrC,IAAIC,MAAM,GAAGH,CAAC,CAACE,KAAK,CAAC,WAAW,CAAC;EACjC;EACAC,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;EAC7B,IAAID,MAAM,CAACE,KAAK,EAAE;IAChBL,CAAC,GAAGA,CAAC,CAACM,UAAU,CAACH,MAAM,CAAC;EAC1B;EACA;EACAH,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,aAAa,CAAC;EAC5B;EACAP,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,wBAAwB,CAAC;EACvC;EACAP,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,sCAAsC,EAAE,CAAC,CAAC;EACxD;EACAP,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,wCAAwC,EAAE,CAAC,CAAC;EAC1D;EACAP,CAAC,GAAGA,CAAC,CAACQ,WAAW,CAAC,sCAAsC,EAAE,CAAC,CAAC;EAC5D;EACAR,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC;EACxC;EACAP,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC;EACxC;EACA;EACAP,CAAC,GAAGA,CAAC,CAACQ,WAAW,CAAC,qBAAqB,CAAC;EACxC;EACAR,CAAC,GAAGA,CAAC,CAACO,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC;EACvC;EACA;EACA;EACA;EACAP,CAAC,GAAGA,CAAC,CAACS,EAAE,CAAC,OAAO,CAAC;EACjB,OAAOT,CAAC;AACV,CAAC;AACD,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}