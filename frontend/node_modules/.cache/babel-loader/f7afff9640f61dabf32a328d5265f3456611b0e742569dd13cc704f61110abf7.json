{"ast":null,"code":"const rules = [\n// === Conjunction ===\n// that the houses\n{\n  match: '[that] #Determiner #Noun',\n  group: 0,\n  chunk: 'Pivot'\n},\n// estimated that\n{\n  match: '#PastTense [that]',\n  group: 0,\n  chunk: 'Pivot'\n},\n// so the\n{\n  match: '[so] #Determiner',\n  group: 0,\n  chunk: 'Pivot'\n},\n// === Adjective ===\n// was really nice\n{\n  match: '#Copula #Adverb+? [#Adjective]',\n  group: 0,\n  chunk: 'Adjective'\n},\n// was nice\n// { match: '#Copula [#Adjective]', group: 0, chunk: 'Adjective' },\n// nice and cool\n{\n  match: '#Adjective and #Adjective',\n  chunk: 'Adjective'\n},\n// really nice\n// { match: '#Adverb+ #Adjective', chunk: 'Adjective' },\n\n// === Verb ===\n// quickly and suddenly run\n{\n  match: '#Adverb+ and #Adverb #Verb',\n  chunk: 'Verb'\n},\n// sitting near\n{\n  match: '#Gerund #Adjective$',\n  chunk: 'Verb'\n},\n// going to walk\n{\n  match: '#Gerund to #Verb',\n  chunk: 'Verb'\n},\n// come and have a drink\n{\n  match: '#PresentTense and #PresentTense',\n  chunk: 'Verb'\n},\n// really not\n{\n  match: '#Adverb #Negative',\n  chunk: 'Verb'\n},\n// want to see\n{\n  match: '(want|wants|wanted) to #Infinitive',\n  chunk: 'Verb'\n},\n// walk ourselves\n{\n  match: '#Verb #Reflexive',\n  chunk: 'Verb'\n},\n// tell him the story\n// { match: '#PresentTense [#Pronoun] #Determiner', group: 0, chunk: 'Verb' },\n// tries to walk\n{\n  match: '#Verb [to] #Adverb? #Infinitive',\n  group: 0,\n  chunk: 'Verb'\n},\n// upon seeing\n{\n  match: '[#Preposition] #Gerund',\n  group: 0,\n  chunk: 'Verb'\n},\n// ensure that\n{\n  match: '#Infinitive [that] <Noun>',\n  group: 0,\n  chunk: 'Verb'\n},\n// === Noun ===\n// the brown fox\n// { match: '#Determiner #Adjective+ #Noun', chunk: 'Noun' },\n// the fox\n// { match: '(the|this) <Noun>', chunk: 'Noun' },\n// brown fox\n// { match: '#Adjective+ <Noun>', chunk: 'Noun' },\n// --- of ---\n// son of a gun\n{\n  match: '#Noun of #Determiner? #Noun',\n  chunk: 'Noun'\n},\n// 3 beautiful women\n{\n  match: '#Value+ #Adverb? #Adjective',\n  chunk: 'Noun'\n},\n// the last russian tsar\n{\n  match: 'the [#Adjective] #Noun',\n  chunk: 'Noun'\n},\n// breakfast in bed\n{\n  match: '#Singular in #Determiner? #Singular',\n  chunk: 'Noun'\n},\n// Some citizens in this Canadian capital\n{\n  match: '#Plural [in] #Determiner? #Noun',\n  group: 0,\n  chunk: 'Pivot'\n},\n// indoor and outdoor seating\n{\n  match: '#Noun and #Determiner? #Noun',\n  notIf: '(#Possessive|#Pronoun)',\n  chunk: 'Noun'\n}\n//  boys and girls\n// { match: '#Plural and #Determiner? #Plural', chunk: 'Noun' },\n// tomatoes and cheese\n// { match: '#Noun and #Determiner? #Noun', notIf: '#Pronoun', chunk: 'Noun' },\n// that is why\n// { match: '[that] (is|was)', group: 0, chunk: 'Noun' },\n];\nlet net = null;\nconst matcher = function (view, _, world) {\n  const {\n    methods\n  } = world;\n  net = net || methods.one.buildNet(rules, world);\n  view.sweep(net);\n};\nexport default matcher;","map":{"version":3,"names":["rules","match","group","chunk","notIf","net","matcher","view","_","world","methods","one","buildNet","sweep"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/chunker/compute/03-matcher.js"],"sourcesContent":["const rules = [\n  // === Conjunction ===\n  // that the houses\n  { match: '[that] #Determiner #Noun', group: 0, chunk: 'Pivot' },\n  // estimated that\n  { match: '#PastTense [that]', group: 0, chunk: 'Pivot' },\n  // so the\n  { match: '[so] #Determiner', group: 0, chunk: 'Pivot' },\n\n  // === Adjective ===\n  // was really nice\n  { match: '#Copula #Adverb+? [#Adjective]', group: 0, chunk: 'Adjective' },\n  // was nice\n  // { match: '#Copula [#Adjective]', group: 0, chunk: 'Adjective' },\n  // nice and cool\n  { match: '#Adjective and #Adjective', chunk: 'Adjective' },\n  // really nice\n  // { match: '#Adverb+ #Adjective', chunk: 'Adjective' },\n\n  // === Verb ===\n  // quickly and suddenly run\n  { match: '#Adverb+ and #Adverb #Verb', chunk: 'Verb' },\n  // sitting near\n  { match: '#Gerund #Adjective$', chunk: 'Verb' },\n  // going to walk\n  { match: '#Gerund to #Verb', chunk: 'Verb' },\n  // come and have a drink\n  { match: '#PresentTense and #PresentTense', chunk: 'Verb' },\n  // really not\n  { match: '#Adverb #Negative', chunk: 'Verb' },\n  // want to see\n  { match: '(want|wants|wanted) to #Infinitive', chunk: 'Verb' },\n  // walk ourselves\n  { match: '#Verb #Reflexive', chunk: 'Verb' },\n  // tell him the story\n  // { match: '#PresentTense [#Pronoun] #Determiner', group: 0, chunk: 'Verb' },\n  // tries to walk\n  { match: '#Verb [to] #Adverb? #Infinitive', group: 0, chunk: 'Verb' },\n  // upon seeing\n  { match: '[#Preposition] #Gerund', group: 0, chunk: 'Verb' },\n  // ensure that\n  { match: '#Infinitive [that] <Noun>', group: 0, chunk: 'Verb' },\n\n  // === Noun ===\n  // the brown fox\n  // { match: '#Determiner #Adjective+ #Noun', chunk: 'Noun' },\n  // the fox\n  // { match: '(the|this) <Noun>', chunk: 'Noun' },\n  // brown fox\n  // { match: '#Adjective+ <Noun>', chunk: 'Noun' },\n  // --- of ---\n  // son of a gun\n  { match: '#Noun of #Determiner? #Noun', chunk: 'Noun' },\n  // 3 beautiful women\n  { match: '#Value+ #Adverb? #Adjective', chunk: 'Noun' },\n  // the last russian tsar\n  { match: 'the [#Adjective] #Noun', chunk: 'Noun' },\n  // breakfast in bed\n  { match: '#Singular in #Determiner? #Singular', chunk: 'Noun' },\n  // Some citizens in this Canadian capital\n  { match: '#Plural [in] #Determiner? #Noun', group: 0, chunk: 'Pivot' },\n  // indoor and outdoor seating\n  { match: '#Noun and #Determiner? #Noun', notIf: '(#Possessive|#Pronoun)', chunk: 'Noun' },\n  //  boys and girls\n  // { match: '#Plural and #Determiner? #Plural', chunk: 'Noun' },\n  // tomatoes and cheese\n  // { match: '#Noun and #Determiner? #Noun', notIf: '#Pronoun', chunk: 'Noun' },\n  // that is why\n  // { match: '[that] (is|was)', group: 0, chunk: 'Noun' },\n]\n\nlet net = null\nconst matcher = function (view, _, world) {\n  const { methods } = world\n  net = net || methods.one.buildNet(rules, world)\n  view.sweep(net)\n}\nexport default matcher\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG;AACZ;AACA;AACA;EAAEC,KAAK,EAAE,0BAA0B;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAQ,CAAC;AAC/D;AACA;EAAEF,KAAK,EAAE,mBAAmB;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAQ,CAAC;AACxD;AACA;EAAEF,KAAK,EAAE,kBAAkB;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAQ,CAAC;AAEvD;AACA;AACA;EAAEF,KAAK,EAAE,gCAAgC;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAY,CAAC;AACzE;AACA;AACA;AACA;EAAEF,KAAK,EAAE,2BAA2B;EAAEE,KAAK,EAAE;AAAY,CAAC;AAC1D;AACA;;AAEA;AACA;AACA;EAAEF,KAAK,EAAE,4BAA4B;EAAEE,KAAK,EAAE;AAAO,CAAC;AACtD;AACA;EAAEF,KAAK,EAAE,qBAAqB;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC/C;AACA;EAAEF,KAAK,EAAE,kBAAkB;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC5C;AACA;EAAEF,KAAK,EAAE,iCAAiC;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC3D;AACA;EAAEF,KAAK,EAAE,mBAAmB;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC7C;AACA;EAAEF,KAAK,EAAE,oCAAoC;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC9D;AACA;EAAEF,KAAK,EAAE,kBAAkB;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC5C;AACA;AACA;AACA;EAAEF,KAAK,EAAE,iCAAiC;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAO,CAAC;AACrE;AACA;EAAEF,KAAK,EAAE,wBAAwB;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAO,CAAC;AAC5D;AACA;EAAEF,KAAK,EAAE,2BAA2B;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAO,CAAC;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAEF,KAAK,EAAE,6BAA6B;EAAEE,KAAK,EAAE;AAAO,CAAC;AACvD;AACA;EAAEF,KAAK,EAAE,6BAA6B;EAAEE,KAAK,EAAE;AAAO,CAAC;AACvD;AACA;EAAEF,KAAK,EAAE,wBAAwB;EAAEE,KAAK,EAAE;AAAO,CAAC;AAClD;AACA;EAAEF,KAAK,EAAE,qCAAqC;EAAEE,KAAK,EAAE;AAAO,CAAC;AAC/D;AACA;EAAEF,KAAK,EAAE,iCAAiC;EAAEC,KAAK,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAQ,CAAC;AACtE;AACA;EAAEF,KAAK,EAAE,8BAA8B;EAAEG,KAAK,EAAE,wBAAwB;EAAED,KAAK,EAAE;AAAO;AACxF;AACA;AACA;AACA;AACA;AACA;AAAA,CACD;AAED,IAAIE,GAAG,GAAG,IAAI;AACd,MAAMC,OAAO,GAAG,SAAAA,CAAUC,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAE;EACxC,MAAM;IAAEC;EAAQ,CAAC,GAAGD,KAAK;EACzBJ,GAAG,GAAGA,GAAG,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACZ,KAAK,EAAES,KAAK,CAAC;EAC/CF,IAAI,CAACM,KAAK,CAACR,GAAG,CAAC;AACjB,CAAC;AACD,eAAeC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}