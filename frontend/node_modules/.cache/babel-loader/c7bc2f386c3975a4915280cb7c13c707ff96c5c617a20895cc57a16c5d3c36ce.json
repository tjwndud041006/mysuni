{"ast":null,"code":"// split by periods, question marks, unicode ⁇, etc\nconst initSplit = /([.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049\\u3002]+\\s)/g;\n// merge these back into prev sentence\nconst splitsOnly = /^[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049\\u3002]+\\s$/;\nconst newLine = /((?:\\r?\\n|\\r)+)/; // Match different new-line formats\n\n// Start with a regex:\nconst basicSplit = function (text) {\n  let all = [];\n  //first, split by newline\n  let lines = text.split(newLine);\n  for (let i = 0; i < lines.length; i++) {\n    //split by period, question-mark, and exclamation-mark\n    let arr = lines[i].split(initSplit);\n    for (let o = 0; o < arr.length; o++) {\n      // merge 'foo' + '.'\n      if (arr[o + 1] && splitsOnly.test(arr[o + 1]) === true) {\n        arr[o] += arr[o + 1];\n        arr[o + 1] = '';\n      }\n      if (arr[o] !== '') {\n        all.push(arr[o]);\n      }\n    }\n  }\n  return all;\n};\nexport default basicSplit;","map":{"version":3,"names":["initSplit","splitsOnly","newLine","basicSplit","text","all","lines","split","i","length","arr","o","test","push"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/methods/01-sentences/01-simple-split.js"],"sourcesContent":["// split by periods, question marks, unicode ⁇, etc\nconst initSplit = /([.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049\\u3002]+\\s)/g\n// merge these back into prev sentence\nconst splitsOnly = /^[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049\\u3002]+\\s$/\nconst newLine = /((?:\\r?\\n|\\r)+)/ // Match different new-line formats\n\n// Start with a regex:\nconst basicSplit = function (text) {\n  let all = []\n  //first, split by newline\n  let lines = text.split(newLine)\n  for (let i = 0; i < lines.length; i++) {\n    //split by period, question-mark, and exclamation-mark\n    let arr = lines[i].split(initSplit)\n    for (let o = 0; o < arr.length; o++) {\n      // merge 'foo' + '.'\n      if (arr[o + 1] && splitsOnly.test(arr[o + 1]) === true) {\n        arr[o] += arr[o + 1]\n        arr[o + 1] = ''\n      }\n      if (arr[o] !== '') {\n        all.push(arr[o])\n      }\n    }\n  }\n  return all\n}\nexport default basicSplit\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,kDAAkD;AACpE;AACA,MAAMC,UAAU,GAAG,iDAAiD;AACpE,MAAMC,OAAO,GAAG,iBAAiB,EAAC;;AAElC;AACA,MAAMC,UAAU,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACjC,IAAIC,GAAG,GAAG,EAAE;EACZ;EACA,IAAIC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAACL,OAAO,CAAC;EAC/B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC;IACA,IAAIE,GAAG,GAAGJ,KAAK,CAACE,CAAC,CAAC,CAACD,KAAK,CAACP,SAAS,CAAC;IACnC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;MACnC;MACA,IAAID,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,IAAIV,UAAU,CAACW,IAAI,CAACF,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QACtDD,GAAG,CAACC,CAAC,CAAC,IAAID,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC;QACpBD,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;MACjB;MACA,IAAID,GAAG,CAACC,CAAC,CAAC,KAAK,EAAE,EAAE;QACjBN,GAAG,CAACQ,IAAI,CAACH,GAAG,CAACC,CAAC,CAAC,CAAC;MAClB;IACF;EACF;EACA,OAAON,GAAG;AACZ,CAAC;AACD,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}