{"ast":null,"code":"//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\nconst findModifiers = str => {\n  const mults = [{\n    reg: /^(minus|negative)[\\s-]/i,\n    mult: -1\n  }, {\n    reg: /^(a\\s)?half[\\s-](of\\s)?/i,\n    mult: 0.5\n  }\n  //  {\n  //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n  //   mult: 0.25\n  // }\n  ];\n  for (let i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, '')\n      };\n    }\n  }\n  return {\n    amount: 1,\n    str: str\n  };\n};\nexport default findModifiers;","map":{"version":3,"names":["findModifiers","str","mults","reg","mult","i","length","test","amount","replace"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/findModifiers.js"],"sourcesContent":["//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\nconst findModifiers = str => {\n  const mults = [\n    {\n      reg: /^(minus|negative)[\\s-]/i,\n      mult: -1,\n    },\n    {\n      reg: /^(a\\s)?half[\\s-](of\\s)?/i,\n      mult: 0.5,\n    },\n    //  {\n    //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n    //   mult: 0.25\n    // }\n  ]\n  for (let i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, ''),\n      }\n    }\n  }\n  return {\n    amount: 1,\n    str: str,\n  }\n}\n\nexport default findModifiers\n"],"mappings":"AAAA;AACA,MAAMA,aAAa,GAAGC,GAAG,IAAI;EAC3B,MAAMC,KAAK,GAAG,CACZ;IACEC,GAAG,EAAE,yBAAyB;IAC9BC,IAAI,EAAE,CAAC;EACT,CAAC,EACD;IACED,GAAG,EAAE,0BAA0B;IAC/BC,IAAI,EAAE;EACR;EACA;EACA;EACA;EACA;EAAA,CACD;EACD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIH,KAAK,CAACG,CAAC,CAAC,CAACF,GAAG,CAACI,IAAI,CAACN,GAAG,CAAC,KAAK,IAAI,EAAE;MACnC,OAAO;QACLO,MAAM,EAAEN,KAAK,CAACG,CAAC,CAAC,CAACD,IAAI;QACrBH,GAAG,EAAEA,GAAG,CAACQ,OAAO,CAACP,KAAK,CAACG,CAAC,CAAC,CAACF,GAAG,EAAE,EAAE;MACnC,CAAC;IACH;EACF;EACA,OAAO;IACLK,MAAM,EAAE,CAAC;IACTP,GAAG,EAAEA;EACP,CAAC;AACH,CAAC;AAED,eAAeD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}