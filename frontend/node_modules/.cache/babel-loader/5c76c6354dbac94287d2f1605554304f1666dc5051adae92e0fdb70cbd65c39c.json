{"ast":null,"code":"import doRules from './lib.js';\nconst s = 'ically';\nconst ical = new Set(['analyt' + s,\n//analytical\n'chem' + s,\n// chemical\n'class' + s,\n//classical\n'clin' + s,\n// clinical\n'crit' + s,\n// critical\n'ecolog' + s,\n// ecological\n'electr' + s,\n// electrical\n'empir' + s,\n// empirical\n'frant' + s,\n// frantical\n'grammat' + s,\n// grammatical\n'ident' + s,\n// identical\n'ideolog' + s,\n// ideological\n'log' + s,\n// logical\n'mag' + s,\n//magical\n'mathemat' + s,\n// mathematical\n'mechan' + s,\n// mechanical\n'med' + s,\n// medical\n'method' + s,\n// methodical\n'method' + s,\n// methodical\n'mus' + s,\n// musical\n'phys' + s,\n// physical\n'phys' + s,\n// physical\n'polit' + s,\n// political\n'pract' + s,\n// practical\n'rad' + s,\n//radical\n'satir' + s,\n// satirical\n'statist' + s,\n// statistical\n'techn' + s,\n// technical\n'technolog' + s,\n// technological\n'theoret' + s,\n// theoretical\n'typ' + s,\n// typical\n'vert' + s,\n// vertical\n'whims' + s // whimsical\n]);\nconst suffixes = [null, {}, {\n  'ly': ''\n}, {\n  'ily': 'y',\n  'bly': 'ble',\n  'ply': 'ple'\n}, {\n  'ally': 'al',\n  'rply': 'rp'\n}, {\n  'ually': 'ual',\n  'ially': 'ial',\n  'cally': 'cal',\n  'eally': 'eal',\n  'rally': 'ral',\n  'nally': 'nal',\n  'mally': 'mal',\n  'eeply': 'eep',\n  'eaply': 'eap'\n}, {\n  ically: 'ic'\n}];\nconst noAdj = new Set(['early', 'only', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'mostly', 'duly', 'unduly', 'especially', 'undoubtedly', 'conversely', 'namely', 'exceedingly', 'presumably', 'accordingly', 'overly', 'best', 'latter', 'little', 'long', 'low']);\n\n// exceptions to rules\nconst exceptions = {\n  wholly: 'whole',\n  fully: 'full',\n  truly: 'true',\n  gently: 'gentle',\n  singly: 'single',\n  customarily: 'customary',\n  idly: 'idle',\n  publically: 'public',\n  quickly: 'quick',\n  superbly: 'superb',\n  cynically: 'cynical',\n  well: 'good' // -?\n};\nconst toAdjective = function (str) {\n  if (!str.endsWith('ly')) {\n    return null;\n  }\n  // 'electronic' vs 'electronical'\n  if (ical.has(str)) {\n    return str.replace(/ically/, 'ical');\n  }\n  if (noAdj.has(str)) {\n    return null;\n  }\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str];\n  }\n  return doRules(str, suffixes) || str;\n};\nexport default toAdjective;\n\n// console.log(toAdjective('emphatically'))\n// console.log(toAdjective('usually'))\n// console.log(toAdjective('mechanically'))\n// console.log(toAdjective('vertically'))","map":{"version":3,"names":["doRules","s","ical","Set","suffixes","ically","noAdj","exceptions","wholly","fully","truly","gently","singly","customarily","idly","publically","quickly","superbly","cynically","well","toAdjective","str","endsWith","has","replace","hasOwnProperty"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/fromAdverb.js"],"sourcesContent":["import doRules from './lib.js'\n\nconst s = 'ically'\nconst ical = new Set([\n  'analyt' + s, //analytical\n  'chem' + s,// chemical\n  'class' + s, //classical\n  'clin' + s, // clinical\n  'crit' + s,// critical\n  'ecolog' + s,// ecological\n  'electr' + s,// electrical\n  'empir' + s, // empirical\n  'frant' + s, // frantical\n  'grammat' + s,// grammatical\n  'ident' + s, // identical\n  'ideolog' + s, // ideological\n  'log' + s, // logical\n  'mag' + s, //magical\n  'mathemat' + s,// mathematical\n  'mechan' + s,// mechanical\n  'med' + s,// medical\n  'method' + s, // methodical\n  'method' + s,// methodical\n  'mus' + s, // musical\n  'phys' + s, // physical\n  'phys' + s,// physical\n  'polit' + s,// political\n  'pract' + s,// practical\n  'rad' + s, //radical\n  'satir' + s, // satirical\n  'statist' + s, // statistical\n  'techn' + s,// technical\n  'technolog' + s, // technological\n  'theoret' + s,// theoretical\n  'typ' + s,// typical\n  'vert' + s,// vertical\n  'whims' + s,// whimsical\n])\n\nconst suffixes = [\n  null,\n  {},\n  { 'ly': '' },\n  {\n    'ily': 'y',\n    'bly': 'ble',\n    'ply': 'ple',\n  },\n  {\n    'ally': 'al',\n    'rply': 'rp',\n  },\n  {\n    'ually': 'ual',\n    'ially': 'ial',\n    'cally': 'cal',\n    'eally': 'eal',\n    'rally': 'ral',\n    'nally': 'nal',\n    'mally': 'mal',\n    'eeply': 'eep',\n    'eaply': 'eap',\n  },\n  {\n    ically: 'ic',\n  }\n]\n\nconst noAdj = new Set([\n  'early',\n  'only',\n  'hourly',\n  'daily',\n  'weekly',\n  'monthly',\n  'yearly',\n  'mostly',\n  'duly',\n  'unduly',\n  'especially',\n  'undoubtedly',\n  'conversely',\n  'namely',\n  'exceedingly',\n  'presumably',\n  'accordingly',\n  'overly',\n  'best',\n  'latter',\n  'little',\n  'long',\n  'low'\n])\n\n// exceptions to rules\nconst exceptions = {\n  wholly: 'whole',\n  fully: 'full',\n  truly: 'true',\n  gently: 'gentle',\n  singly: 'single',\n  customarily: 'customary',\n  idly: 'idle',\n  publically: 'public',\n  quickly: 'quick',\n  superbly: 'superb',\n  cynically: 'cynical',\n  well: 'good',// -?\n}\n\n\nconst toAdjective = function (str) {\n  if (!str.endsWith('ly')) {\n    return null\n  }\n  // 'electronic' vs 'electronical'\n  if (ical.has(str)) {\n    return str.replace(/ically/, 'ical')\n  }\n  if (noAdj.has(str)) {\n    return null\n  }\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str]\n  }\n  return doRules(str, suffixes) || str\n}\nexport default toAdjective\n\n// console.log(toAdjective('emphatically'))\n// console.log(toAdjective('usually'))\n// console.log(toAdjective('mechanically'))\n// console.log(toAdjective('vertically'))"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}