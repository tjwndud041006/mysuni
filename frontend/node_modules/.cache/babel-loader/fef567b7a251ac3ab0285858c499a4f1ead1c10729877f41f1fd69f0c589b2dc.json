{"ast":null,"code":"const hasDash = /[a-z0-9][-–—][a-z]/i;\n\n// match 're-do' -> ['re','do']\nconst splitHyphens = function (regs, world) {\n  let prefixes = world.model.one.prefixes;\n  for (let i = regs.length - 1; i >= 0; i -= 1) {\n    let reg = regs[i];\n    if (reg.word && hasDash.test(reg.word)) {\n      let words = reg.word.split(/[-–—]/g);\n      // don't split 're-cycle', etc\n      if (prefixes.hasOwnProperty(words[0])) {\n        continue;\n      }\n      words = words.filter(w => w).reverse();\n      regs.splice(i, 1);\n      words.forEach(w => {\n        let obj = Object.assign({}, reg);\n        obj.word = w;\n        regs.splice(i, 0, obj);\n      });\n    }\n  }\n  return regs;\n};\nexport default splitHyphens;","map":{"version":3,"names":["hasDash","splitHyphens","regs","world","prefixes","model","one","i","length","reg","word","test","words","split","hasOwnProperty","filter","w","reverse","splice","forEach","obj","Object","assign"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/match/methods/parseMatch/03-splitHyphens.js"],"sourcesContent":["const hasDash = /[a-z0-9][-–—][a-z]/i\n\n// match 're-do' -> ['re','do']\nconst splitHyphens = function (regs, world) {\n  let prefixes = world.model.one.prefixes\n  for (let i = regs.length - 1; i >= 0; i -= 1) {\n    let reg = regs[i]\n    if (reg.word && hasDash.test(reg.word)) {\n      let words = reg.word.split(/[-–—]/g)\n      // don't split 're-cycle', etc\n      if (prefixes.hasOwnProperty(words[0])) {\n        continue\n      }\n      words = words.filter(w => w).reverse()\n      regs.splice(i, 1)\n      words.forEach(w => {\n        let obj = Object.assign({}, reg)\n        obj.word = w\n        regs.splice(i, 0, obj)\n      })\n    }\n  }\n  return regs\n}\nexport default splitHyphens"],"mappings":"AAAA,MAAMA,OAAO,GAAG,qBAAqB;;AAErC;AACA,MAAMC,YAAY,GAAG,SAAAA,CAAUC,IAAI,EAAEC,KAAK,EAAE;EAC1C,IAAIC,QAAQ,GAAGD,KAAK,CAACE,KAAK,CAACC,GAAG,CAACF,QAAQ;EACvC,KAAK,IAAIG,CAAC,GAAGL,IAAI,CAACM,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC5C,IAAIE,GAAG,GAAGP,IAAI,CAACK,CAAC,CAAC;IACjB,IAAIE,GAAG,CAACC,IAAI,IAAIV,OAAO,CAACW,IAAI,CAACF,GAAG,CAACC,IAAI,CAAC,EAAE;MACtC,IAAIE,KAAK,GAAGH,GAAG,CAACC,IAAI,CAACG,KAAK,CAAC,QAAQ,CAAC;MACpC;MACA,IAAIT,QAAQ,CAACU,cAAc,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;QACrC;MACF;MACAA,KAAK,GAAGA,KAAK,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACtCf,IAAI,CAACgB,MAAM,CAACX,CAAC,EAAE,CAAC,CAAC;MACjBK,KAAK,CAACO,OAAO,CAACH,CAAC,IAAI;QACjB,IAAII,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEb,GAAG,CAAC;QAChCW,GAAG,CAACV,IAAI,GAAGM,CAAC;QACZd,IAAI,CAACgB,MAAM,CAACX,CAAC,EAAE,CAAC,EAAEa,GAAG,CAAC;MACxB,CAAC,CAAC;IACJ;EACF;EACA,OAAOlB,IAAI;AACb,CAAC;AACD,eAAeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}