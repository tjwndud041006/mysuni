{"ast":null,"code":"const toFuture = function (s) {\n  let verbs = s.verbs();\n  // translate the first verb, no-stress\n  let first = verbs.eq(0);\n  first.toFutureTense();\n  s = s.fullSentence();\n  verbs = s.verbs(); //re-do it\n  // verbs.debug()\n  // force agreement with any 2nd/3rd verbs:\n  if (verbs.length > 1) {\n    verbs = verbs.slice(1);\n    // which following-verbs should we also change?\n    let toChange = verbs.filter(vb => {\n      // remove any sorta infinitive - 'to engage'\n      if (vb.lookBehind('to$').found) {\n        return false;\n      }\n      // is watching\n      if (vb.has('#Copula #Gerund')) {\n        return true;\n      }\n      // keep -ing verbs\n      if (vb.has('#Gerund')) {\n        return false;\n      }\n      // he is green and he is friendly\n      if (vb.has('#Copula')) {\n        return true;\n      }\n      // 'he will see when he watches'\n      if (vb.has('#PresentTense') && !vb.has('#Infinitive') && vb.lookBefore('(he|she|it|that|which)$').found) {\n        return false;\n      }\n      return true;\n    });\n    // otherwise, change em too\n    if (toChange.found) {\n      toChange.forEach(m => {\n        //extra rules for 'is'\n        if (m.has('#Copula')) {\n          // when he was out..\n          m.match('was').replaceWith('is');\n          // when he is out\n          m.match('is').replaceWith('will be');\n          return;\n        }\n        // if (m.has('#PastTense')) {\n        //   m.toPresentTense()\n        //   return\n        // }\n        m.toInfinitive();\n      });\n    }\n  }\n  return s;\n};\nexport default toFuture;","map":{"version":3,"names":["toFuture","s","verbs","first","eq","toFutureTense","fullSentence","length","slice","toChange","filter","vb","lookBehind","found","has","lookBefore","forEach","m","match","replaceWith","toInfinitive"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/sentences/conjugate/toFuture.js"],"sourcesContent":["const toFuture = function (s) {\n  let verbs = s.verbs()\n  // translate the first verb, no-stress\n  let first = verbs.eq(0)\n  first.toFutureTense()\n  s = s.fullSentence()\n  verbs = s.verbs()//re-do it\n  // verbs.debug()\n  // force agreement with any 2nd/3rd verbs:\n  if (verbs.length > 1) {\n    verbs = verbs.slice(1)\n    // which following-verbs should we also change?\n    let toChange = verbs.filter((vb) => {\n      // remove any sorta infinitive - 'to engage'\n      if (vb.lookBehind('to$').found) {\n        return false\n      }\n      // is watching\n      if (vb.has('#Copula #Gerund')) {\n        return true\n      }\n      // keep -ing verbs\n      if (vb.has('#Gerund')) {\n        return false\n      }\n      // he is green and he is friendly\n      if (vb.has('#Copula')) {\n        return true\n      }\n      // 'he will see when he watches'\n      if (vb.has('#PresentTense') && !vb.has('#Infinitive') && vb.lookBefore('(he|she|it|that|which)$').found) {\n        return false\n      }\n      return true\n    })\n    // otherwise, change em too\n    if (toChange.found) {\n      toChange.forEach(m => {\n        //extra rules for 'is'\n        if (m.has('#Copula')) {\n          // when he was out..\n          m.match('was').replaceWith('is')\n          // when he is out\n          m.match('is').replaceWith('will be')\n          return\n        }\n        // if (m.has('#PastTense')) {\n        //   m.toPresentTense()\n        //   return\n        // }\n        m.toInfinitive()\n      })\n    }\n  }\n  return s\n}\nexport default toFuture"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAC5B,IAAIC,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC,CAAC;EACrB;EACA,IAAIC,KAAK,GAAGD,KAAK,CAACE,EAAE,CAAC,CAAC,CAAC;EACvBD,KAAK,CAACE,aAAa,CAAC,CAAC;EACrBJ,CAAC,GAAGA,CAAC,CAACK,YAAY,CAAC,CAAC;EACpBJ,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC,CAAC;EACjB;EACA;EACA,IAAIA,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;IACpBL,KAAK,GAAGA,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC;IACtB;IACA,IAAIC,QAAQ,GAAGP,KAAK,CAACQ,MAAM,CAAEC,EAAE,IAAK;MAClC;MACA,IAAIA,EAAE,CAACC,UAAU,CAAC,KAAK,CAAC,CAACC,KAAK,EAAE;QAC9B,OAAO,KAAK;MACd;MACA;MACA,IAAIF,EAAE,CAACG,GAAG,CAAC,iBAAiB,CAAC,EAAE;QAC7B,OAAO,IAAI;MACb;MACA;MACA,IAAIH,EAAE,CAACG,GAAG,CAAC,SAAS,CAAC,EAAE;QACrB,OAAO,KAAK;MACd;MACA;MACA,IAAIH,EAAE,CAACG,GAAG,CAAC,SAAS,CAAC,EAAE;QACrB,OAAO,IAAI;MACb;MACA;MACA,IAAIH,EAAE,CAACG,GAAG,CAAC,eAAe,CAAC,IAAI,CAACH,EAAE,CAACG,GAAG,CAAC,aAAa,CAAC,IAAIH,EAAE,CAACI,UAAU,CAAC,yBAAyB,CAAC,CAACF,KAAK,EAAE;QACvG,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC,CAAC;IACF;IACA,IAAIJ,QAAQ,CAACI,KAAK,EAAE;MAClBJ,QAAQ,CAACO,OAAO,CAACC,CAAC,IAAI;QACpB;QACA,IAAIA,CAAC,CAACH,GAAG,CAAC,SAAS,CAAC,EAAE;UACpB;UACAG,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,WAAW,CAAC,IAAI,CAAC;UAChC;UACAF,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,WAAW,CAAC,SAAS,CAAC;UACpC;QACF;QACA;QACA;QACA;QACA;QACAF,CAAC,CAACG,YAAY,CAAC,CAAC;MAClB,CAAC,CAAC;IACJ;EACF;EACA,OAAOnB,CAAC;AACV,CAAC;AACD,eAAeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}