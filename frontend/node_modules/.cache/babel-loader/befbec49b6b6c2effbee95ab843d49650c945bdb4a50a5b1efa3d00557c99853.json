{"ast":null,"code":"import generate from './find/00-generate.js';\nimport consider from './find/01-consider.js';\nconst findRules = function (pairs, finished, opts) {\n  let pending = pairs.slice(0);\n  let rules = {};\n  // small rules first\n  for (let peek = 0; peek < 6; peek += 1) {\n    for (let i = 0; i < pending.length; i += 1) {\n      let rule = generate(pending[i], peek);\n      let result = consider(rule, pending, opts);\n      // did it do okay?\n      if (result.rule && result.percent > opts.threshold && result.count > opts.min) {\n        // ensure it does not interfere with existing pairs\n        let res2 = consider(rule, finished, opts);\n        if (res2.percent < 100) {\n          continue;\n        }\n\n        // add it to our rules\n        rules[rule.from] = rule.to;\n        // update pending/finished lists\n        pending = pending.filter(p => {\n          if (result.clear.has(p[0])) {\n            finished.push(p);\n            return false;\n          }\n          return true;\n        });\n      }\n    }\n  }\n  return {\n    rules,\n    pending,\n    finished\n  };\n};\nexport default findRules;","map":{"version":3,"names":["generate","consider","findRules","pairs","finished","opts","pending","slice","rules","peek","i","length","rule","result","percent","threshold","count","min","res2","from","to","filter","p","clear","has","push"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/suffix-thumb/src/learn/01-findRules.js"],"sourcesContent":["import generate from './find/00-generate.js'\nimport consider from './find/01-consider.js'\n\nconst findRules = function (pairs, finished, opts) {\n  let pending = pairs.slice(0)\n  let rules = {}\n  // small rules first\n  for (let peek = 0; peek < 6; peek += 1) {\n    for (let i = 0; i < pending.length; i += 1) {\n      let rule = generate(pending[i], peek)\n      let result = consider(rule, pending, opts)\n      // did it do okay?\n      if (result.rule && result.percent > opts.threshold && result.count > opts.min) {\n        // ensure it does not interfere with existing pairs\n        let res2 = consider(rule, finished, opts)\n        if (res2.percent < 100) {\n          continue\n        }\n\n        // add it to our rules\n        rules[rule.from] = rule.to\n        // update pending/finished lists\n        pending = pending.filter(p => {\n          if (result.clear.has(p[0])) {\n            finished.push(p)\n            return false\n          }\n          return true\n        })\n      }\n    }\n  }\n  return { rules, pending, finished }\n}\nexport default findRules"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAE5C,MAAMC,SAAS,GAAG,SAAAA,CAAUC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACjD,IAAIC,OAAO,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC;EAC5B,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd;EACA,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,CAAC,EAAE;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC1C,IAAIE,IAAI,GAAGZ,QAAQ,CAACM,OAAO,CAACI,CAAC,CAAC,EAAED,IAAI,CAAC;MACrC,IAAII,MAAM,GAAGZ,QAAQ,CAACW,IAAI,EAAEN,OAAO,EAAED,IAAI,CAAC;MAC1C;MACA,IAAIQ,MAAM,CAACD,IAAI,IAAIC,MAAM,CAACC,OAAO,GAAGT,IAAI,CAACU,SAAS,IAAIF,MAAM,CAACG,KAAK,GAAGX,IAAI,CAACY,GAAG,EAAE;QAC7E;QACA,IAAIC,IAAI,GAAGjB,QAAQ,CAACW,IAAI,EAAER,QAAQ,EAAEC,IAAI,CAAC;QACzC,IAAIa,IAAI,CAACJ,OAAO,GAAG,GAAG,EAAE;UACtB;QACF;;QAEA;QACAN,KAAK,CAACI,IAAI,CAACO,IAAI,CAAC,GAAGP,IAAI,CAACQ,EAAE;QAC1B;QACAd,OAAO,GAAGA,OAAO,CAACe,MAAM,CAACC,CAAC,IAAI;UAC5B,IAAIT,MAAM,CAACU,KAAK,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1BlB,QAAQ,CAACqB,IAAI,CAACH,CAAC,CAAC;YAChB,OAAO,KAAK;UACd;UACA,OAAO,IAAI;QACb,CAAC,CAAC;MACJ;IACF;EACF;EACA,OAAO;IAAEd,KAAK;IAAEF,OAAO;IAAEF;EAAS,CAAC;AACrC,CAAC;AACD,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}