{"ast":null,"code":"/** return anything tagged as a phone number */\nconst phoneNumbers = function (n) {\n  let m = this.splitAfter('@hasComma');\n  m = m.match('#PhoneNumber+');\n  m = m.getNth(n);\n  return m;\n};\n\n// setup easy helper methods\nconst selections = [['hyphenated', '@hasHyphen .'], ['hashTags', '#HashTag'], ['emails', '#Email'], ['emoji', '#Emoji'], ['emoticons', '#Emoticon'], ['atMentions', '#AtMention'], ['urls', '#Url'],\n// ['pronouns', '#Pronoun'],\n['conjunctions', '#Conjunction'], ['prepositions', '#Preposition'], ['abbreviations', '#Abbreviation'], ['honorifics', '#Honorific']];\n\n// aliases\nlet aliases = [['emojis', 'emoji'], ['atmentions', 'atMentions']];\nconst addMethods = function (View) {\n  // add a list of new helper methods\n  selections.forEach(a => {\n    View.prototype[a[0]] = function (n) {\n      let m = this.match(a[1]);\n      return typeof n === 'number' ? m.get(n) : m;\n    };\n  });\n  View.prototype.phoneNumbers = phoneNumbers;\n  // add aliases\n  aliases.forEach(a => {\n    View.prototype[a[0]] = View.prototype[a[1]];\n  });\n};\nexport default addMethods;","map":{"version":3,"names":["phoneNumbers","n","m","splitAfter","match","getNth","selections","aliases","addMethods","View","forEach","a","prototype","get"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/misc/selections/index.js"],"sourcesContent":["/** return anything tagged as a phone number */\nconst phoneNumbers = function (n) {\n  let m = this.splitAfter('@hasComma')\n  m = m.match('#PhoneNumber+')\n  m = m.getNth(n)\n  return m\n}\n\n// setup easy helper methods\nconst selections = [\n  ['hyphenated', '@hasHyphen .'],\n  ['hashTags', '#HashTag'],\n  ['emails', '#Email'],\n  ['emoji', '#Emoji'],\n  ['emoticons', '#Emoticon'],\n  ['atMentions', '#AtMention'],\n  ['urls', '#Url'],\n  // ['pronouns', '#Pronoun'],\n  ['conjunctions', '#Conjunction'],\n  ['prepositions', '#Preposition'],\n  ['abbreviations', '#Abbreviation'],\n  ['honorifics', '#Honorific'],\n]\n\n// aliases\nlet aliases = [\n  ['emojis', 'emoji'],\n  ['atmentions', 'atMentions'],\n]\n\nconst addMethods = function (View) {\n  // add a list of new helper methods\n  selections.forEach(a => {\n    View.prototype[a[0]] = function (n) {\n      let m = this.match(a[1])\n      return typeof n === 'number' ? m.get(n) : m\n    }\n  })\n  View.prototype.phoneNumbers = phoneNumbers\n  // add aliases\n  aliases.forEach(a => {\n    View.prototype[a[0]] = View.prototype[a[1]]\n  })\n}\n\nexport default addMethods\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAChC,IAAIC,CAAC,GAAG,IAAI,CAACC,UAAU,CAAC,WAAW,CAAC;EACpCD,CAAC,GAAGA,CAAC,CAACE,KAAK,CAAC,eAAe,CAAC;EAC5BF,CAAC,GAAGA,CAAC,CAACG,MAAM,CAACJ,CAAC,CAAC;EACf,OAAOC,CAAC;AACV,CAAC;;AAED;AACA,MAAMI,UAAU,GAAG,CACjB,CAAC,YAAY,EAAE,cAAc,CAAC,EAC9B,CAAC,UAAU,EAAE,UAAU,CAAC,EACxB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EACpB,CAAC,OAAO,EAAE,QAAQ,CAAC,EACnB,CAAC,WAAW,EAAE,WAAW,CAAC,EAC1B,CAAC,YAAY,EAAE,YAAY,CAAC,EAC5B,CAAC,MAAM,EAAE,MAAM,CAAC;AAChB;AACA,CAAC,cAAc,EAAE,cAAc,CAAC,EAChC,CAAC,cAAc,EAAE,cAAc,CAAC,EAChC,CAAC,eAAe,EAAE,eAAe,CAAC,EAClC,CAAC,YAAY,EAAE,YAAY,CAAC,CAC7B;;AAED;AACA,IAAIC,OAAO,GAAG,CACZ,CAAC,QAAQ,EAAE,OAAO,CAAC,EACnB,CAAC,YAAY,EAAE,YAAY,CAAC,CAC7B;AAED,MAAMC,UAAU,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACjC;EACAH,UAAU,CAACI,OAAO,CAACC,CAAC,IAAI;IACtBF,IAAI,CAACG,SAAS,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,UAAUV,CAAC,EAAE;MAClC,IAAIC,CAAC,GAAG,IAAI,CAACE,KAAK,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC;MACxB,OAAO,OAAOV,CAAC,KAAK,QAAQ,GAAGC,CAAC,CAACW,GAAG,CAACZ,CAAC,CAAC,GAAGC,CAAC;IAC7C,CAAC;EACH,CAAC,CAAC;EACFO,IAAI,CAACG,SAAS,CAACZ,YAAY,GAAGA,YAAY;EAC1C;EACAO,OAAO,CAACG,OAAO,CAACC,CAAC,IAAI;IACnBF,IAAI,CAACG,SAAS,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,IAAI,CAACG,SAAS,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC;AACJ,CAAC;AAED,eAAeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}