{"ast":null,"code":"/*\nCopyright (c) 2011, Rob Ellis, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict';\n\nconst _ = require('underscore');\n\n/*\n Sentences Analyzer Class\n From http://www.writingcentre.uottawa.ca/hypergrammar/sntpurps.html\n\n Take a POS input and analyse it for\n  - Type of Sentense\n     - Interrogative\n       - Tag Questions\n       -\n     - Declarative\n     - Exclamatory\n     - Imperative\n\n  - Parts of a Sentense\n     - Subject\n     - Predicate\n\n  - Show Preposition Phrases\n*/\n\nclass SentenceAnalyzer {\n  constructor(pos, callbackFunction) {\n    this.posObj = pos;\n    this.senType = null;\n    callbackFunction(this);\n  }\n  part(callbackFunction) {\n    const subject = [];\n    const predicat = [];\n    let verbFound = false;\n    this.prepositionPhrases();\n    for (let i = 0; i < this.posObj.tags.length; i++) {\n      if (this.posObj.tags[i].pos === 'VB') {\n        if (i === 0) {\n          verbFound = true;\n        } else {\n          // We need to Test for any EX before the VB\n          if (this.posObj.tags[i - 1].pos !== 'EX') {\n            verbFound = true;\n          } else {\n            predicat.push(this.posObj.tags[i].token);\n          }\n        }\n      }\n\n      // Add Pronoun Phrase (pp) Or Subject Phrase (sp)\n      if (!verbFound) {\n        if (this.posObj.tags[i].pp !== true) {\n          this.posObj.tags[i].spos = 'SP';\n        }\n        subject.push(this.posObj.tags[i].token);\n      } else {\n        if (this.posObj.tags[i].pp !== true) {\n          this.posObj.tags[i].spos = 'PP';\n        }\n        predicat.push(this.posObj.tags[i].token);\n      }\n    }\n    if (subject.length === 0) {\n      this.posObj.tags.push({\n        token: 'You',\n        spos: 'SP',\n        pos: 'PRP',\n        added: true\n      });\n    }\n    callbackFunction(this);\n  }\n\n  // Takes POS and removes IN to NN or NNS\n  // Adds a PP for each prepositionPhrases\n  prepositionPhrases() {\n    let remove = false;\n    for (let i = 0; i < this.posObj.tags.length; i++) {\n      if (this.posObj.tags[i].pos.match('IN')) {\n        remove = true;\n      }\n      if (remove) {\n        this.posObj.tags[i].pp = true;\n      }\n      if (this.posObj.tags[i].pos.match('NN')) {\n        remove = false;\n      }\n    }\n  }\n  subjectToString() {\n    return this.posObj.tags.map(function (t) {\n      if (t.spos === 'SP' || t.spos === 'S') {\n        return t.token;\n      } else return null;\n    }).join(' ');\n  }\n  predicateToString() {\n    return this.posObj.tags.map(function (t) {\n      if (t.spos === 'PP' || t.spos === 'P') {\n        return t.token;\n      } else return null;\n    }).join(' ');\n  }\n  implicitYou() {\n    for (let i = 0; i < this.posObj.tags.length; i++) {\n      if (this.posObj.tags[i].added) {\n        return true;\n      }\n    }\n    return false;\n  }\n  toString() {\n    return this.posObj.tags.map(function (t) {\n      return t.token;\n    }).join(' ');\n  }\n\n  // This is quick and incomplete.\n  type(cbf) {\n    const callbackFunction = cbf || false;\n\n    // Check for implicit you before popping a tag.\n    const implicitYou = this.implicitYou();\n\n    // FIXME - punct seems useless\n    let lastElement = this.posObj.punct();\n    // console.log(lastElement)\n    lastElement = lastElement.length !== 0 ? lastElement.pop() : this.posObj.tags.pop();\n    // console.log(lastElement)\n\n    if (lastElement.pos !== '.') {\n      if (implicitYou) {\n        this.senType = 'COMMAND';\n      } else if (_.contains(['WDT', 'WP', 'WP$', 'WRB'], this.posObj.tags[0].pos)) {\n        // Sentences that start with: who, what where when why and how, then they are questions\n        this.senType = 'INTERROGATIVE';\n      } else if (_.contains(['PRP'], lastElement.pos)) {\n        // Sentences that end in a Personal pronoun are most likely questions\n        // eg. We should run away, should we [?]\n        // eg. You want to see that again, do you [?]\n        this.senType = 'INTERROGATIVE';\n      } else {\n        this.senType = 'UNKNOWN';\n      }\n    } else {\n      switch (lastElement.token) {\n        case '?':\n          this.senType = 'INTERROGATIVE';\n          break;\n        case '!':\n          this.senType = implicitYou ? 'COMMAND' : 'EXCLAMATORY';\n          break;\n        case '.':\n          this.senType = implicitYou ? 'COMMAND' : 'DECLARATIVE';\n          break;\n      }\n    }\n    if (callbackFunction && _.isFunction(callbackFunction)) {\n      callbackFunction(this);\n    } else {\n      return this.senType;\n    }\n  }\n}\nmodule.exports = SentenceAnalyzer;","map":{"version":3,"names":["_","require","SentenceAnalyzer","constructor","pos","callbackFunction","posObj","senType","part","subject","predicat","verbFound","prepositionPhrases","i","tags","length","push","token","pp","spos","added","remove","match","subjectToString","map","t","join","predicateToString","implicitYou","toString","type","cbf","lastElement","punct","pop","contains","isFunction","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/analyzers/sentence_analyzer.js"],"sourcesContent":["/*\nCopyright (c) 2011, Rob Ellis, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst _ = require('underscore')\n\n/*\n Sentences Analyzer Class\n From http://www.writingcentre.uottawa.ca/hypergrammar/sntpurps.html\n\n Take a POS input and analyse it for\n  - Type of Sentense\n     - Interrogative\n       - Tag Questions\n       -\n     - Declarative\n     - Exclamatory\n     - Imperative\n\n  - Parts of a Sentense\n     - Subject\n     - Predicate\n\n  - Show Preposition Phrases\n*/\n\nclass SentenceAnalyzer {\n  constructor (pos, callbackFunction) {\n    this.posObj = pos\n    this.senType = null\n    callbackFunction(this)\n  }\n\n  part (callbackFunction) {\n    const subject = []\n    const predicat = []\n    let verbFound = false\n\n    this.prepositionPhrases()\n\n    for (let i = 0; i < this.posObj.tags.length; i++) {\n      if (this.posObj.tags[i].pos === 'VB') {\n        if (i === 0) {\n          verbFound = true\n        } else {\n          // We need to Test for any EX before the VB\n          if (this.posObj.tags[i - 1].pos !== 'EX') {\n            verbFound = true\n          } else {\n            predicat.push(this.posObj.tags[i].token)\n          }\n        }\n      }\n\n      // Add Pronoun Phrase (pp) Or Subject Phrase (sp)\n      if (!verbFound) {\n        if (this.posObj.tags[i].pp !== true) { this.posObj.tags[i].spos = 'SP' }\n\n        subject.push(this.posObj.tags[i].token)\n      } else {\n        if (this.posObj.tags[i].pp !== true) { this.posObj.tags[i].spos = 'PP' }\n\n        predicat.push(this.posObj.tags[i].token)\n      }\n    }\n\n    if (subject.length === 0) {\n      this.posObj.tags.push({ token: 'You', spos: 'SP', pos: 'PRP', added: true })\n    }\n\n    callbackFunction(this)\n  }\n\n  // Takes POS and removes IN to NN or NNS\n  // Adds a PP for each prepositionPhrases\n  prepositionPhrases () {\n    let remove = false\n\n    for (let i = 0; i < this.posObj.tags.length; i++) {\n      if (this.posObj.tags[i].pos.match('IN')) {\n        remove = true\n      }\n\n      if (remove) {\n        this.posObj.tags[i].pp = true\n      }\n\n      if (this.posObj.tags[i].pos.match('NN')) {\n        remove = false\n      }\n    }\n  }\n\n  subjectToString () {\n    return this.posObj.tags.map(function (t) {\n      if (t.spos === 'SP' || t.spos === 'S') {\n        return t.token\n      } else return null\n    }).join(' ')\n  }\n\n  predicateToString () {\n    return this.posObj.tags.map(function (t) {\n      if (t.spos === 'PP' || t.spos === 'P') {\n        return t.token\n      } else return null\n    }).join(' ')\n  }\n\n  implicitYou () {\n    for (let i = 0; i < this.posObj.tags.length; i++) {\n      if (this.posObj.tags[i].added) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  toString () {\n    return this.posObj.tags.map(function (t) { return t.token }).join(' ')\n  }\n\n  // This is quick and incomplete.\n  type (cbf) {\n    const callbackFunction = cbf || false\n\n    // Check for implicit you before popping a tag.\n    const implicitYou = this.implicitYou()\n\n    // FIXME - punct seems useless\n    let lastElement = this.posObj.punct()\n    // console.log(lastElement)\n    lastElement = (lastElement.length !== 0) ? lastElement.pop() : this.posObj.tags.pop()\n    // console.log(lastElement)\n\n    if (lastElement.pos !== '.') {\n      if (implicitYou) {\n        this.senType = 'COMMAND'\n      } else if (_.contains(['WDT', 'WP', 'WP$', 'WRB'], this.posObj.tags[0].pos)) {\n        // Sentences that start with: who, what where when why and how, then they are questions\n        this.senType = 'INTERROGATIVE'\n      } else if (_.contains(['PRP'], lastElement.pos)) {\n        // Sentences that end in a Personal pronoun are most likely questions\n        // eg. We should run away, should we [?]\n        // eg. You want to see that again, do you [?]\n        this.senType = 'INTERROGATIVE'\n      } else {\n        this.senType = 'UNKNOWN'\n      }\n    } else {\n      switch (lastElement.token) {\n        case '?':\n          this.senType = 'INTERROGATIVE'\n          break\n        case '!':\n          this.senType = (implicitYou) ? 'COMMAND' : 'EXCLAMATORY'\n          break\n        case '.':\n          this.senType = (implicitYou) ? 'COMMAND' : 'DECLARATIVE'\n          break\n      }\n    }\n\n    if (callbackFunction && _.isFunction(callbackFunction)) {\n      callbackFunction(this)\n    } else {\n      return this.senType\n    }\n  }\n}\n\nmodule.exports = SentenceAnalyzer\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAEC,GAAG,EAAEC,gBAAgB,EAAE;IAClC,IAAI,CAACC,MAAM,GAAGF,GAAG;IACjB,IAAI,CAACG,OAAO,GAAG,IAAI;IACnBF,gBAAgB,CAAC,IAAI,CAAC;EACxB;EAEAG,IAAIA,CAAEH,gBAAgB,EAAE;IACtB,MAAMI,OAAO,GAAG,EAAE;IAClB,MAAMC,QAAQ,GAAG,EAAE;IACnB,IAAIC,SAAS,GAAG,KAAK;IAErB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAEzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACT,GAAG,KAAK,IAAI,EAAE;QACpC,IAAIS,CAAC,KAAK,CAAC,EAAE;UACXF,SAAS,GAAG,IAAI;QAClB,CAAC,MAAM;UACL;UACA,IAAI,IAAI,CAACL,MAAM,CAACQ,IAAI,CAACD,CAAC,GAAG,CAAC,CAAC,CAACT,GAAG,KAAK,IAAI,EAAE;YACxCO,SAAS,GAAG,IAAI;UAClB,CAAC,MAAM;YACLD,QAAQ,CAACM,IAAI,CAAC,IAAI,CAACV,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACI,KAAK,CAAC;UAC1C;QACF;MACF;;MAEA;MACA,IAAI,CAACN,SAAS,EAAE;QACd,IAAI,IAAI,CAACL,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACK,EAAE,KAAK,IAAI,EAAE;UAAE,IAAI,CAACZ,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACM,IAAI,GAAG,IAAI;QAAC;QAEvEV,OAAO,CAACO,IAAI,CAAC,IAAI,CAACV,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACI,KAAK,CAAC;MACzC,CAAC,MAAM;QACL,IAAI,IAAI,CAACX,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACK,EAAE,KAAK,IAAI,EAAE;UAAE,IAAI,CAACZ,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACM,IAAI,GAAG,IAAI;QAAC;QAEvET,QAAQ,CAACM,IAAI,CAAC,IAAI,CAACV,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACI,KAAK,CAAC;MAC1C;IACF;IAEA,IAAIR,OAAO,CAACM,MAAM,KAAK,CAAC,EAAE;MACxB,IAAI,CAACT,MAAM,CAACQ,IAAI,CAACE,IAAI,CAAC;QAAEC,KAAK,EAAE,KAAK;QAAEE,IAAI,EAAE,IAAI;QAAEf,GAAG,EAAE,KAAK;QAAEgB,KAAK,EAAE;MAAK,CAAC,CAAC;IAC9E;IAEAf,gBAAgB,CAAC,IAAI,CAAC;EACxB;;EAEA;EACA;EACAO,kBAAkBA,CAAA,EAAI;IACpB,IAAIS,MAAM,GAAG,KAAK;IAElB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACT,GAAG,CAACkB,KAAK,CAAC,IAAI,CAAC,EAAE;QACvCD,MAAM,GAAG,IAAI;MACf;MAEA,IAAIA,MAAM,EAAE;QACV,IAAI,CAACf,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACK,EAAE,GAAG,IAAI;MAC/B;MAEA,IAAI,IAAI,CAACZ,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACT,GAAG,CAACkB,KAAK,CAAC,IAAI,CAAC,EAAE;QACvCD,MAAM,GAAG,KAAK;MAChB;IACF;EACF;EAEAE,eAAeA,CAAA,EAAI;IACjB,OAAO,IAAI,CAACjB,MAAM,CAACQ,IAAI,CAACU,GAAG,CAAC,UAAUC,CAAC,EAAE;MACvC,IAAIA,CAAC,CAACN,IAAI,KAAK,IAAI,IAAIM,CAAC,CAACN,IAAI,KAAK,GAAG,EAAE;QACrC,OAAOM,CAAC,CAACR,KAAK;MAChB,CAAC,MAAM,OAAO,IAAI;IACpB,CAAC,CAAC,CAACS,IAAI,CAAC,GAAG,CAAC;EACd;EAEAC,iBAAiBA,CAAA,EAAI;IACnB,OAAO,IAAI,CAACrB,MAAM,CAACQ,IAAI,CAACU,GAAG,CAAC,UAAUC,CAAC,EAAE;MACvC,IAAIA,CAAC,CAACN,IAAI,KAAK,IAAI,IAAIM,CAAC,CAACN,IAAI,KAAK,GAAG,EAAE;QACrC,OAAOM,CAAC,CAACR,KAAK;MAChB,CAAC,MAAM,OAAO,IAAI;IACpB,CAAC,CAAC,CAACS,IAAI,CAAC,GAAG,CAAC;EACd;EAEAE,WAAWA,CAAA,EAAI;IACb,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACD,CAAC,CAAC,CAACO,KAAK,EAAE;QAC7B,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAK;EACd;EAEAS,QAAQA,CAAA,EAAI;IACV,OAAO,IAAI,CAACvB,MAAM,CAACQ,IAAI,CAACU,GAAG,CAAC,UAAUC,CAAC,EAAE;MAAE,OAAOA,CAAC,CAACR,KAAK;IAAC,CAAC,CAAC,CAACS,IAAI,CAAC,GAAG,CAAC;EACxE;;EAEA;EACAI,IAAIA,CAAEC,GAAG,EAAE;IACT,MAAM1B,gBAAgB,GAAG0B,GAAG,IAAI,KAAK;;IAErC;IACA,MAAMH,WAAW,GAAG,IAAI,CAACA,WAAW,CAAC,CAAC;;IAEtC;IACA,IAAII,WAAW,GAAG,IAAI,CAAC1B,MAAM,CAAC2B,KAAK,CAAC,CAAC;IACrC;IACAD,WAAW,GAAIA,WAAW,CAACjB,MAAM,KAAK,CAAC,GAAIiB,WAAW,CAACE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAACQ,IAAI,CAACoB,GAAG,CAAC,CAAC;IACrF;;IAEA,IAAIF,WAAW,CAAC5B,GAAG,KAAK,GAAG,EAAE;MAC3B,IAAIwB,WAAW,EAAE;QACf,IAAI,CAACrB,OAAO,GAAG,SAAS;MAC1B,CAAC,MAAM,IAAIP,CAAC,CAACmC,QAAQ,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC7B,MAAM,CAACQ,IAAI,CAAC,CAAC,CAAC,CAACV,GAAG,CAAC,EAAE;QAC3E;QACA,IAAI,CAACG,OAAO,GAAG,eAAe;MAChC,CAAC,MAAM,IAAIP,CAAC,CAACmC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAEH,WAAW,CAAC5B,GAAG,CAAC,EAAE;QAC/C;QACA;QACA;QACA,IAAI,CAACG,OAAO,GAAG,eAAe;MAChC,CAAC,MAAM;QACL,IAAI,CAACA,OAAO,GAAG,SAAS;MAC1B;IACF,CAAC,MAAM;MACL,QAAQyB,WAAW,CAACf,KAAK;QACvB,KAAK,GAAG;UACN,IAAI,CAACV,OAAO,GAAG,eAAe;UAC9B;QACF,KAAK,GAAG;UACN,IAAI,CAACA,OAAO,GAAIqB,WAAW,GAAI,SAAS,GAAG,aAAa;UACxD;QACF,KAAK,GAAG;UACN,IAAI,CAACrB,OAAO,GAAIqB,WAAW,GAAI,SAAS,GAAG,aAAa;UACxD;MACJ;IACF;IAEA,IAAIvB,gBAAgB,IAAIL,CAAC,CAACoC,UAAU,CAAC/B,gBAAgB,CAAC,EAAE;MACtDA,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACL,OAAO,IAAI,CAACE,OAAO;IACrB;EACF;AACF;AAEA8B,MAAM,CAACC,OAAO,GAAGpC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}