{"ast":null,"code":"const methods = {\n  /** add this punctuation or whitespace before each match: */\n  pre: function (str, concat) {\n    if (str === undefined && this.found) {\n      return this.docs[0][0].pre;\n    }\n    this.docs.forEach(terms => {\n      let term = terms[0];\n      if (concat === true) {\n        term.pre += str;\n      } else {\n        term.pre = str;\n      }\n    });\n    return this;\n  },\n  /** add this punctuation or whitespace after each match: */\n  post: function (str, concat) {\n    if (str === undefined) {\n      let last = this.docs[this.docs.length - 1];\n      return last[last.length - 1].post;\n    }\n    this.docs.forEach(terms => {\n      let term = terms[terms.length - 1];\n      if (concat === true) {\n        term.post += str;\n      } else {\n        term.post = str;\n      }\n    });\n    return this;\n  },\n  /** remove whitespace from start/end */\n  trim: function () {\n    if (!this.found) {\n      return this;\n    }\n    let docs = this.docs;\n    let start = docs[0][0];\n    start.pre = start.pre.trimStart();\n    let last = docs[docs.length - 1];\n    let end = last[last.length - 1];\n    end.post = end.post.trimEnd();\n    return this;\n  },\n  /** connect words with hyphen, and remove whitespace */\n  hyphenate: function () {\n    this.docs.forEach(terms => {\n      //remove whitespace\n      terms.forEach((t, i) => {\n        if (i !== 0) {\n          t.pre = '';\n        }\n        if (terms[i + 1]) {\n          t.post = '-';\n        }\n      });\n    });\n    return this;\n  },\n  /** remove hyphens between words, and set whitespace */\n  dehyphenate: function () {\n    const hasHyphen = /[-–—]/;\n    this.docs.forEach(terms => {\n      //remove whitespace\n      terms.forEach(t => {\n        if (hasHyphen.test(t.post)) {\n          t.post = ' ';\n        }\n      });\n    });\n    return this;\n  },\n  /** add quotations around these matches */\n  toQuotations: function (start, end) {\n    start = start || `\"`;\n    end = end || `\"`;\n    this.docs.forEach(terms => {\n      terms[0].pre = start + terms[0].pre;\n      let last = terms[terms.length - 1];\n      last.post = end + last.post;\n    });\n    return this;\n  },\n  /** add brackets around these matches */\n  toParentheses: function (start, end) {\n    start = start || `(`;\n    end = end || `)`;\n    this.docs.forEach(terms => {\n      terms[0].pre = start + terms[0].pre;\n      let last = terms[terms.length - 1];\n      last.post = end + last.post;\n    });\n    return this;\n  }\n};\n\n// aliases\nmethods.deHyphenate = methods.dehyphenate;\nmethods.toQuotation = methods.toQuotations;\nexport default methods;","map":{"version":3,"names":["methods","pre","str","concat","undefined","found","docs","forEach","terms","term","post","last","length","trim","start","trimStart","end","trimEnd","hyphenate","t","i","dehyphenate","hasHyphen","test","toQuotations","toParentheses","deHyphenate","toQuotation"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/change/api/whitespace.js"],"sourcesContent":["const methods = {\n  /** add this punctuation or whitespace before each match: */\n  pre: function (str, concat) {\n    if (str === undefined && this.found) {\n      return this.docs[0][0].pre\n    }\n    this.docs.forEach(terms => {\n      let term = terms[0]\n      if (concat === true) {\n        term.pre += str\n      } else {\n        term.pre = str\n      }\n    })\n    return this\n  },\n\n  /** add this punctuation or whitespace after each match: */\n  post: function (str, concat) {\n    if (str === undefined) {\n      let last = this.docs[this.docs.length - 1]\n      return last[last.length - 1].post\n    }\n    this.docs.forEach(terms => {\n      let term = terms[terms.length - 1]\n      if (concat === true) {\n        term.post += str\n      } else {\n        term.post = str\n      }\n    })\n    return this\n  },\n\n  /** remove whitespace from start/end */\n  trim: function () {\n    if (!this.found) {\n      return this\n    }\n    let docs = this.docs\n    let start = docs[0][0]\n    start.pre = start.pre.trimStart()\n    let last = docs[docs.length - 1]\n    let end = last[last.length - 1]\n    end.post = end.post.trimEnd()\n    return this\n  },\n\n  /** connect words with hyphen, and remove whitespace */\n  hyphenate: function () {\n    this.docs.forEach(terms => {\n      //remove whitespace\n      terms.forEach((t, i) => {\n        if (i !== 0) {\n          t.pre = ''\n        }\n        if (terms[i + 1]) {\n          t.post = '-'\n        }\n      })\n    })\n    return this\n  },\n\n  /** remove hyphens between words, and set whitespace */\n  dehyphenate: function () {\n    const hasHyphen = /[-–—]/\n    this.docs.forEach(terms => {\n      //remove whitespace\n      terms.forEach(t => {\n        if (hasHyphen.test(t.post)) {\n          t.post = ' '\n        }\n      })\n    })\n    return this\n  },\n\n  /** add quotations around these matches */\n  toQuotations: function (start, end) {\n    start = start || `\"`\n    end = end || `\"`\n    this.docs.forEach(terms => {\n      terms[0].pre = start + terms[0].pre\n      let last = terms[terms.length - 1]\n      last.post = end + last.post\n    })\n    return this\n  },\n\n  /** add brackets around these matches */\n  toParentheses: function (start, end) {\n    start = start || `(`\n    end = end || `)`\n    this.docs.forEach(terms => {\n      terms[0].pre = start + terms[0].pre\n      let last = terms[terms.length - 1]\n      last.post = end + last.post\n    })\n    return this\n  },\n}\n\n// aliases\nmethods.deHyphenate = methods.dehyphenate\nmethods.toQuotation = methods.toQuotations\n\nexport default methods\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}