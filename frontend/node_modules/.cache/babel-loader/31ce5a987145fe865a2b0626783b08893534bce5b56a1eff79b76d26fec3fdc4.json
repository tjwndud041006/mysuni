{"ast":null,"code":"/*\nCopyright (c) 2024, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst PostgresPlugin = require('./Postgres');\nconst MongoDBPlugin = require('./MongoDB');\nconst RedisPlugin = require('./Redis');\nconst MemcachedPlugin = require('./Memcached');\nconst FilePlugin = require('./File');\n\n// Enum for different types of storage backends that can be used\nconst STORAGE_TYPES = {\n  POSTGRES: 'POSTGRES',\n  REDIS: 'REDIS',\n  MONGODB: 'MONGODB',\n  MEMCACHED: 'MEMCACHED',\n  FILE: 'FILE'\n};\n\n// Standard behaviour of the backend is:\n// - Javascript in and out, so JSON.stringify and JSON.parse is done here.\n// - A key is returned after storing an object.\n// - The key is determined by the storage method, if possible: MongoDB and Postgres can do this.\n//   If not, a uuid is created.\n// - File-based storage is no different: a uuid is created and used as filename: uuid.json\nclass StorageBackend {\n  constructor(storageType, options) {\n    if (storageType) {\n      this.setStorageType(storageType, options);\n    }\n  }\n\n  // Sets the storage type. Valid values are POSTGRES, REDIS, MONGODB, MEMCACHED, FILE\n  async setStorageType(storageType) {\n    if (!storageType) {\n      throw new Error('No storage type specified');\n    }\n    if (this.storageType) {\n      throw new Error('Storage type already set');\n    }\n    this.storageType = storageType;\n    switch (storageType) {\n      case STORAGE_TYPES.POSTGRES:\n        this.client = new PostgresPlugin();\n        await this.client.configPostgres();\n        break;\n      case STORAGE_TYPES.REDIS:\n        this.client = new RedisPlugin();\n        break;\n      case STORAGE_TYPES.MONGODB:\n        this.client = new MongoDBPlugin();\n        break;\n      case STORAGE_TYPES.MEMCACHED:\n        this.client = new MemcachedPlugin();\n        break;\n      case STORAGE_TYPES.FILE:\n        this.client = new FilePlugin();\n        break;\n      default:\n        throw new Error('Invalid storage type');\n    }\n  }\n\n  // Stores value to the selected storage type.\n  async store(object) {\n    if (this.storageType && this.client) {\n      return await this.client.store(object);\n    } else {\n      throw new Error('Storage type or client not set');\n    }\n  }\n  async retrieve(key) {\n    if (this.storageType && this.client) {\n      return await this.client.retrieve(key);\n    } else {\n      throw new Error('Storage type or client not set');\n    }\n  }\n}\nmodule.exports = {\n  StorageBackend,\n  STORAGE_TYPES\n};","map":{"version":3,"names":["PostgresPlugin","require","MongoDBPlugin","RedisPlugin","MemcachedPlugin","FilePlugin","STORAGE_TYPES","POSTGRES","REDIS","MONGODB","MEMCACHED","FILE","StorageBackend","constructor","storageType","options","setStorageType","Error","client","configPostgres","store","object","retrieve","key","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/natural/lib/natural/util/storage/StorageBackend.js"],"sourcesContent":["/*\nCopyright (c) 2024, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst PostgresPlugin = require('./Postgres')\nconst MongoDBPlugin = require('./MongoDB')\nconst RedisPlugin = require('./Redis')\nconst MemcachedPlugin = require('./Memcached')\nconst FilePlugin = require('./File')\n\n// Enum for different types of storage backends that can be used\nconst STORAGE_TYPES = {\n  POSTGRES: 'POSTGRES',\n  REDIS: 'REDIS',\n  MONGODB: 'MONGODB',\n  MEMCACHED: 'MEMCACHED',\n  FILE: 'FILE'\n}\n\n// Standard behaviour of the backend is:\n// - Javascript in and out, so JSON.stringify and JSON.parse is done here.\n// - A key is returned after storing an object.\n// - The key is determined by the storage method, if possible: MongoDB and Postgres can do this.\n//   If not, a uuid is created.\n// - File-based storage is no different: a uuid is created and used as filename: uuid.json\nclass StorageBackend {\n  constructor (storageType, options) {\n    if (storageType) {\n      this.setStorageType(storageType, options)\n    }\n  }\n\n  // Sets the storage type. Valid values are POSTGRES, REDIS, MONGODB, MEMCACHED, FILE\n  async setStorageType (storageType) {\n    if (!storageType) {\n      throw new Error('No storage type specified')\n    }\n    if (this.storageType) {\n      throw new Error('Storage type already set')\n    }\n    this.storageType = storageType\n    switch (storageType) {\n      case STORAGE_TYPES.POSTGRES:\n        this.client = new PostgresPlugin()\n        await this.client.configPostgres()\n        break\n      case STORAGE_TYPES.REDIS:\n        this.client = new RedisPlugin()\n        break\n      case STORAGE_TYPES.MONGODB:\n        this.client = new MongoDBPlugin()\n        break\n      case STORAGE_TYPES.MEMCACHED:\n        this.client = new MemcachedPlugin()\n        break\n      case STORAGE_TYPES.FILE:\n        this.client = new FilePlugin()\n        break\n      default:\n        throw new Error('Invalid storage type')\n    }\n  }\n\n  // Stores value to the selected storage type.\n  async store (object) {\n    if (this.storageType && this.client) {\n      return await this.client.store(object)\n    } else {\n      throw new Error('Storage type or client not set')\n    }\n  }\n\n  async retrieve (key) {\n    if (this.storageType && this.client) {\n      return await this.client.retrieve(key)\n    } else {\n      throw new Error('Storage type or client not set')\n    }\n  }\n}\n\nmodule.exports = { StorageBackend, STORAGE_TYPES }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC5C,MAAMC,aAAa,GAAGD,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAME,WAAW,GAAGF,OAAO,CAAC,SAAS,CAAC;AACtC,MAAMG,eAAe,GAAGH,OAAO,CAAC,aAAa,CAAC;AAC9C,MAAMI,UAAU,GAAGJ,OAAO,CAAC,QAAQ,CAAC;;AAEpC;AACA,MAAMK,aAAa,GAAG;EACpBC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,WAAW;EACtBC,IAAI,EAAE;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAAEC,WAAW,EAAEC,OAAO,EAAE;IACjC,IAAID,WAAW,EAAE;MACf,IAAI,CAACE,cAAc,CAACF,WAAW,EAAEC,OAAO,CAAC;IAC3C;EACF;;EAEA;EACA,MAAMC,cAAcA,CAAEF,WAAW,EAAE;IACjC,IAAI,CAACA,WAAW,EAAE;MAChB,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IACA,IAAI,IAAI,CAACH,WAAW,EAAE;MACpB,MAAM,IAAIG,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,QAAQA,WAAW;MACjB,KAAKR,aAAa,CAACC,QAAQ;QACzB,IAAI,CAACW,MAAM,GAAG,IAAIlB,cAAc,CAAC,CAAC;QAClC,MAAM,IAAI,CAACkB,MAAM,CAACC,cAAc,CAAC,CAAC;QAClC;MACF,KAAKb,aAAa,CAACE,KAAK;QACtB,IAAI,CAACU,MAAM,GAAG,IAAIf,WAAW,CAAC,CAAC;QAC/B;MACF,KAAKG,aAAa,CAACG,OAAO;QACxB,IAAI,CAACS,MAAM,GAAG,IAAIhB,aAAa,CAAC,CAAC;QACjC;MACF,KAAKI,aAAa,CAACI,SAAS;QAC1B,IAAI,CAACQ,MAAM,GAAG,IAAId,eAAe,CAAC,CAAC;QACnC;MACF,KAAKE,aAAa,CAACK,IAAI;QACrB,IAAI,CAACO,MAAM,GAAG,IAAIb,UAAU,CAAC,CAAC;QAC9B;MACF;QACE,MAAM,IAAIY,KAAK,CAAC,sBAAsB,CAAC;IAC3C;EACF;;EAEA;EACA,MAAMG,KAAKA,CAAEC,MAAM,EAAE;IACnB,IAAI,IAAI,CAACP,WAAW,IAAI,IAAI,CAACI,MAAM,EAAE;MACnC,OAAO,MAAM,IAAI,CAACA,MAAM,CAACE,KAAK,CAACC,MAAM,CAAC;IACxC,CAAC,MAAM;MACL,MAAM,IAAIJ,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;EAEA,MAAMK,QAAQA,CAAEC,GAAG,EAAE;IACnB,IAAI,IAAI,CAACT,WAAW,IAAI,IAAI,CAACI,MAAM,EAAE;MACnC,OAAO,MAAM,IAAI,CAACA,MAAM,CAACI,QAAQ,CAACC,GAAG,CAAC;IACxC,CAAC,MAAM;MACL,MAAM,IAAIN,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;AACF;AAEAO,MAAM,CAACC,OAAO,GAAG;EAAEb,cAAc;EAAEN;AAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}