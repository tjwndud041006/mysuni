{"ast":null,"code":"const prefix = /^(under|over|mis|re|un|dis|semi|pre|post)-?/;\n// anti|non|extra|inter|intra|over\nconst allowPrefix = new Set(['Verb', 'Infinitive', 'PastTense', 'Gerund', 'PresentTense', 'Adjective', 'Participle']);\n\n// tag any words in our lexicon\nconst checkLexicon = function (terms, i, world) {\n  const {\n    model,\n    methods\n  } = world;\n  // const fastTag = methods.one.fastTag\n  const setTag = methods.one.setTag;\n  const {\n    lexicon\n  } = model.one;\n\n  // basic lexicon lookup\n  let t = terms[i];\n  let word = t.machine || t.normal;\n  // normal lexicon lookup\n  if (lexicon[word] !== undefined && lexicon.hasOwnProperty(word)) {\n    setTag([t], lexicon[word], world, false, '1-lexicon');\n    return true;\n  }\n  // lookup aliases in the lexicon\n  if (t.alias) {\n    let found = t.alias.find(str => lexicon.hasOwnProperty(str));\n    if (found) {\n      setTag([t], lexicon[found], world, false, '1-lexicon-alias');\n      return true;\n    }\n  }\n  // prefixing for verbs/adjectives\n  if (prefix.test(word) === true) {\n    let stem = word.replace(prefix, '');\n    if (lexicon.hasOwnProperty(stem) && stem.length > 3) {\n      // only allow prefixes for verbs/adjectives\n      if (allowPrefix.has(lexicon[stem])) {\n        // console.log('->', word, stem, lexicon[stem])\n        setTag([t], lexicon[stem], world, false, '1-lexicon-prefix');\n        return true;\n      }\n    }\n  }\n  return null;\n};\nexport default checkLexicon;","map":{"version":3,"names":["prefix","allowPrefix","Set","checkLexicon","terms","i","world","model","methods","setTag","one","lexicon","t","word","machine","normal","undefined","hasOwnProperty","alias","found","find","str","test","stem","replace","length","has"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/lexicon/compute/single-word.js"],"sourcesContent":["const prefix = /^(under|over|mis|re|un|dis|semi|pre|post)-?/\n// anti|non|extra|inter|intra|over\nconst allowPrefix = new Set(['Verb', 'Infinitive', 'PastTense', 'Gerund', 'PresentTense', 'Adjective', 'Participle'])\n\n// tag any words in our lexicon\nconst checkLexicon = function (terms, i, world) {\n  const { model, methods } = world\n  // const fastTag = methods.one.fastTag\n  const setTag = methods.one.setTag\n  const { lexicon } = model.one\n\n  // basic lexicon lookup\n  let t = terms[i]\n  let word = t.machine || t.normal\n  // normal lexicon lookup\n  if (lexicon[word] !== undefined && lexicon.hasOwnProperty(word)) {\n    setTag([t], lexicon[word], world, false, '1-lexicon')\n    return true\n  }\n  // lookup aliases in the lexicon\n  if (t.alias) {\n    let found = t.alias.find(str => lexicon.hasOwnProperty(str))\n    if (found) {\n      setTag([t], lexicon[found], world, false, '1-lexicon-alias')\n      return true\n    }\n  }\n  // prefixing for verbs/adjectives\n  if (prefix.test(word) === true) {\n    let stem = word.replace(prefix, '')\n    if (lexicon.hasOwnProperty(stem) && stem.length > 3) {\n      // only allow prefixes for verbs/adjectives\n      if (allowPrefix.has(lexicon[stem])) {\n        // console.log('->', word, stem, lexicon[stem])\n        setTag([t], lexicon[stem], world, false, '1-lexicon-prefix')\n        return true\n      }\n    }\n  }\n  return null\n}\nexport default checkLexicon\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,6CAA6C;AAC5D;AACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;;AAErH;AACA,MAAMC,YAAY,GAAG,SAAAA,CAAUC,KAAK,EAAEC,CAAC,EAAEC,KAAK,EAAE;EAC9C,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGF,KAAK;EAChC;EACA,MAAMG,MAAM,GAAGD,OAAO,CAACE,GAAG,CAACD,MAAM;EACjC,MAAM;IAAEE;EAAQ,CAAC,GAAGJ,KAAK,CAACG,GAAG;;EAE7B;EACA,IAAIE,CAAC,GAAGR,KAAK,CAACC,CAAC,CAAC;EAChB,IAAIQ,IAAI,GAAGD,CAAC,CAACE,OAAO,IAAIF,CAAC,CAACG,MAAM;EAChC;EACA,IAAIJ,OAAO,CAACE,IAAI,CAAC,KAAKG,SAAS,IAAIL,OAAO,CAACM,cAAc,CAACJ,IAAI,CAAC,EAAE;IAC/DJ,MAAM,CAAC,CAACG,CAAC,CAAC,EAAED,OAAO,CAACE,IAAI,CAAC,EAAEP,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC;IACrD,OAAO,IAAI;EACb;EACA;EACA,IAAIM,CAAC,CAACM,KAAK,EAAE;IACX,IAAIC,KAAK,GAAGP,CAAC,CAACM,KAAK,CAACE,IAAI,CAACC,GAAG,IAAIV,OAAO,CAACM,cAAc,CAACI,GAAG,CAAC,CAAC;IAC5D,IAAIF,KAAK,EAAE;MACTV,MAAM,CAAC,CAACG,CAAC,CAAC,EAAED,OAAO,CAACQ,KAAK,CAAC,EAAEb,KAAK,EAAE,KAAK,EAAE,iBAAiB,CAAC;MAC5D,OAAO,IAAI;IACb;EACF;EACA;EACA,IAAIN,MAAM,CAACsB,IAAI,CAACT,IAAI,CAAC,KAAK,IAAI,EAAE;IAC9B,IAAIU,IAAI,GAAGV,IAAI,CAACW,OAAO,CAACxB,MAAM,EAAE,EAAE,CAAC;IACnC,IAAIW,OAAO,CAACM,cAAc,CAACM,IAAI,CAAC,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;MACnD;MACA,IAAIxB,WAAW,CAACyB,GAAG,CAACf,OAAO,CAACY,IAAI,CAAC,CAAC,EAAE;QAClC;QACAd,MAAM,CAAC,CAACG,CAAC,CAAC,EAAED,OAAO,CAACY,IAAI,CAAC,EAAEjB,KAAK,EAAE,KAAK,EAAE,kBAAkB,CAAC;QAC5D,OAAO,IAAI;MACb;IACF;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD,eAAeH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}