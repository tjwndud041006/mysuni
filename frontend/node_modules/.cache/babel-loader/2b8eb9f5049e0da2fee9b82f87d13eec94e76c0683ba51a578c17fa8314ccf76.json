{"ast":null,"code":"// case logic\nconst isTitleCase = str => /^\\p{Lu}[\\p{Ll}'’]/u.test(str) || /^\\p{Lu}$/u.test(str);\nconst toTitleCase = str => str.replace(/^\\p{Ll}/u, x => x.toUpperCase());\nconst toLowerCase = str => str.replace(/^\\p{Lu}/u, x => x.toLowerCase());\n\n// splice an array into an array\nconst spliceArr = (parent, index, child) => {\n  // tag them as dirty\n  child.forEach(term => term.dirty = true);\n  if (parent) {\n    let args = [index, 0].concat(child);\n    Array.prototype.splice.apply(parent, args);\n  }\n  return parent;\n};\n\n// add a space at end, if required\nconst endSpace = function (terms) {\n  const hasSpace = / $/;\n  const hasDash = /[-–—]/;\n  let lastTerm = terms[terms.length - 1];\n  if (lastTerm && !hasSpace.test(lastTerm.post) && !hasDash.test(lastTerm.post)) {\n    lastTerm.post += ' ';\n  }\n};\n\n// sentence-ending punctuation should move in append\nconst movePunct = (source, end, needle) => {\n  const juicy = /[-.?!,;:)–—'\"]/g;\n  let wasLast = source[end - 1];\n  if (!wasLast) {\n    return;\n  }\n  let post = wasLast.post;\n  if (juicy.test(post)) {\n    let punct = post.match(juicy).join(''); //not perfect\n    let last = needle[needle.length - 1];\n    last.post = punct + last.post;\n    // remove it, from source\n    wasLast.post = wasLast.post.replace(juicy, '');\n  }\n};\nconst moveTitleCase = function (home, start, needle) {\n  let from = home[start];\n  // should we bother?\n  if (start !== 0 || !isTitleCase(from.text)) {\n    return;\n  }\n  // titlecase new first term\n  needle[0].text = toTitleCase(needle[0].text);\n  // should we un-titlecase the old word?\n  let old = home[start];\n  if (old.tags.has('ProperNoun') || old.tags.has('Acronym')) {\n    return;\n  }\n  if (isTitleCase(old.text) && old.text.length > 1) {\n    old.text = toLowerCase(old.text);\n  }\n};\n\n// put these words before the others\nconst cleanPrepend = function (home, ptr, needle, document) {\n  let [n, start, end] = ptr;\n  // introduce spaces appropriately\n  if (start === 0) {\n    // at start - need space in insert\n    endSpace(needle);\n  } else if (end === document[n].length) {\n    // at end - need space in home\n    endSpace(needle);\n  } else {\n    // in middle - need space in home and insert\n    endSpace(needle);\n    endSpace([home[ptr[1]]]);\n  }\n  moveTitleCase(home, start, needle);\n  // movePunct(home, end, needle)\n  spliceArr(home, start, needle);\n};\nconst cleanAppend = function (home, ptr, needle, document) {\n  let [n,, end] = ptr;\n  let total = (document[n] || []).length;\n  if (end < total) {\n    // are we in the middle?\n    // add trailing space on self\n    movePunct(home, end, needle);\n    endSpace(needle);\n  } else if (total === end) {\n    // are we at the end?\n    // add a space to predecessor\n    endSpace(home);\n    // very end, move period\n    movePunct(home, end, needle);\n    // is there another sentence after?\n    if (document[n + 1]) {\n      needle[needle.length - 1].post += ' ';\n    }\n  }\n  spliceArr(home, ptr[2], needle);\n  // set new endId\n  ptr[4] = needle[needle.length - 1].id;\n};\nexport { cleanPrepend, cleanAppend, spliceArr };","map":{"version":3,"names":["isTitleCase","str","test","toTitleCase","replace","x","toUpperCase","toLowerCase","spliceArr","parent","index","child","forEach","term","dirty","args","concat","Array","prototype","splice","apply","endSpace","terms","hasSpace","hasDash","lastTerm","length","post","movePunct","source","end","needle","juicy","wasLast","punct","match","join","last","moveTitleCase","home","start","from","text","old","tags","has","cleanPrepend","ptr","document","n","cleanAppend","total","id"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/change/api/lib/insert.js"],"sourcesContent":["// case logic\nconst isTitleCase = (str) => /^\\p{Lu}[\\p{Ll}'’]/u.test(str) || /^\\p{Lu}$/u.test(str)\nconst toTitleCase = (str) => str.replace(/^\\p{Ll}/u, x => x.toUpperCase())\nconst toLowerCase = (str) => str.replace(/^\\p{Lu}/u, x => x.toLowerCase())\n\n// splice an array into an array\nconst spliceArr = (parent, index, child) => {\n  // tag them as dirty\n  child.forEach(term => term.dirty = true)\n  if (parent) {\n    let args = [index, 0].concat(child)\n    Array.prototype.splice.apply(parent, args)\n  }\n  return parent\n}\n\n// add a space at end, if required\nconst endSpace = function (terms) {\n  const hasSpace = / $/\n  const hasDash = /[-–—]/\n  let lastTerm = terms[terms.length - 1]\n  if (lastTerm && !hasSpace.test(lastTerm.post) && !hasDash.test(lastTerm.post)) {\n    lastTerm.post += ' '\n  }\n}\n\n// sentence-ending punctuation should move in append\nconst movePunct = (source, end, needle) => {\n  const juicy = /[-.?!,;:)–—'\"]/g\n  let wasLast = source[end - 1]\n  if (!wasLast) {\n    return\n  }\n  let post = wasLast.post\n  if (juicy.test(post)) {\n    let punct = post.match(juicy).join('') //not perfect\n    let last = needle[needle.length - 1]\n    last.post = punct + last.post\n    // remove it, from source\n    wasLast.post = wasLast.post.replace(juicy, '')\n  }\n}\n\n\nconst moveTitleCase = function (home, start, needle) {\n  let from = home[start]\n  // should we bother?\n  if (start !== 0 || !isTitleCase(from.text)) {\n    return\n  }\n  // titlecase new first term\n  needle[0].text = toTitleCase(needle[0].text)\n  // should we un-titlecase the old word?\n  let old = home[start]\n  if (old.tags.has('ProperNoun') || old.tags.has('Acronym')) {\n    return\n  }\n  if (isTitleCase(old.text) && old.text.length > 1) {\n    old.text = toLowerCase(old.text)\n  }\n}\n\n// put these words before the others\nconst cleanPrepend = function (home, ptr, needle, document) {\n  let [n, start, end] = ptr\n  // introduce spaces appropriately\n  if (start === 0) {\n    // at start - need space in insert\n    endSpace(needle)\n  } else if (end === document[n].length) {\n    // at end - need space in home\n    endSpace(needle)\n  } else {\n    // in middle - need space in home and insert\n    endSpace(needle)\n    endSpace([home[ptr[1]]])\n  }\n  moveTitleCase(home, start, needle)\n  // movePunct(home, end, needle)\n  spliceArr(home, start, needle)\n}\n\nconst cleanAppend = function (home, ptr, needle, document) {\n  let [n, , end] = ptr\n  let total = (document[n] || []).length\n  if (end < total) {\n    // are we in the middle?\n    // add trailing space on self\n    movePunct(home, end, needle)\n    endSpace(needle)\n  } else if (total === end) {\n    // are we at the end?\n    // add a space to predecessor\n    endSpace(home)\n    // very end, move period\n    movePunct(home, end, needle)\n    // is there another sentence after?\n    if (document[n + 1]) {\n      needle[needle.length - 1].post += ' '\n    }\n  }\n  spliceArr(home, ptr[2], needle)\n  // set new endId\n  ptr[4] = needle[needle.length - 1].id\n}\n\nexport { cleanPrepend, cleanAppend, spliceArr }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}