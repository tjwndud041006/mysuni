{"ast":null,"code":"// guard against superlative+comparative forms\nconst toRoot = function (adj) {\n  const {\n    fromComparative,\n    fromSuperlative\n  } = adj.methods.two.transform.adjective;\n  let str = adj.text('normal');\n  if (adj.has('#Comparative')) {\n    return fromComparative(str, adj.model);\n  }\n  if (adj.has('#Superlative')) {\n    return fromSuperlative(str, adj.model);\n  }\n  return str;\n};\nconst api = function (View) {\n  class Adjectives extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Adjectives';\n    }\n    json(opts = {}) {\n      const {\n        toAdverb,\n        toNoun,\n        toSuperlative,\n        toComparative\n      } = this.methods.two.transform.adjective;\n      opts.normal = true;\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {};\n        let str = toRoot(m);\n        json.adjective = {\n          adverb: toAdverb(str, this.model),\n          noun: toNoun(str, this.model),\n          superlative: toSuperlative(str, this.model),\n          comparative: toComparative(str, this.model)\n        };\n        return json;\n      }, []);\n    }\n    adverbs() {\n      return this.before('#Adverb+$').concat(this.after('^#Adverb+'));\n    }\n    conjugate(n) {\n      const {\n        toComparative,\n        toSuperlative,\n        toNoun,\n        toAdverb\n      } = this.methods.two.transform.adjective;\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj);\n        return {\n          Adjective: root,\n          Comparative: toComparative(root, this.model),\n          Superlative: toSuperlative(root, this.model),\n          Noun: toNoun(root, this.model),\n          Adverb: toAdverb(root, this.model)\n        };\n      }, []);\n    }\n    toComparative(n) {\n      const {\n        toComparative\n      } = this.methods.two.transform.adjective;\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj);\n        let str = toComparative(root, this.model);\n        return adj.replaceWith(str);\n      });\n    }\n    toSuperlative(n) {\n      const {\n        toSuperlative\n      } = this.methods.two.transform.adjective;\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj);\n        let str = toSuperlative(root, this.model);\n        return adj.replaceWith(str);\n      });\n    }\n    toAdverb(n) {\n      const {\n        toAdverb\n      } = this.methods.two.transform.adjective;\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj);\n        let str = toAdverb(root, this.model);\n        return adj.replaceWith(str);\n      });\n    }\n    toNoun(n) {\n      const {\n        toNoun\n      } = this.methods.two.transform.adjective;\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj);\n        let str = toNoun(root, this.model);\n        return adj.replaceWith(str);\n      });\n    }\n  }\n  View.prototype.adjectives = function (n) {\n    let m = this.match('#Adjective');\n    m = m.getNth(n);\n    return new Adjectives(m.document, m.pointer);\n  };\n  View.prototype.superlatives = function (n) {\n    let m = this.match('#Superlative');\n    m = m.getNth(n);\n    return new Adjectives(m.document, m.pointer);\n  };\n  View.prototype.comparatives = function (n) {\n    let m = this.match('#Comparative');\n    m = m.getNth(n);\n    return new Adjectives(m.document, m.pointer);\n  };\n};\nexport default {\n  api\n};","map":{"version":3,"names":["toRoot","adj","fromComparative","fromSuperlative","methods","two","transform","adjective","str","text","has","model","api","View","Adjectives","constructor","document","pointer","groups","viewType","json","opts","toAdverb","toNoun","toSuperlative","toComparative","normal","map","m","toView","adverb","noun","superlative","comparative","adverbs","before","concat","after","conjugate","n","getNth","root","Adjective","Comparative","Superlative","Noun","Adverb","replaceWith","prototype","adjectives","match","superlatives","comparatives"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/3-three/adjectives/plugin.js"],"sourcesContent":["\n// guard against superlative+comparative forms\nconst toRoot = function (adj) {\n  const { fromComparative, fromSuperlative } = adj.methods.two.transform.adjective\n  let str = adj.text('normal')\n  if (adj.has('#Comparative')) {\n    return fromComparative(str, adj.model)\n  }\n  if (adj.has('#Superlative')) {\n    return fromSuperlative(str, adj.model)\n  }\n  return str\n}\n\nconst api = function (View) {\n\n  class Adjectives extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Adjectives'\n    }\n    json(opts = {}) {\n      const { toAdverb, toNoun, toSuperlative, toComparative } = this.methods.two.transform.adjective\n      opts.normal = true\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {}\n        let str = toRoot(m)\n        json.adjective = {\n          adverb: toAdverb(str, this.model),\n          noun: toNoun(str, this.model),\n          superlative: toSuperlative(str, this.model),\n          comparative: toComparative(str, this.model),\n        }\n        return json\n      }, [])\n    }\n    adverbs() {\n      return this.before('#Adverb+$').concat(this.after('^#Adverb+'))\n    }\n    conjugate(n) {\n      const { toComparative, toSuperlative, toNoun, toAdverb } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        return {\n          Adjective: root,\n          Comparative: toComparative(root, this.model),\n          Superlative: toSuperlative(root, this.model),\n          Noun: toNoun(root, this.model),\n          Adverb: toAdverb(root, this.model),\n        }\n      }, [])\n    }\n    toComparative(n) {\n      const { toComparative } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toComparative(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n    toSuperlative(n) {\n      const { toSuperlative } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toSuperlative(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n    toAdverb(n) {\n      const { toAdverb } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toAdverb(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n    toNoun(n) {\n      const { toNoun } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toNoun(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n  }\n\n  View.prototype.adjectives = function (n) {\n    let m = this.match('#Adjective')\n    m = m.getNth(n)\n    return new Adjectives(m.document, m.pointer)\n  }\n  View.prototype.superlatives = function (n) {\n    let m = this.match('#Superlative')\n    m = m.getNth(n)\n    return new Adjectives(m.document, m.pointer)\n  }\n  View.prototype.comparatives = function (n) {\n    let m = this.match('#Comparative')\n    m = m.getNth(n)\n    return new Adjectives(m.document, m.pointer)\n  }\n}\nexport default { api }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}