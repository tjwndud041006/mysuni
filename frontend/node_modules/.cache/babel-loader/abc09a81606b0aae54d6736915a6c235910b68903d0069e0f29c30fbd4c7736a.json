{"ast":null,"code":"const hasSlash = /\\//;\nconst hasDomain = /[a-z]\\.[a-z]/i;\nconst isMath = /[0-9]/;\n// const hasSlash = /[a-z\\u00C0-\\u00FF] ?\\/ ?[a-z\\u00C0-\\u00FF]/\n// const hasApostrophe = /['’]s$/\n\nconst addAliases = function (term, world) {\n  let str = term.normal || term.text || term.machine;\n  const aliases = world.model.one.aliases;\n  // lookup known aliases like '&'\n  if (aliases.hasOwnProperty(str)) {\n    term.alias = term.alias || [];\n    term.alias.push(aliases[str]);\n  }\n  // support slashes as aliases\n  if (hasSlash.test(str) && !hasDomain.test(str) && !isMath.test(str)) {\n    let arr = str.split(hasSlash);\n    // don't split urls and things\n    if (arr.length <= 3) {\n      arr.forEach(word => {\n        word = word.trim();\n        if (word !== '') {\n          term.alias = term.alias || [];\n          term.alias.push(word);\n        }\n      });\n    }\n  }\n  // aliases for apostrophe-s\n  // if (hasApostrophe.test(str)) {\n  //   let main = str.replace(hasApostrophe, '').trim()\n  //   term.alias = term.alias || []\n  //   term.alias.push(main)\n  // }\n  return term;\n};\nexport default addAliases;","map":{"version":3,"names":["hasSlash","hasDomain","isMath","addAliases","term","world","str","normal","text","machine","aliases","model","one","hasOwnProperty","alias","push","test","arr","split","length","forEach","word","trim"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/tokenize/compute/alias.js"],"sourcesContent":["const hasSlash = /\\//\nconst hasDomain = /[a-z]\\.[a-z]/i\nconst isMath = /[0-9]/\n// const hasSlash = /[a-z\\u00C0-\\u00FF] ?\\/ ?[a-z\\u00C0-\\u00FF]/\n// const hasApostrophe = /['’]s$/\n\nconst addAliases = function (term, world) {\n  let str = term.normal || term.text || term.machine\n  const aliases = world.model.one.aliases\n  // lookup known aliases like '&'\n  if (aliases.hasOwnProperty(str)) {\n    term.alias = term.alias || []\n    term.alias.push(aliases[str])\n  }\n  // support slashes as aliases\n  if (hasSlash.test(str) && !hasDomain.test(str) && !isMath.test(str)) {\n    let arr = str.split(hasSlash)\n    // don't split urls and things\n    if (arr.length <= 3) {\n      arr.forEach(word => {\n        word = word.trim()\n        if (word !== '') {\n          term.alias = term.alias || []\n          term.alias.push(word)\n        }\n      })\n    }\n  }\n  // aliases for apostrophe-s\n  // if (hasApostrophe.test(str)) {\n  //   let main = str.replace(hasApostrophe, '').trim()\n  //   term.alias = term.alias || []\n  //   term.alias.push(main)\n  // }\n  return term\n}\nexport default addAliases\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,IAAI;AACrB,MAAMC,SAAS,GAAG,eAAe;AACjC,MAAMC,MAAM,GAAG,OAAO;AACtB;AACA;;AAEA,MAAMC,UAAU,GAAG,SAAAA,CAAUC,IAAI,EAAEC,KAAK,EAAE;EACxC,IAAIC,GAAG,GAAGF,IAAI,CAACG,MAAM,IAAIH,IAAI,CAACI,IAAI,IAAIJ,IAAI,CAACK,OAAO;EAClD,MAAMC,OAAO,GAAGL,KAAK,CAACM,KAAK,CAACC,GAAG,CAACF,OAAO;EACvC;EACA,IAAIA,OAAO,CAACG,cAAc,CAACP,GAAG,CAAC,EAAE;IAC/BF,IAAI,CAACU,KAAK,GAAGV,IAAI,CAACU,KAAK,IAAI,EAAE;IAC7BV,IAAI,CAACU,KAAK,CAACC,IAAI,CAACL,OAAO,CAACJ,GAAG,CAAC,CAAC;EAC/B;EACA;EACA,IAAIN,QAAQ,CAACgB,IAAI,CAACV,GAAG,CAAC,IAAI,CAACL,SAAS,CAACe,IAAI,CAACV,GAAG,CAAC,IAAI,CAACJ,MAAM,CAACc,IAAI,CAACV,GAAG,CAAC,EAAE;IACnE,IAAIW,GAAG,GAAGX,GAAG,CAACY,KAAK,CAAClB,QAAQ,CAAC;IAC7B;IACA,IAAIiB,GAAG,CAACE,MAAM,IAAI,CAAC,EAAE;MACnBF,GAAG,CAACG,OAAO,CAACC,IAAI,IAAI;QAClBA,IAAI,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC;QAClB,IAAID,IAAI,KAAK,EAAE,EAAE;UACfjB,IAAI,CAACU,KAAK,GAAGV,IAAI,CAACU,KAAK,IAAI,EAAE;UAC7BV,IAAI,CAACU,KAAK,CAACC,IAAI,CAACM,IAAI,CAAC;QACvB;MACF,CAAC,CAAC;IACJ;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOjB,IAAI;AACb,CAAC;AACD,eAAeD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}