{"ast":null,"code":"/** insert new words/phrases into the lexicon */\nconst addWords = function (words, isFrozen = false) {\n  const world = this.world();\n  const {\n    methods,\n    model\n  } = world;\n  if (!words) {\n    return;\n  }\n  // normalize tag vals\n  Object.keys(words).forEach(k => {\n    if (typeof words[k] === 'string' && words[k].startsWith('#')) {\n      words[k] = words[k].replace(/^#/, '');\n    }\n  });\n  // these words go into a seperate lexicon\n  if (isFrozen === true) {\n    let {\n      lex,\n      _multi\n    } = methods.one.expandLexicon(words, world);\n    Object.assign(model.one._multiCache, _multi);\n    Object.assign(model.one.frozenLex, lex);\n    return;\n  }\n  // add some words to our lexicon\n  if (methods.two.expandLexicon) {\n    // do fancy ./two version\n    let {\n      lex,\n      _multi\n    } = methods.two.expandLexicon(words, world);\n    Object.assign(model.one.lexicon, lex);\n    Object.assign(model.one._multiCache, _multi);\n  }\n  // do basic ./one version\n  let {\n    lex,\n    _multi\n  } = methods.one.expandLexicon(words, world);\n  Object.assign(model.one.lexicon, lex);\n  Object.assign(model.one._multiCache, _multi);\n};\nexport default {\n  addWords\n};","map":{"version":3,"names":["addWords","words","isFrozen","world","methods","model","Object","keys","forEach","k","startsWith","replace","lex","_multi","one","expandLexicon","assign","_multiCache","frozenLex","two","lexicon"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/1-one/lexicon/lib.js"],"sourcesContent":["/** insert new words/phrases into the lexicon */\nconst addWords = function (words, isFrozen = false) {\n  const world = this.world()\n  const { methods, model } = world\n  if (!words) {\n    return\n  }\n  // normalize tag vals\n  Object.keys(words).forEach(k => {\n    if (typeof words[k] === 'string' && words[k].startsWith('#')) {\n      words[k] = words[k].replace(/^#/, '')\n    }\n  })\n  // these words go into a seperate lexicon\n  if (isFrozen === true) {\n    let { lex, _multi } = methods.one.expandLexicon(words, world)\n    Object.assign(model.one._multiCache, _multi)\n    Object.assign(model.one.frozenLex, lex)\n    return\n  }\n  // add some words to our lexicon\n  if (methods.two.expandLexicon) {\n    // do fancy ./two version\n    let { lex, _multi } = methods.two.expandLexicon(words, world)\n    Object.assign(model.one.lexicon, lex)\n    Object.assign(model.one._multiCache, _multi)\n  }\n  // do basic ./one version\n  let { lex, _multi } = methods.one.expandLexicon(words, world)\n  Object.assign(model.one.lexicon, lex)\n  Object.assign(model.one._multiCache, _multi)\n}\n\nexport default { addWords }\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,SAAAA,CAAUC,KAAK,EAAEC,QAAQ,GAAG,KAAK,EAAE;EAClD,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC;EAC1B,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGF,KAAK;EAChC,IAAI,CAACF,KAAK,EAAE;IACV;EACF;EACA;EACAK,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC,CAACO,OAAO,CAACC,CAAC,IAAI;IAC9B,IAAI,OAAOR,KAAK,CAACQ,CAAC,CAAC,KAAK,QAAQ,IAAIR,KAAK,CAACQ,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;MAC5DT,KAAK,CAACQ,CAAC,CAAC,GAAGR,KAAK,CAACQ,CAAC,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IACvC;EACF,CAAC,CAAC;EACF;EACA,IAAIT,QAAQ,KAAK,IAAI,EAAE;IACrB,IAAI;MAAEU,GAAG;MAAEC;IAAO,CAAC,GAAGT,OAAO,CAACU,GAAG,CAACC,aAAa,CAACd,KAAK,EAAEE,KAAK,CAAC;IAC7DG,MAAM,CAACU,MAAM,CAACX,KAAK,CAACS,GAAG,CAACG,WAAW,EAAEJ,MAAM,CAAC;IAC5CP,MAAM,CAACU,MAAM,CAACX,KAAK,CAACS,GAAG,CAACI,SAAS,EAAEN,GAAG,CAAC;IACvC;EACF;EACA;EACA,IAAIR,OAAO,CAACe,GAAG,CAACJ,aAAa,EAAE;IAC7B;IACA,IAAI;MAAEH,GAAG;MAAEC;IAAO,CAAC,GAAGT,OAAO,CAACe,GAAG,CAACJ,aAAa,CAACd,KAAK,EAAEE,KAAK,CAAC;IAC7DG,MAAM,CAACU,MAAM,CAACX,KAAK,CAACS,GAAG,CAACM,OAAO,EAAER,GAAG,CAAC;IACrCN,MAAM,CAACU,MAAM,CAACX,KAAK,CAACS,GAAG,CAACG,WAAW,EAAEJ,MAAM,CAAC;EAC9C;EACA;EACA,IAAI;IAAED,GAAG;IAAEC;EAAO,CAAC,GAAGT,OAAO,CAACU,GAAG,CAACC,aAAa,CAACd,KAAK,EAAEE,KAAK,CAAC;EAC7DG,MAAM,CAACU,MAAM,CAACX,KAAK,CAACS,GAAG,CAACM,OAAO,EAAER,GAAG,CAAC;EACrCN,MAAM,CAACU,MAAM,CAACX,KAAK,CAACS,GAAG,CAACG,WAAW,EAAEJ,MAAM,CAAC;AAC9C,CAAC;AAED,eAAe;EAAEb;AAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}