{"ast":null,"code":"// Copyright (c) 2011, Chris Umbel, James Coglan\n// Line.Segment class - depends on Line and its dependencies.\n\nvar Line = require('./line');\nvar Vector = require('./vector');\nLine.Segment = function () {};\nLine.Segment.prototype = {\n  // Returns true iff the line segment is equal to the argument\n  eql: function (segment) {\n    return this.start.eql(segment.start) && this.end.eql(segment.end) || this.start.eql(segment.end) && this.end.eql(segment.start);\n  },\n  // Returns a copy of the line segment\n  dup: function () {\n    return Line.Segment.create(this.start, this.end);\n  },\n  // Returns the length of the line segment\n  length: function () {\n    var A = this.start.elements,\n      B = this.end.elements;\n    var C1 = B[0] - A[0],\n      C2 = B[1] - A[1],\n      C3 = B[2] - A[2];\n    return Math.sqrt(C1 * C1 + C2 * C2 + C3 * C3);\n  },\n  // Returns the line segment as a vector equal to its\n  // end point relative to its endpoint\n  toVector: function () {\n    var A = this.start.elements,\n      B = this.end.elements;\n    return Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);\n  },\n  // Returns the segment's midpoint as a vector\n  midpoint: function () {\n    var A = this.start.elements,\n      B = this.end.elements;\n    return Vector.create([(B[0] + A[0]) / 2, (B[1] + A[1]) / 2, (B[2] + A[2]) / 2]);\n  },\n  // Returns the plane that bisects the segment\n  bisectingPlane: function () {\n    return Plane.create(this.midpoint(), this.toVector());\n  },\n  // Returns the result of translating the line by the given vector/array\n  translate: function (vector) {\n    var V = vector.elements || vector;\n    var S = this.start.elements,\n      E = this.end.elements;\n    return Line.Segment.create([S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)], [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]);\n  },\n  // Returns true iff the line segment is parallel to the argument. It simply forwards\n  // the method call onto its line property.\n  isParallelTo: function (obj) {\n    return this.line.isParallelTo(obj);\n  },\n  // Returns the distance between the argument and the line segment's closest point to the argument\n  distanceFrom: function (obj) {\n    var P = this.pointClosestTo(obj);\n    return P === null ? null : P.distanceFrom(obj);\n  },\n  // Returns true iff the given point lies on the segment\n  contains: function (obj) {\n    if (obj.start && obj.end) {\n      return this.contains(obj.start) && this.contains(obj.end);\n    }\n    var P = (obj.elements || obj).slice();\n    if (P.length == 2) {\n      P.push(0);\n    }\n    if (this.start.eql(P)) {\n      return true;\n    }\n    var S = this.start.elements;\n    var V = Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);\n    var vect = this.toVector();\n    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();\n  },\n  // Returns true iff the line segment intersects the argument\n  intersects: function (obj) {\n    return this.intersectionWith(obj) !== null;\n  },\n  // Returns the unique point of intersection with the argument\n  intersectionWith: function (obj) {\n    if (!this.line.intersects(obj)) {\n      return null;\n    }\n    var P = this.line.intersectionWith(obj);\n    return this.contains(P) ? P : null;\n  },\n  // Returns the point on the line segment closest to the given object\n  pointClosestTo: function (obj) {\n    if (obj.normal) {\n      // obj is a plane\n      var V = this.line.intersectionWith(obj);\n      if (V === null) {\n        return null;\n      }\n      return this.pointClosestTo(V);\n    } else {\n      // obj is a line (segment) or point\n      var P = this.line.pointClosestTo(obj);\n      if (P === null) {\n        return null;\n      }\n      if (this.contains(P)) {\n        return P;\n      }\n      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();\n    }\n  },\n  // Set the start and end-points of the segment\n  setPoints: function (startPoint, endPoint) {\n    startPoint = Vector.create(startPoint).to3D();\n    endPoint = Vector.create(endPoint).to3D();\n    if (startPoint === null || endPoint === null) {\n      return null;\n    }\n    this.line = Line.create(startPoint, endPoint.subtract(startPoint));\n    this.start = startPoint;\n    this.end = endPoint;\n    return this;\n  }\n};\n\n// Constructor function\nLine.Segment.create = function (v1, v2) {\n  var S = new Line.Segment();\n  return S.setPoints(v1, v2);\n};\nmodule.exports = Line.Segment;","map":{"version":3,"names":["Line","require","Vector","Segment","prototype","eql","segment","start","end","dup","create","length","A","elements","B","C1","C2","C3","Math","sqrt","toVector","midpoint","bisectingPlane","Plane","translate","vector","V","S","E","isParallelTo","obj","line","distanceFrom","P","pointClosestTo","contains","slice","push","vect","isAntiparallelTo","modulus","intersects","intersectionWith","normal","positionOf","setPoints","startPoint","endPoint","to3D","subtract","v1","v2","module","exports"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/sylvester/lib/node-sylvester/line.segment.js"],"sourcesContent":["// Copyright (c) 2011, Chris Umbel, James Coglan\n// Line.Segment class - depends on Line and its dependencies.\n\nvar Line = require('./line');\nvar Vector = require('./vector');\n\nLine.Segment = function() {};\nLine.Segment.prototype = {\n\n  // Returns true iff the line segment is equal to the argument\n  eql: function(segment) {\n    return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||\n        (this.start.eql(segment.end) && this.end.eql(segment.start));\n  },\n\n  // Returns a copy of the line segment\n  dup: function() {\n    return Line.Segment.create(this.start, this.end);\n  },\n\n  // Returns the length of the line segment\n  length: function() {\n    var A = this.start.elements, B = this.end.elements;\n    var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];\n    return Math.sqrt(C1*C1 + C2*C2 + C3*C3);\n  },\n\n  // Returns the line segment as a vector equal to its\n  // end point relative to its endpoint\n  toVector: function() {\n    var A = this.start.elements, B = this.end.elements;\n    return Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);\n  },\n\n  // Returns the segment's midpoint as a vector\n  midpoint: function() {\n    var A = this.start.elements, B = this.end.elements;\n    return Vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);\n  },\n\n  // Returns the plane that bisects the segment\n  bisectingPlane: function() {\n    return Plane.create(this.midpoint(), this.toVector());\n  },\n\n  // Returns the result of translating the line by the given vector/array\n  translate: function(vector) {\n    var V = vector.elements || vector;\n    var S = this.start.elements, E = this.end.elements;\n    return Line.Segment.create(\n      [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],\n      [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]\n    );\n  },\n\n  // Returns true iff the line segment is parallel to the argument. It simply forwards\n  // the method call onto its line property.\n  isParallelTo: function(obj) {\n    return this.line.isParallelTo(obj);\n  },\n\n  // Returns the distance between the argument and the line segment's closest point to the argument\n  distanceFrom: function(obj) {\n    var P = this.pointClosestTo(obj);\n    return (P === null) ? null : P.distanceFrom(obj);\n  },\n\n  // Returns true iff the given point lies on the segment\n  contains: function(obj) {\n    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }\n    var P = (obj.elements || obj).slice();\n    if (P.length == 2) { P.push(0); }\n    if (this.start.eql(P)) { return true; }\n    var S = this.start.elements;\n    var V = Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);\n    var vect = this.toVector();\n    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();\n  },\n\n  // Returns true iff the line segment intersects the argument\n  intersects: function(obj) {\n    return (this.intersectionWith(obj) !== null);\n  },\n\n  // Returns the unique point of intersection with the argument\n  intersectionWith: function(obj) {\n    if (!this.line.intersects(obj)) { return null; }\n    var P = this.line.intersectionWith(obj);\n    return (this.contains(P) ? P : null);\n  },\n\n  // Returns the point on the line segment closest to the given object\n  pointClosestTo: function(obj) {\n    if (obj.normal) {\n      // obj is a plane\n      var V = this.line.intersectionWith(obj);\n      if (V === null) { return null; }\n      return this.pointClosestTo(V);\n    } else {\n      // obj is a line (segment) or point\n      var P = this.line.pointClosestTo(obj);\n      if (P === null) { return null; }\n      if (this.contains(P)) { return P; }\n      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();\n    }\n  },\n\n  // Set the start and end-points of the segment\n  setPoints: function(startPoint, endPoint) {\n    startPoint = Vector.create(startPoint).to3D();\n    endPoint = Vector.create(endPoint).to3D();\n    if (startPoint === null || endPoint === null) { return null; }\n    this.line = Line.create(startPoint, endPoint.subtract(startPoint));\n    this.start = startPoint;\n    this.end = endPoint;\n    return this;\n  }\n};\n\n// Constructor function\nLine.Segment.create = function(v1, v2) {\n  var S = new Line.Segment();\n  return S.setPoints(v1, v2);\n};\n\nmodule.exports = Line.Segment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}