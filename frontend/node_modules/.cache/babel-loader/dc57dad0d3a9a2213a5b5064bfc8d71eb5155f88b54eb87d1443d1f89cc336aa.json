{"ast":null,"code":"const verbType = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag;\n  const term = terms[i];\n  const types = ['PastTense', 'PresentTense', 'Auxiliary', 'Modal', 'Particle'];\n  if (term.tags.has('Verb')) {\n    let type = types.find(typ => term.tags.has(typ));\n    // is it a bare #Verb tag?\n    if (!type) {\n      setTag([term], 'Infinitive', world, null, `2-verb-type''`);\n    }\n  }\n};\nexport default verbType;","map":{"version":3,"names":["verbType","terms","i","model","world","setTag","methods","one","term","types","tags","has","type","find","typ"],"sources":["/Users/seojuyoung/sunic/project/frontend/node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/07-verb-type.js"],"sourcesContent":["const verbType = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag\n  const term = terms[i]\n  const types = ['PastTense', 'PresentTense', 'Auxiliary', 'Modal', 'Particle']\n  if (term.tags.has('Verb')) {\n    let type = types.find(typ => term.tags.has(typ))\n    // is it a bare #Verb tag?\n    if (!type) {\n      setTag([term], 'Infinitive', world, null, `2-verb-type''`)\n    }\n  }\n}\nexport default verbType"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,SAAAA,CAAUC,KAAK,EAAEC,CAAC,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACjD,MAAMC,MAAM,GAAGD,KAAK,CAACE,OAAO,CAACC,GAAG,CAACF,MAAM;EACvC,MAAMG,IAAI,GAAGP,KAAK,CAACC,CAAC,CAAC;EACrB,MAAMO,KAAK,GAAG,CAAC,WAAW,EAAE,cAAc,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,CAAC;EAC7E,IAAID,IAAI,CAACE,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,EAAE;IACzB,IAAIC,IAAI,GAAGH,KAAK,CAACI,IAAI,CAACC,GAAG,IAAIN,IAAI,CAACE,IAAI,CAACC,GAAG,CAACG,GAAG,CAAC,CAAC;IAChD;IACA,IAAI,CAACF,IAAI,EAAE;MACTP,MAAM,CAAC,CAACG,IAAI,CAAC,EAAE,YAAY,EAAEJ,KAAK,EAAE,IAAI,EAAE,eAAe,CAAC;IAC5D;EACF;AACF,CAAC;AACD,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}